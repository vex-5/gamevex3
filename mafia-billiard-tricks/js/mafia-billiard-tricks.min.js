var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class AdTimer {
        static timeForAd() {
            if (!AdTimer.lastTime) {
                AdTimer.lastTime = Date.now();
                return true;
            }
            var eventStartTime = AdTimer.lastTime;
            var eventEndTime = Date.now();
            var duration = eventEndTime - eventStartTime;
            const timeForAd = duration > AdTimer.AD_INTERVAL_MILLISECONDS;
            if (!timeForAd) {
                AdTimer.printOutTimerData(duration);
            }
            return timeForAd;
        }
        static printOutTimerData(current = 0) {
            if (MafiaBilliardTricks.GameConstants.DEVELOPMENT) {
                console.log("Not time for ad yet.");
                console.log("Interval: " + AdTimer.AD_INTERVAL_MILLISECONDS + " ms");
                if (current) {
                    console.error("Current: " + current + " ms");
                }
            }
        }
    }
    AdTimer.AD_INTERVAL_MILLISECONDS = 60000 * 5;
    MafiaBilliardTricks.AdTimer = AdTimer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class AudioManager {
        static init(game) {
            AudioManager.game = game;
            AudioManager.loopPlayingKey = null;
            AudioManager.audioSprite = AudioManager.game.add.audioSprite("audio-sprite");
            AudioManager.game.sound.mute = MafiaBilliardTricks.GameVars.gameData.muted;
        }
        static switchAudioState() {
            MafiaBilliardTricks.GameVars.gameData.muted = !MafiaBilliardTricks.GameVars.gameData.muted;
            AudioManager.game.sound.mute = MafiaBilliardTricks.GameVars.gameData.muted;
            MafiaBilliardTricks.GameManager.writeGameData();
        }
        static mute() {
            if (MafiaBilliardTricks.GameVars.gameData) {
                MafiaBilliardTricks.GameVars.gameData.muted = true;
                AudioManager.game.sound.mute = MafiaBilliardTricks.GameVars.gameData.muted;
            }
        }
        static unmute() {
            if (MafiaBilliardTricks.GameVars.gameData) {
                MafiaBilliardTricks.GameVars.gameData.muted = false;
                AudioManager.game.sound.mute = MafiaBilliardTricks.GameVars.gameData.muted;
            }
        }
        static playSound(key, loop, volume) {
            if (!MafiaBilliardTricks.GameVars.gameData.muted) {
                loop = loop || false;
                AudioManager.audioSprite.play(key, volume);
                if (loop) {
                    let sound = this.audioSprite.get(key);
                    sound.loop = true;
                    if (AudioManager.loopPlayingKey && (AudioManager.loopPlayingKey !== key)) {
                        AudioManager.stopSound(AudioManager.loopPlayingKey, false, true);
                    }
                    AudioManager.loopPlayingKey = key;
                }
            }
        }
        static stopSound(key, fade, loop) {
            if (key === null || typeof key === "undefined") {
                return;
            }
            if (fade) {
                let sound = this.audioSprite.get(key);
                sound.fadeOut(850);
            }
            else {
                AudioManager.audioSprite.stop(key);
            }
            if (loop) {
                AudioManager.loopPlayingKey = null;
            }
        }
    }
    MafiaBilliardTricks.AudioManager = AudioManager;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class Game extends Phaser.Game {
        constructor() {
            let renderer;
            let ua = navigator.userAgent;
            if (ua.match(/iPhone/i) || ua.match(/iPad/i) || ua.match(/iPod/i) || /Kindle/i.test(ua) || /Silk/i.test(ua) || /KFTT/i.test(ua) || /KFOT/i.test(ua) || /KFJWA/i.test(ua) || /KFJWI/i.test(ua) || /KFSOWI/i.test(ua) || /KFTHWA/i.test(ua) || /KFTHWI/i.test(ua) || /KFAPWA/i.test(ua) || /KFAPWI/i.test(ua)) {
                renderer = Phaser.CANVAS;
            }
            else {
                renderer = Phaser.AUTO;
            }
            super(MafiaBilliardTricks.GameConstants.GAME_WIDTH, MafiaBilliardTricks.GameConstants.GAME_HEIGHT, renderer, "content", null, false, true);
            Game.currentInstance = this;
            this.state.add("PreLoader", MafiaBilliardTricks.PreLoader, false);
            this.state.add("LevelSelectionState", MafiaBilliardTricks.LevelSelectionState, false);
            this.state.add("LevelEditionState", MafiaBilliardTricks.LevelEditionState, false);
            this.state.add("PoolState", MafiaBilliardTricks.PoolState, false);
            this.state.add("CreditsState", MafiaBilliardTricks.CreditsState, false);
            this.state.add("LanguageState", MafiaBilliardTricks.LanguageState, false);
            this.state.add("DevLevelSelectionState", MafiaBilliardTricks.DevLevelSelectionState, false);
            this.state.add("Boot", MafiaBilliardTricks.Boot, true);
        }
    }
    MafiaBilliardTricks.Game = Game;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class GameConstants {
    }
    GameConstants.VERSION = "1.01";
    GameConstants.ASSETS_PATH = "assets";
    GameConstants.DEVELOPMENT = false;
    GameConstants.LEVEL_EDITION = false;
    GameConstants.GAME_FINISHED = false;
    GameConstants.DEBUG = false;
    GameConstants.SHOW_CUE_BALL_TRAJECTORY = false;
    GameConstants.VERBOSE = false;
    GameConstants.ENGLISH = "en";
    GameConstants.FRENCH = "fr";
    GameConstants.GERMAN = "de";
    GameConstants.PORTUGUESE = "pt";
    GameConstants.SPANISH = "es";
    GameConstants.RUSSIAN = "ru";
    GameConstants.CATALAN = "ca";
    GameConstants.USE_STAR_DIVIDER_TO_INTERPOLATE_MINIMUM = 6;
    GameConstants.GAME_WIDTH = 1024;
    GameConstants.GAME_HEIGHT = 640;
    GameConstants.TABLE_POS_X = GameConstants.GAME_WIDTH / 2;
    GameConstants.TABLE_POS_Y = 365;
    GameConstants.PHYS_SCALE = .01;
    GameConstants.BALL_RADIUS = 1400;
    GameConstants.FRICTION = 1;
    GameConstants.POCKET_RADIUS = 2300;
    GameConstants.MIN_VELOCITY = 2;
    GameConstants.CUSHION_RESTITUTION = .6;
    GameConstants.BALL_RESTITUTION = .91;
    GameConstants.GRID_DELTA_LINE = 40;
    GameConstants.GRID_TOLERANCE = 8;
    GameConstants.FINE_DIAL_SENSITIVITY = 0.0075;
    GameConstants.TIME_FADE_IN_OUT = 350;
    GameConstants.FADE_COLOR = 0x000000;
    GameConstants.BITMAP_SIZE = 64;
    GameConstants.WHITE_SQUARE = "white_square";
    GameConstants.BLACK_SQUARE = "black_square";
    GameConstants.GREY_SQUARE = "grey_square";
    GameConstants.GREEN_SQUARE = "green_square";
    GameConstants.RED_SQUARE = "red_square";
    GameConstants.BLUE_SQUARE = "blue_square";
    GameConstants.BROWN_SQUARE = "brown_square";
    GameConstants.DARK_BROWN_SQUARE = "dark_brown_square";
    GameConstants.BALL_TYPE_SOLID = "ball solid";
    GameConstants.BALL_TYPE_STRIPED = "ball striped";
    GameConstants.LEFT = "left";
    GameConstants.RIGHT = "right";
    GameConstants.SAVED_GAME_DATA_KEY = "saved-game-data-1";
    GameConstants.WHITE = 0;
    GameConstants.YELLOW = 9;
    GameConstants.BLUE = 10;
    GameConstants.RED = 11;
    GameConstants.LILAC = 12;
    GameConstants.ORANGE = 13;
    GameConstants.GREEN = 14;
    GameConstants.MAROON = 15;
    GameConstants.BOT = "bot";
    GameConstants.TWEEN_OUT_DURATION_MOBILE_CONTROLS = 700;
    GameConstants.MOBILE_CONTROLS_EDGE_OFFSET = 35;
    GameConstants.MOBILE_CONTROLS_WIDTH_MULTIPLIER = 1.5;
    GameConstants.DESIRED_PATH_ERROR_MAX = 0.1;
    GameConstants.BALLS_INITIAL_POSITIONS = [
        [-21000, 0],
        [21000, 0],
        [23424.8, 1400],
        [30699.2, -5600],
        [28274.4, 4200],
        [25849.6, 2800],
        [28274.4, -4200],
        [28274.4, 1400],
        [25849.6, 0],
        [28274.4, -1400],
        [25849.6, -2800],
        [30699.2, 0],
        [30699.2, 2800],
        [30699.2, -2800],
        [30699.2, 5600],
        [23424.8, -1400]
    ];
    GameConstants.TUTORIAL_LEVELS = [
        { level: 1, tutEnum: 0 },
        { level: 7, tutEnum: 1 },
        { level: 12, tutEnum: 3 },
        { level: 17, tutEnum: 6 },
        { level: 19, tutEnum: 6 },
        { level: 20, tutEnum: 6 },
        { level: 22, tutEnum: 7 },
        { level: 24, tutEnum: 9 },
        { level: 25, tutEnum: 7 },
        { level: 27, tutEnum: 8 },
        { level: 29, tutEnum: 6 },
        { level: 32, tutEnum: 9 },
        { level: 34, tutEnum: 9 },
        { level: 40, tutEnum: 7 }
    ];
    MafiaBilliardTricks.GameConstants = GameConstants;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class GameManager {
        static init(game) {
            GameManager.game = game;
            MafiaBilliardTricks.GameVars.teleportToLatestBossPage = true;
            this.resetCurrentLevel();
            MafiaBilliardTricks.GameVars.botStarts = false;
            MafiaBilliardTricks.GameVars.bossSkill = -1;
            MafiaBilliardTricks.GameVars.currentBoss = -1;
            MafiaBilliardTricks.GameVars.bossMatchActive = false;
            MafiaBilliardTricks.GameVars.lastLevelBeaten = -1;
            MafiaBilliardTricks.GameVars.lastBossBeaten = -1;
            MafiaBilliardTricks.GameVars.bossAttemptsDon = 0;
            MafiaBilliardTricks.GameVars.bossAttemptsElsa = 0;
            MafiaBilliardTricks.GameVars.doUndo = false;
            MafiaBilliardTricks.GameVars.levelDialogueAlreadyRun = false;
            MafiaBilliardTricks.GameVars.tutorialActive = false;
            MafiaBilliardTricks.GameVars.continueWithTutorial = false;
            MafiaBilliardTricks.GameVars.suggestedSpin = MafiaBilliardTricks.SpinTypes.NONE;
            MafiaBilliardTricks.GameVars.skipNextScreenTap = false;
            MafiaBilliardTricks.GameVars.selectingPocket = false;
            MafiaBilliardTricks.GameVars.justLeftCreditsPage = false;
            GameManager.initBilliardVars();
            GameManager.readGameData();
        }
        static readGameData() {
            GameManager.getGameStorageData(MafiaBilliardTricks.GameConstants.SAVED_GAME_DATA_KEY, function (gameData) {
                if (gameData) {
                    MafiaBilliardTricks.GameVars.gameData = JSON.parse(gameData);
                }
                else {
                    MafiaBilliardTricks.GameVars.gameData = {
                        muted: false,
                        spinMechanismActive: false,
                        introAlreadySeen: false,
                        language: MafiaBilliardTricks.GameConstants.ENGLISH,
                        languageSet: false,
                        powerBarSide: MafiaBilliardTricks.GameConstants.LEFT,
                        levelStars: null,
                        bossesUnlocked: null
                    };
                    MafiaBilliardTricks.GameVars.gameData.powerBarSide = MafiaBilliardTricks.GameConstants.LEFT;
                    MafiaBilliardTricks.GameVars.gameData.levelStars = [40];
                    MafiaBilliardTricks.GameVars.gameData.levelStars[0] = 0;
                    for (let i = 1; i < 40; i++) {
                        MafiaBilliardTricks.GameVars.gameData.levelStars[i] = MafiaBilliardTricks.GameConstants.GAME_FINISHED ? 1 : -1;
                    }
                    MafiaBilliardTricks.GameVars.gameData.bossesUnlocked = [8];
                    for (let i = 0; i < 8; i++) {
                        MafiaBilliardTricks.GameVars.gameData.bossesUnlocked[i] = MafiaBilliardTricks.GameConstants.GAME_FINISHED ? 1 : -1;
                    }
                    GameManager.writeGameData();
                }
                GameManager.startPreLoader();
            }, function (error) {
                GameManager.log("error retriving saved game data.", error);
            });
        }
        static setLanguage(lang, save = true) {
            if (save) {
                MafiaBilliardTricks.GameVars.gameData.language = lang;
                MafiaBilliardTricks.GameVars.gameData.languageSet = true;
                GameManager.writeGameData();
            }
            MafiaBilliardTricks.GameVars.selectedLanguagePath = MafiaBilliardTricks.GameVars.gameData.language + "/" + MafiaBilliardTricks.GameVars.gameData.language;
        }
        static enterBossLevel(bossId) {
            MafiaBilliardTricks.GameVars.bossMatchActive = true;
            MafiaBilliardTricks.GameVars.currentLevel = (bossId * 5) + 4;
            const bosslevels = this.game.cache.getJSON("boss_levels");
            let bossLevelData = bosslevels;
            MafiaBilliardTricks.GameVars.currentBoss = bossId;
            GameManager.log(MafiaBilliardTricks.GameVars.currentBoss.toString());
            MafiaBilliardTricks.GameVars.bossSkill = bossLevelData[MafiaBilliardTricks.GameVars.currentBoss].skill;
            MafiaBilliardTricks.GameVars.botStarts = bossLevelData[MafiaBilliardTricks.GameVars.currentBoss].botStarts ? true : false;
            if (this.game.device.touch && this.game.scale.compatibility.supportsFullScreen && !(this.game.device.iOS && this.game.device.mobileSafari)) {
                this.game.scale.startFullScreen();
                if (!MafiaBilliardTricks.GameVars.fullscreenTimer) {
                    MafiaBilliardTricks.GameVars.fullscreenTimer = this.game.time.events.add(400, function () {
                        this.onLevelSelected(MafiaBilliardTricks.GameVars.currentLevel);
                    }, this);
                }
                else {
                    this.onLevelSelected(MafiaBilliardTricks.GameVars.currentLevel);
                }
            }
            else {
                this.onLevelSelected(MafiaBilliardTricks.GameVars.currentLevel);
            }
        }
        static onGameAssetsLoaded() {
            MafiaBilliardTricks.AdHelper.loadRewardedAd();
            MafiaBilliardTricks.AudioManager.init(GameManager.game);
            MafiaBilliardTricks.GameVars.gameText = this.game.cache.getJSON("game-text");
            MafiaBilliardTricks.GameVars.dialogueBank = this.game.cache.getJSON("dialogue_bank");
            this.setStarlessLevels();
            MafiaBilliardTricks.AdHelper.showAd(() => {
                if (MafiaBilliardTricks.GameConstants.LEVEL_EDITION) {
                    GameManager.game.state.start("DevLevelSelectionState", true, false);
                }
                else {
                    GameManager.game.state.start("LevelSelectionState", true, false);
                }
            }, this);
        }
        static setIntroSeen(seen) {
            MafiaBilliardTricks.GameVars.gameData.introAlreadySeen = true;
            GameManager.writeGameData();
        }
        static onLevelSelected(level) {
            this.game.time.events.clearPendingEvents();
            this.game.time.events.destroy();
            this.game.time.removeAll();
            this.game.time.events.removeAll();
            if (MafiaBilliardTricks.GameVars.fullscreenTimer) {
                MafiaBilliardTricks.GameVars.fullscreenTimer.pendingDelete = true;
                MafiaBilliardTricks.GameVars.fullscreenTimer.timer.autoDestroy = true;
            }
            MafiaBilliardTricks.GameVars.currentLevel = level;
            GameManager.game.state.start("PoolState", true, false);
        }
        static onClickPlay() {
            GameManager.game.state.start("LevelSelectionState", true, false);
        }
        static onClickBack() {
            MafiaBilliardTricks.GameVars.paused = false;
            MafiaBilliardTricks.GameVars.bossMatchActive = false;
            MafiaBilliardTricks.GameVars.botStarts = false;
            MafiaBilliardTricks.GameVars.levelDialogueAlreadyRun = false;
            MafiaBilliardTricks.GameVars.tutorialActive = false;
            MafiaBilliardTricks.GameVars.continueWithTutorial = false;
            MafiaBilliardTricks.GameVars.doUndo = false;
            MafiaBilliardTricks.GameVars.lossCountSolo = 0;
            MafiaBilliardTricks.MatchManager.destroyTimer();
            MafiaBilliardTricks.AudioManager.stopSound("music_gameover");
            MafiaBilliardTricks.AudioManager.stopSound("music_1_star");
            MafiaBilliardTricks.AudioManager.stopSound("music_2_star");
            MafiaBilliardTricks.AudioManager.stopSound("music_3_star");
            if (MafiaBilliardTricks.GameConstants.LEVEL_EDITION) {
                GameManager.game.state.start("DevLevelSelectionState", true, false);
            }
            else {
                GameManager.game.state.start("LevelSelectionState", true, false);
            }
        }
        static enterCreditsState() {
            GameManager.game.state.start("CreditsState", true, false);
        }
        static enterLanguageState() {
            GameManager.game.state.start("LanguageState", true, false);
        }
        static returnToHomeFromSubMenuState() {
            MafiaBilliardTricks.GameVars.teleportToLatestBossPage = true;
            GameManager.game.state.start("LevelSelectionState", true, false);
        }
        static onShowCredits() {
            MafiaBilliardTricks.GameVars.bossMatchActive = false;
            MafiaBilliardTricks.GameVars.botStarts = false;
        }
        static changeMobileControlsSide(type) {
            MafiaBilliardTricks.GameVars.gameData.powerBarSide = type;
            MafiaBilliardTricks.PoolState.currentInstance.changeMobileControlsSide();
            GameManager.writeGameData();
            GameManager.log(MafiaBilliardTricks.GameVars.gameData.powerBarSide);
        }
        static levelEdition() {
            GameManager.game.state.start("LevelEditionState", true, false);
        }
        static playEditedLevel() {
            GameManager.game.state.start("PoolState", true, false);
        }
        static writeGameData() {
            GameManager.setGameStorageData(MafiaBilliardTricks.GameConstants.SAVED_GAME_DATA_KEY, MafiaBilliardTricks.GameVars.gameData, function () {
                GameManager.log("game data successfully saved");
            }, function (error) {
                GameManager.log("error saving game data", error);
            });
        }
        static levelPassed(level) {
            let doWriteGameData = false;
            let nextLevelIndex = MafiaBilliardTricks.GameVars.currentLevel + 1;
            let bossIndex = -1;
            if (nextLevelIndex % 5 === 0) {
                bossIndex = (nextLevelIndex / 5) - 1;
            }
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                MafiaBilliardTricks.GameVars.gameData.bossesUnlocked[bossIndex] = 1;
                GameManager.log("boss " + bossIndex + " beaten");
                if (MafiaBilliardTricks.GameVars.gameData.levelStars[nextLevelIndex] < 1) {
                    MafiaBilliardTricks.GameVars.gameData.levelStars[nextLevelIndex] = 0;
                    GameManager.log("level " + nextLevelIndex + " now unlocked");
                }
                doWriteGameData = true;
            }
            else {
                if (bossIndex > -1) {
                    if (MafiaBilliardTricks.GameVars.gameData.bossesUnlocked[bossIndex] < 1) {
                        MafiaBilliardTricks.GameVars.gameData.bossesUnlocked[bossIndex] = 0;
                        GameManager.log("boss " + bossIndex + " now unlocked");
                    }
                    const bosslevels = this.game.cache.getJSON("boss_levels");
                    let bossLevelData = bosslevels;
                    MafiaBilliardTricks.GameVars.currentBoss = bossIndex;
                    MafiaBilliardTricks.GameVars.bossSkill = bossLevelData[bossIndex].skill;
                    MafiaBilliardTricks.GameVars.botStarts = bossLevelData[bossIndex].botStarts;
                    doWriteGameData = true;
                }
                else {
                    if (MafiaBilliardTricks.GameVars.gameData.levelStars[nextLevelIndex] < 1) {
                        MafiaBilliardTricks.GameVars.gameData.levelStars[nextLevelIndex] = 0;
                        GameManager.log("level " + nextLevelIndex + " now unlocked");
                    }
                    doWriteGameData = true;
                }
                if (MafiaBilliardTricks.GameVars.gameData.levelStars[MafiaBilliardTricks.GameVars.currentLevel] < MafiaBilliardTricks.GameVars.matchScore) {
                    MafiaBilliardTricks.GameVars.gameData.levelStars[MafiaBilliardTricks.GameVars.currentLevel] = MafiaBilliardTricks.GameVars.matchScore;
                    GameManager.log("level " + MafiaBilliardTricks.GameVars.currentLevel + " now has score of " + MafiaBilliardTricks.GameVars.matchScore + ". Used to be " + MafiaBilliardTricks.GameVars.gameData.levelStars[MafiaBilliardTricks.GameVars.currentLevel]);
                    doWriteGameData = true;
                }
            }
            if (doWriteGameData) {
                this.writeGameData();
            }
        }
        static log(text, error) {
            if (!MafiaBilliardTricks.GameConstants.VERBOSE) {
                return;
            }
            if (error) {
                console.error(text + ":", error);
            }
            else {
                console.log(text);
            }
        }
        static resetCurrentLevel() {
            MafiaBilliardTricks.GameVars.currentLevel = -1;
        }
        static outputDialogueBankToString() {
            throw "To be re-implemented fater localisation update. Uncoment to debug";
        }
        static initBilliardVars() {
            MafiaBilliardTricks.GameVars.pocketArray = [];
            let pocket = { id: 0, position: new Billiard.Vector2D(-42e3 - MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 4, -21e3 - MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 4), dropPosition: new Billiard.Vector2D(-42840 - MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 2, -21840 - MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 4) };
            MafiaBilliardTricks.GameVars.pocketArray.push(pocket);
            pocket = { id: 1, position: new Billiard.Vector2D(0, -21e3 - MafiaBilliardTricks.GameConstants.POCKET_RADIUS), dropPosition: new Billiard.Vector2D(0, -21420 - MafiaBilliardTricks.GameConstants.POCKET_RADIUS) };
            MafiaBilliardTricks.GameVars.pocketArray.push(pocket);
            pocket = { id: 2, position: new Billiard.Vector2D(42e3 + MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 4, -21e3 - MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 4), dropPosition: new Billiard.Vector2D(42840 + MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 2, -21840 - MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 4) };
            MafiaBilliardTricks.GameVars.pocketArray.push(pocket);
            pocket = { id: 3, position: new Billiard.Vector2D(42e3 + MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 4, 21e3 + MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 4), dropPosition: new Billiard.Vector2D(42840 + MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 2, 21840 + MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 4) };
            MafiaBilliardTricks.GameVars.pocketArray.push(pocket);
            pocket = { id: 4, position: new Billiard.Vector2D(0, 21e3 + MafiaBilliardTricks.GameConstants.POCKET_RADIUS), dropPosition: new Billiard.Vector2D(0, 21420 + MafiaBilliardTricks.GameConstants.POCKET_RADIUS) };
            MafiaBilliardTricks.GameVars.pocketArray.push(pocket);
            pocket = { id: 5, position: new Billiard.Vector2D(-42e3 - MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 4, 21e3 + MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 4), dropPosition: new Billiard.Vector2D(-42840 - MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 2, 21840 + MafiaBilliardTricks.GameConstants.POCKET_RADIUS / 4) };
            MafiaBilliardTricks.GameVars.pocketArray.push(pocket);
            MafiaBilliardTricks.GameVars.lineArray = [];
            MafiaBilliardTricks.GameVars.vertexArray = [];
            let line = { name: "AB", direction: null, normal: null, p1: new Billiard.Vector2D(-42e3, -24360), p2: new Billiard.Vector2D(-38640, -21e3), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            let vertex = { name: "B", position: new Billiard.Vector2D(line.p2.x, line.p2.y) };
            MafiaBilliardTricks.GameVars.vertexArray.push(vertex);
            line = { name: "BC", direction: null, normal: null, p1: new Billiard.Vector2D(-38640, -21e3), p2: new Billiard.Vector2D(-3360, -21e3), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            vertex = { name: "C", position: new Billiard.Vector2D(line.p2.x, line.p2.y) };
            MafiaBilliardTricks.GameVars.vertexArray.push(vertex);
            line = { name: "CD", direction: null, normal: null, p1: new Billiard.Vector2D(-3360, -21e3), p2: new Billiard.Vector2D(-1680, -24360), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            line = { name: "EF", direction: null, normal: null, p1: new Billiard.Vector2D(1680, -24360), p2: new Billiard.Vector2D(3360, -21e3), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            vertex = { name: "F", position: new Billiard.Vector2D(line.p2.x, line.p2.y) };
            MafiaBilliardTricks.GameVars.vertexArray.push(vertex);
            line = { name: "FG", direction: null, normal: null, p1: new Billiard.Vector2D(3360, -21e3), p2: new Billiard.Vector2D(38640, -21e3), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            vertex = { name: "G", position: new Billiard.Vector2D(line.p2.x, line.p2.y) };
            MafiaBilliardTricks.GameVars.vertexArray.push(vertex);
            line = { name: "GH", direction: null, normal: null, p1: new Billiard.Vector2D(38640, -21e3), p2: new Billiard.Vector2D(42e3, -24360), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            line = { name: "IJ", direction: null, normal: null, p1: new Billiard.Vector2D(45360, -21e3), p2: new Billiard.Vector2D(42e3, -17640), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            vertex = { name: "J", position: new Billiard.Vector2D(line.p2.x, line.p2.y) };
            MafiaBilliardTricks.GameVars.vertexArray.push(vertex);
            line = { name: "JK", direction: null, normal: null, p1: new Billiard.Vector2D(42e3, -17640), p2: new Billiard.Vector2D(42e3, 17640), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            vertex = { name: "K", position: new Billiard.Vector2D(line.p2.x, line.p2.y) };
            MafiaBilliardTricks.GameVars.vertexArray.push(vertex);
            line = { name: "KL", direction: null, normal: null, p1: new Billiard.Vector2D(42e3, 17640), p2: new Billiard.Vector2D(45360, 21e3), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            line = { name: "MN", direction: null, normal: null, p1: new Billiard.Vector2D(42e3, 24360), p2: new Billiard.Vector2D(38640, 21e3), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            vertex = { name: "N", position: new Billiard.Vector2D(line.p2.x, line.p2.y) };
            MafiaBilliardTricks.GameVars.vertexArray.push(vertex);
            line = { name: "NO", direction: null, normal: null, p1: new Billiard.Vector2D(38640, 21e3), p2: new Billiard.Vector2D(3360, 21e3), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            vertex = { name: "O", position: new Billiard.Vector2D(line.p2.x, line.p2.y) };
            MafiaBilliardTricks.GameVars.vertexArray.push(vertex);
            line = { name: "OP", direction: null, normal: null, p1: new Billiard.Vector2D(3360, 21e3), p2: new Billiard.Vector2D(1680, 24360), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            line = { name: "QR", direction: null, normal: null, p1: new Billiard.Vector2D(-1680, 24360), p2: new Billiard.Vector2D(-3360, 21e3), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            vertex = { name: "R", position: new Billiard.Vector2D(line.p2.x, line.p2.y) };
            MafiaBilliardTricks.GameVars.vertexArray.push(vertex);
            line = { name: "RS", direction: null, normal: null, p1: new Billiard.Vector2D(-3360, 21e3), p2: new Billiard.Vector2D(-38640, 21e3), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            vertex = { name: "S", position: new Billiard.Vector2D(line.p2.x, line.p2.y) };
            MafiaBilliardTricks.GameVars.vertexArray.push(vertex);
            line = { name: "ST", direction: null, normal: null, p1: new Billiard.Vector2D(-38640, 21e3), p2: new Billiard.Vector2D(-42e3, 24360), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            line = { name: "UV", direction: null, normal: null, p1: new Billiard.Vector2D(-45360, 21e3), p2: new Billiard.Vector2D(-42e3, 17640), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            vertex = { name: "V", position: new Billiard.Vector2D(line.p2.x, line.p2.y) };
            MafiaBilliardTricks.GameVars.vertexArray.push(vertex);
            line = { name: "VW", direction: null, normal: null, p1: new Billiard.Vector2D(-42e3, 17640), p2: new Billiard.Vector2D(-42e3, -17640), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            vertex = { name: "W", position: new Billiard.Vector2D(line.p2.x, line.p2.y) };
            MafiaBilliardTricks.GameVars.vertexArray.push(vertex);
            line = { name: "WX", direction: null, normal: null, p1: new Billiard.Vector2D(-42e3, -17640), p2: new Billiard.Vector2D(-45360, -21e3), p3: null, p4: null, p5: null, p6: null };
            MafiaBilliardTricks.GameVars.lineArray.push(line);
            for (let i = 0; i < MafiaBilliardTricks.GameVars.lineArray.length; i++) {
                let line = MafiaBilliardTricks.GameVars.lineArray[i];
                line.direction = new Billiard.Vector2D(line.p2.x - line.p1.x, line.p2.y - line.p1.y).normalize();
                line.normal = line.direction.getLeftNormal();
                let r = line.normal.times(MafiaBilliardTricks.GameConstants.BALL_RADIUS);
                line.p3 = line.p1.plus(r);
                line.p4 = line.p2.plus(r);
                let s = line.normal.times(.6 * MafiaBilliardTricks.GameConstants.BALL_RADIUS);
                line.p5 = line.p1.plus(s);
                line.p6 = line.p2.plus(s);
            }
        }
        static startPreLoader() {
            GameManager.game.state.start("PreLoader", true, false);
        }
        static getGameStorageData(key, successCb, failureCb) {
            let data;
            data = localStorage.getItem(key);
            successCb(data);
        }
        static setGameStorageData(key, value, successCb, failureCb) {
            localStorage.setItem(key, JSON.stringify(value));
        }
        static setStarlessLevels() {
            MafiaBilliardTricks.GameVars.starLessLevels = [];
            const levels = this.game.cache.getJSON("levels");
            let levelData = levels;
            for (let l of levelData) {
                if (l.timed || l.turnBased) {
                    if (l.timed && l.turnBased) {
                        throw new Error("Level " + l.id + " is set to both timed and turn-based");
                    }
                    if (l.timeTurnsValue === undefined) {
                        GameManager.log("No timeTurnValue set for level " + l.id);
                    }
                    if (l.turnBased && l.turnsLeftStarDivider === undefined) {
                        GameManager.log("No turnsLeftStarDivider set for level " + l.id);
                    }
                }
                else {
                    MafiaBilliardTricks.GameVars.starLessLevels.push(l.id - 1);
                }
            }
        }
    }
    MafiaBilliardTricks.GameManager = GameManager;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class GameVars {
        static areValidDomains(domains) {
            let isValid = false;
            for (let i = 0; i < domains.length; i++) {
                if (window.location.hostname.indexOf(domains[i]) !== -1) {
                    isValid = true;
                    break;
                }
            }
            return isValid;
        }
        static extractLineArrayString() {
            const lineArray = [];
            for (let i = 0; i < GameVars.lineArray.length; i++) {
                lineArray.push({
                    name: GameVars.lineArray[i].name,
                    direction: { x: GameVars.lineArray[i].direction.x, y: GameVars.lineArray[i].direction.y },
                    normal: { x: GameVars.lineArray[i].normal.x, y: GameVars.lineArray[i].normal.y },
                    p1: { x: GameVars.lineArray[i].p1.x, y: GameVars.lineArray[i].p1.y },
                    p2: { x: GameVars.lineArray[i].p2.x, y: GameVars.lineArray[i].p2.y },
                    p3: { x: GameVars.lineArray[i].p3.x, y: GameVars.lineArray[i].p3.y },
                    p4: { x: GameVars.lineArray[i].p4.x, y: GameVars.lineArray[i].p4.y },
                    p5: { x: GameVars.lineArray[i].p5.x, y: GameVars.lineArray[i].p5.y },
                    p6: { x: GameVars.lineArray[i].p6.x, y: GameVars.lineArray[i].p6.y }
                });
            }
            return JSON.stringify(lineArray);
        }
        static extractVertexArrayString() {
            const vertexArray = [];
            for (let i = 0; i < GameVars.vertexArray.length; i++) {
                vertexArray.push({
                    name: GameVars.vertexArray[i].name,
                    position: { x: GameVars.vertexArray[i].position.x, y: GameVars.vertexArray[i].position.y }
                });
            }
            return JSON.stringify(vertexArray);
        }
        static extractPocketArrayString() {
            const pocketArray = [];
            for (let i = 0; i < GameVars.pocketArray.length; i++) {
                pocketArray.push({
                    id: GameVars.pocketArray[i].id,
                    position: { x: GameVars.pocketArray[i].position.x, y: GameVars.pocketArray[i].position.y },
                    dropPosition: { x: GameVars.pocketArray[i].dropPosition.x, y: GameVars.pocketArray[i].dropPosition.y },
                });
            }
            return JSON.stringify(pocketArray);
        }
        static extractBallsArrayString() {
            const ballsArray = [];
            for (let i = 0; i < GameVars.ballArray.length; i++) {
                ballsArray.push({
                    id: GameVars.ballArray[i].id,
                    active: GameVars.ballArray[i].active,
                    position: { x: GameVars.ballArray[i].position.x, y: GameVars.ballArray[i].position.y },
                });
            }
            return JSON.stringify(ballsArray);
        }
    }
    MafiaBilliardTricks.GameVars = GameVars;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class TrueTimer {
        constructor(game) {
            this.game = game;
            this.t = 0;
            this.paused = true;
        }
        getTimeElapsed() {
            if (this.paused) {
                this.t = 0;
            }
            else {
                this.t += this.game.time.physicsElapsed;
            }
            const returnValue = Math.floor(this.t);
            this.t -= returnValue;
            return Math.floor(returnValue);
        }
        resume() {
            this.paused = false;
        }
        pause() {
            this.paused = true;
        }
        start() {
            this.resume();
        }
    }
    MafiaBilliardTricks.TrueTimer = TrueTimer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class Utils {
        static resizeTextToFit(textObj, width, height) {
            const text = textObj.text;
            const origFontSize = textObj.fontSize;
            if (textObj.wordWrap) {
                textObj.wordWrapWidth = width;
                textObj.lineSpacing = -10;
            }
            textObj.text = text;
            if (width > 0) {
                let size = origFontSize;
                while ((textObj.width > width) && Number(textObj.fontSize) > 4) {
                    textObj.fontSize = --size;
                }
            }
            if (height > 0) {
                let size = origFontSize;
                while ((textObj.height > height) && Number(textObj.fontSize) > 4) {
                    textObj.fontSize = --size;
                }
            }
            return textObj;
        }
    }
    MafiaBilliardTricks.Utils = Utils;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
window.onload = () => {
    const game = new MafiaBilliardTricks.Game();
};
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class AdHelper {
        static init() {
            window.adHelper = AdHelper;
        }
        static showAd(callback, context) {
            AdHelper.currentCallback = callback;
            AdHelper.callbackContext = context;
            console.log("SHOW AD");
            window.gdsdk.showAd().then(() => {
                var _a;
                (_a = AdHelper.currentCallback) === null || _a === void 0 ? void 0 : _a.call(AdHelper.callbackContext, true);
                AdHelper.currentCallback = null;
                AdHelper.callbackContext = null;
            });
        }
        static loadRewardedAd() {
            if (AdHelper.rewardedAdReady) {
                return;
            }
            console.log("LOADING REWARDED AD");
            window.gdsdk.preloadAd("rewarded").then(() => {
                AdHelper.rewardedAdReady = true;
            }).catch(() => {
                AdHelper.rewardedAdReady = false;
            });
        }
        static showRewardedAd(callback, context) {
            AdHelper.currentCallback = callback;
            AdHelper.callbackContext = context;
            console.log("REWARDED AD");
            if (!AdHelper.rewardedAdReady) {
                AdHelper.error();
                return;
            }
            AdHelper.rewardedAdReady = false;
            window.gdsdk.showAd("rewarded").then(() => {
                AdHelper.currentCallback.call(AdHelper.callbackContext, true);
                AdHelper.currentCallback = null;
                AdHelper.callbackContext = null;
                AdHelper.loadRewardedAd();
            }).catch(() => {
                AdHelper.currentCallback.call(AdHelper.callbackContext, false);
                AdHelper.currentCallback = null;
                AdHelper.callbackContext = null;
                AdHelper.loadRewardedAd();
            });
        }
        static error() {
            var _a;
            console.log("AD ERROR");
            (_a = AdHelper.currentCallback) === null || _a === void 0 ? void 0 : _a.call(AdHelper.callbackContext, false);
            AdHelper.currentCallback = null;
            AdHelper.callbackContext = null;
        }
        static pauseAndMuteGame() {
            console.log("PAUSE AND MUTE GAME");
            AdHelper.soundAlreadyMuted = MafiaBilliardTricks.GameVars.gameData.muted;
            MafiaBilliardTricks.AudioManager.mute();
            if (MafiaBilliardTricks.Game.currentInstance) {
                MafiaBilliardTricks.Game.currentInstance.paused = true;
            }
        }
        static resumeAndUnmuteGame() {
            if (AdHelper.currentCallback !== null) {
                AdHelper.currentCallback.call(AdHelper.callbackContext, false);
                AdHelper.currentCallback = null;
                AdHelper.callbackContext = null;
            }
            if (MafiaBilliardTricks.Game.currentInstance) {
                MafiaBilliardTricks.Game.currentInstance.paused = false;
            }
            if (!AdHelper.soundAlreadyMuted) {
                MafiaBilliardTricks.AudioManager.unmute();
            }
        }
    }
    AdHelper.rewardedAdReady = false;
    MafiaBilliardTricks.AdHelper = AdHelper;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class CharacterAndDialogue {
        constructor(charAndDialogue) {
            this.charId = charAndDialogue.charId;
            let finalUtterance = null;
            let endTime = -1;
            this.utteranceBank = this.cloneUtteranceBank(charAndDialogue.utteranceBank);
            for (let utt of this.utteranceBank) {
                let uttFinishTime = utt.startTime + utt.duration;
                if (finalUtterance === null) {
                    endTime = uttFinishTime;
                    finalUtterance = utt;
                    utt.lastUtterance = true;
                    utt.lastUtteranceEnd = endTime;
                }
                else if (endTime < uttFinishTime) {
                    endTime = uttFinishTime;
                    finalUtterance.lastUtterance = false;
                    finalUtterance.lastUtteranceEnd = -1;
                    utt.lastUtterance = true;
                    utt.lastUtteranceEnd = endTime;
                    finalUtterance = utt;
                }
            }
            this.finalUtteranceInDialogue = finalUtterance;
            if (endTime === -1 || finalUtterance === null) {
                MafiaBilliardTricks.GameManager.log("No dialogue for this character");
            }
        }
        cloneUtteranceBank(utteranceBank) {
            let output = [];
            for (let u of utteranceBank) {
                output.push(Object.assign({}, u));
            }
            return output;
        }
    }
    MafiaBilliardTricks.CharacterAndDialogue = CharacterAndDialogue;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class DialogueLayer extends Phaser.Group {
        constructor(game, parentContext, preMatch) {
            super(game, null, "dialogue-layer");
            this.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            this.parentContext = parentContext;
            this.preMatch = preMatch;
            this.initialised = false;
            this.walkOffStarted = false;
            this.mainTimer = null;
            this.totalDialogueSecondsElapsed = -1;
            this.dialogueEndTime = Number.MIN_VALUE;
            this.finalUtterance = null;
            this.transparentBackground = null;
            this.bg = null;
            this.boxResults = null;
            this.skipButton = null;
            this.dialogueDataLeft = null;
            this.dialogueDataRight = null;
            this.characterSpriteLeft = null;
            this.characterSpriteRight = null;
            this.characterCommentLeft = null;
            this.characterCommentRight = null;
            this.brushSpriteLeft = null;
            this.brushSpriteRight = null;
            this.currentLeftUtteranceEndTime = 0;
            this.currentRightUtteranceEndTime = 0;
        }
        update() {
            if (this.initialised) {
                if (this.mainTimer) {
                    const timerTimeElapsed = this.mainTimer.getTimeElapsed();
                    if (timerTimeElapsed > 0) {
                        this.onSecondPassed(timerTimeElapsed);
                    }
                }
            }
        }
        loadDialogue(dialogueId) {
            for (let d of MafiaBilliardTricks.GameVars.dialogueBank[MafiaBilliardTricks.GameVars.gameData.language]) {
                if (d.when === dialogueId) {
                    this.assignDialogueData(new MafiaBilliardTricks.CharacterAndDialogue(d.left), false);
                    this.assignDialogueData(new MafiaBilliardTricks.CharacterAndDialogue(d.right), true);
                }
            }
        }
        init() {
            if (!this.dialogueDataLeft && !this.dialogueDataRight) {
                return false;
            }
            else {
                this.createDialogueScene();
                if (this.skipButton) {
                    this.skipButton.alpha = 1;
                    this.bringToTop(this.skipButton);
                }
                if (this.dialogueDataRight) {
                    this.initCharAndDialogue(this.dialogueDataRight);
                }
                if (this.dialogueDataLeft) {
                    this.initCharAndDialogue(this.dialogueDataLeft, true);
                }
                this.mainTimer = new MafiaBilliardTricks.TrueTimer(this.game);
                this.initialised = true;
                this.mainTimer.start();
                return true;
            }
        }
        assignDialogueData(dialogueData, left) {
            if (left) {
                this.dialogueDataLeft = dialogueData;
                if (!dialogueData.finalUtteranceInDialogue) {
                    return;
                }
                this.currentLeftUtteranceEndTime = dialogueData.utteranceBank.length > 0 ? dialogueData.utteranceBank[0].startTime + dialogueData.utteranceBank[0].duration : 0;
                if (this.finalUtterance === null) {
                    this.dialogueEndTime = Math.max(this.dialogueEndTime, this.dialogueDataLeft.finalUtteranceInDialogue.lastUtteranceEnd);
                }
                else if (this.dialogueDataLeft.finalUtteranceInDialogue.lastUtteranceEnd > this.dialogueEndTime) {
                    this.dialogueEndTime = Math.max(this.dialogueEndTime, this.dialogueDataLeft.finalUtteranceInDialogue.lastUtteranceEnd);
                }
            }
            else {
                this.dialogueDataRight = dialogueData;
                if (!dialogueData.finalUtteranceInDialogue) {
                    return;
                }
                this.currentRightUtteranceEndTime = dialogueData.utteranceBank.length > 0 ? dialogueData.utteranceBank[0].startTime + dialogueData.utteranceBank[0].duration : 0;
                if (this.finalUtterance === null) {
                    this.dialogueEndTime = Math.max(this.dialogueEndTime, this.dialogueDataRight.finalUtteranceInDialogue.lastUtteranceEnd);
                }
                else if (this.dialogueDataRight.finalUtteranceInDialogue.lastUtteranceEnd > this.dialogueEndTime) {
                    this.dialogueEndTime = Math.max(this.dialogueEndTime, this.dialogueDataRight.finalUtteranceInDialogue.lastUtteranceEnd);
                }
            }
        }
        createDialogueScene() {
            this.transparentBackground = new Phaser.Image(this.game, 0, 0, this.game.cache.getBitmapData(MafiaBilliardTricks.GameConstants.BLUE_SQUARE));
            this.transparentBackground.scale.set(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 64 / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 64 / MafiaBilliardTricks.GameVars.correctionScale);
            this.transparentBackground.alpha = this.preMatch ? .4 : 0;
            this.transparentBackground.inputEnabled = true;
            this.transparentBackground.events.onInputDown.add(this.skipUtterance, this);
            this.add(this.transparentBackground);
            this.skipButton = new MafiaBilliardTricks.TButton(this.game, (MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2) / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale, 50 + 60 / MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language].SKIP, "emptybtns/empty_btn_skip_off.png", "emptybtns/empty_btn_skip_off.png", "left", 65, () => { }, this);
            this.skipButton.alpha = 0;
            this.skipButton.events.onInputDown.add(this.onUpSkipButton, this);
            this.bringToTop(this.skipButton);
            this.add(this.skipButton);
            if (!this.preMatch) {
                this.bg = new Phaser.Image(this.game, 0, 0, "texture_atlas_3", "bg_1.png");
                this.bg.anchor.set(0.5, 0.5);
                this.bg.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale;
                this.bg.y = MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 / MafiaBilliardTricks.GameVars.correctionScale;
                this.bg.scale.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / this.bg.width;
                this.bg.scale.y = MafiaBilliardTricks.GameConstants.GAME_HEIGHT / this.bg.height;
                this.add(this.bg);
            }
            else {
                let boxX = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale;
                let boxY = (MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 + 19) / MafiaBilliardTricks.GameVars.correctionScale;
                let boxWidth = MafiaBilliardTricks.GameConstants.GAME_WIDTH * .9;
                let boxHeight = 520 / MafiaBilliardTricks.GameVars.correctionScale;
                this.boxResults = MafiaBilliardTricks.EndMatchMessageBox.showBoxResults(this.game, boxX, boxY, boxWidth, boxHeight);
                this.skipButton.x = boxX + (boxWidth / 2) - 30 - (this.skipButton.width / 2);
                this.skipButton.y = boxY - (boxHeight / 2) - (this.skipButton.height / 2);
                this.add(this.boxResults);
            }
        }
        initCharAndDialogue(charAndDialogue, left) {
            const charScale = 1;
            let sprite = left ? this.characterSpriteLeft : this.characterSpriteRight;
            sprite = new Phaser.Image(this.game, (MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 + (left ? -212 : 212)) / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale, (MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 + 283) / MafiaBilliardTricks.GameVars.correctionScale, "texture_atlas_4", "character_" + charAndDialogue.charId + ".png");
            sprite.scale.x = charScale / MafiaBilliardTricks.GameVars.correctionScale;
            sprite.scale.y = charScale / MafiaBilliardTricks.GameVars.correctionScale;
            if (left) {
                sprite.scale.x *= -1;
            }
            sprite.anchor.set(0.5, 1.0);
            this.add(sprite);
            if (left) {
                this.characterSpriteLeft = sprite;
            }
            else {
                this.characterSpriteRight = sprite;
            }
            this.brushSpriteLeft = new Phaser.Sprite(this.game, 250 / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale, (MafiaBilliardTricks.GameConstants.GAME_HEIGHT - (this.preMatch ? 100 : 150)) / MafiaBilliardTricks.GameVars.correctionScale, "texture_atlas_1");
            this.brushSpriteLeft.frameName = "brush_0.png";
            this.brushSpriteLeft.animations.add("swipein", ["brush_0.png", "brush_1.png", "brush_2.png", "brush_3.png", "brush_4.png"]);
            this.brushSpriteLeft.animations.add("swipeout", ["brush_4.png", "brush_3.png", "brush_2.png", "brush_1.png", "brush_0.png"]);
            this.brushSpriteLeft.anchor.set(0.5);
            this.brushSpriteLeft.visible = false;
            this.add(this.brushSpriteLeft);
            this.brushSpriteRight = new Phaser.Sprite(this.game, (MafiaBilliardTricks.GameConstants.GAME_WIDTH - 250) / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale, (MafiaBilliardTricks.GameConstants.GAME_HEIGHT - (this.preMatch ? 100 : 150)) / MafiaBilliardTricks.GameVars.correctionScale, "texture_atlas_1");
            this.brushSpriteRight.scale.x *= -1;
            this.brushSpriteRight.frameName = "brush_0.png";
            this.brushSpriteRight.animations.add("swipein", ["brush_0.png", "brush_1.png", "brush_2.png", "brush_3.png", "brush_4.png"]);
            this.brushSpriteRight.animations.add("swipeout", ["brush_4.png", "brush_3.png", "brush_2.png", "brush_1.png", "brush_0.png"]);
            this.brushSpriteRight.anchor.set(0.5);
            this.brushSpriteRight.visible = false;
            this.add(this.brushSpriteRight);
            this.characterCommentLeft = new Phaser.Text(this.game, this.brushSpriteLeft.x + 25, this.brushSpriteLeft.y, "", { font: "26px american-typewriter-condensed-bold", fill: "#FFFFFF", align: "center" });
            this.characterCommentLeft.anchor.set(0.5);
            this.characterCommentLeft.alpha = 0;
            this.characterCommentLeft.wordWrap = true;
            this.add(this.characterCommentLeft);
            this.characterCommentRight = new Phaser.Text(this.game, this.brushSpriteRight.x - 25, this.brushSpriteRight.y, "", { font: "26px american-typewriter-condensed-bold", fill: "#FFFFFF", align: "center" });
            this.characterCommentRight.anchor.set(0.5);
            this.characterCommentRight.alpha = 0;
            this.characterCommentRight.wordWrap = true;
            this.add(this.characterCommentRight);
            if (!this.brushSpriteLeft) {
                throw this.brushSpriteLeft;
            }
            if (!this.brushSpriteRight) {
                throw this.brushSpriteRight;
            }
            if (!this.characterCommentLeft) {
                throw this.characterCommentLeft;
            }
            if (!this.characterCommentRight) {
                throw this.characterCommentRight;
            }
        }
        onUpSkipButton() {
            this.hideDialogueLayer();
            MafiaBilliardTricks.GameManager.setIntroSeen(true);
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
        }
        hideDialogueLayer() {
            this.game.add.tween(this)
                .to({ alpha: 0 }, 700, Phaser.Easing.Cubic.Out, true, 0)
                .onComplete.add(function () {
                if (this.parentContext) {
                    this.parentContext.hideDialogueLayer();
                }
            }, this);
        }
        onSecondPassed(timerTimeElapsed) {
            this.totalDialogueSecondsElapsed += timerTimeElapsed;
            if (this.totalDialogueSecondsElapsed > this.dialogueEndTime) {
                this.hideDialogueLayer();
            }
            else {
                this.prepareUtterance(true);
                this.prepareUtterance(false);
            }
        }
        prepareUtterance(left) {
            const timeToAllowForSentenceEndAnimation = 1;
            let dialogueData = left ? this.dialogueDataLeft : this.dialogueDataRight;
            let brushSprite = left ? this.brushSpriteLeft : this.brushSpriteRight;
            let charComment = left ? this.characterCommentLeft : this.characterCommentRight;
            if (dialogueData.utteranceBank.length > 0) {
                if (dialogueData.utteranceBank[0].startTime <= this.totalDialogueSecondsElapsed) {
                    const firstUtterance = (dialogueData.utteranceBank[0].startTime === 0);
                    if (left) {
                        this.currentLeftUtteranceEndTime = dialogueData.utteranceBank[0].startTime + dialogueData.utteranceBank[0].duration;
                    }
                    else {
                        this.currentRightUtteranceEndTime = dialogueData.utteranceBank[0].startTime + dialogueData.utteranceBank[0].duration;
                    }
                    this.displayUtterance(dialogueData.utteranceBank[0].text, left);
                    dialogueData.utteranceBank.splice(0, 1);
                    if (firstUtterance) {
                        return;
                    }
                }
            }
            if ((left ? this.currentLeftUtteranceEndTime : this.currentRightUtteranceEndTime) - timeToAllowForSentenceEndAnimation <= this.totalDialogueSecondsElapsed) {
                if (left && !this.walkOffStarted) {
                    if (dialogueData.utteranceBank[0] !== undefined) {
                        if (dialogueData.utteranceBank[0].text === "       ...       ") {
                            this.walkOffStarted = true;
                            this.characterSpriteLeft.scale.x *= -1;
                            let tween = this.game.tweens.create(this.characterSpriteLeft);
                            tween.to({ x: this.characterSpriteLeft.x - MafiaBilliardTricks.GameConstants.GAME_WIDTH }, 15000, Phaser.Easing.Cubic.Out, true);
                            tween.start();
                        }
                    }
                }
                brushSprite.play("swipeout", 26, false).onComplete.add(function () {
                    charComment.visible = false;
                    brushSprite.visible = false;
                }, this);
                this.game.add.tween(charComment)
                    .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true, 0);
            }
        }
        skipUtterance() {
            let left = Number.MAX_VALUE;
            if (this.dialogueDataLeft && this.dialogueDataLeft.utteranceBank.length > 0) {
                left = this.dialogueDataLeft.utteranceBank[0].startTime;
            }
            let right = Number.MAX_VALUE;
            if (this.dialogueDataRight && this.dialogueDataRight.utteranceBank.length > 0) {
                right = this.dialogueDataRight.utteranceBank[0].startTime;
            }
            const nearestUtteranceExpirationTime = Math.min(left, right);
            this.totalDialogueSecondsElapsed = nearestUtteranceExpirationTime - 0.01;
        }
        displayUtterance(text, left) {
            if (left && this.walkOffStarted) {
                return;
            }
            let brushSprite = left ? this.brushSpriteLeft : this.brushSpriteRight;
            let charCommentLabel = left ? this.characterCommentLeft : this.characterCommentRight;
            brushSprite.visible = true;
            charCommentLabel.visible = true;
            charCommentLabel.text = text;
            charCommentLabel = MafiaBilliardTricks.Utils.resizeTextToFit(charCommentLabel, this.brushSpriteLeft.width * .7, this.brushSpriteLeft.height * .8);
            brushSprite.play("swipein", 26, false)
                .onComplete.add(function () {
                this.game.add.tween(charCommentLabel)
                    .to({ alpha: 1 }, 250, Phaser.Easing.Cubic.Out, true, 0);
            }, this);
        }
    }
    MafiaBilliardTricks.DialogueLayer = DialogueLayer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class Utterance {
    }
    MafiaBilliardTricks.Utterance = Utterance;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class Boot extends Phaser.State {
        static onBlur() {
            MafiaBilliardTricks.Game.currentInstance.paused = true;
        }
        static onFocus() {
            MafiaBilliardTricks.Game.currentInstance.paused = false;
        }
        static onFullScreenChange() {
            Boot.setScaleFactor(screen.width / screen.height);
            MafiaBilliardTricks.Game.currentInstance.scale.refresh();
        }
        static onOrientationChange() {
            if (!Boot.currentInstance) {
                return;
            }
            Boot.currentInstance.game.time.events.add(200, function () {
                if (Boot.bootedInWrongOrientation && window.innerHeight < window.innerWidth) {
                    Boot.currentInstance.game.state.restart(true, false);
                }
            }, this);
        }
        static enterIncorrectOrientation() {
            document.getElementById("orientation").style.display = "block";
            document.getElementById("content").style.display = "none";
            MafiaBilliardTricks.Game.currentInstance.paused = true;
        }
        static leaveIncorrectOrientation() {
            document.getElementById("orientation").style.display = "none";
            document.getElementById("content").style.display = "block";
            MafiaBilliardTricks.Game.currentInstance.paused = false;
        }
        static setScaleFactor(aspectRatioOverride) {
            let aspectRatio = aspectRatioOverride || window.innerWidth / window.innerHeight;
            MafiaBilliardTricks.GameVars.scaleX = (MafiaBilliardTricks.GameConstants.GAME_WIDTH / MafiaBilliardTricks.GameConstants.GAME_HEIGHT) / aspectRatio;
            if (aspectRatio <= 1.35) {
                MafiaBilliardTricks.GameVars.correctionScale = .75;
            }
            else if (aspectRatio <= 1.55) {
                MafiaBilliardTricks.GameVars.correctionScale = .8;
            }
            else if (aspectRatio <= 1.65) {
                MafiaBilliardTricks.GameVars.correctionScale = .9;
            }
            else {
                MafiaBilliardTricks.GameVars.correctionScale = 1;
            }
        }
        init() {
            MafiaBilliardTricks.AdHelper.init();
            this.game.load.crossOrigin = "Anonymous";
            Boot.currentInstance = this;
            this.input.maxPointers = 1;
            this.game.stage.backgroundColor = "#000000";
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.pageAlignHorizontally = true;
            if (this.game.device.desktop) {
                this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                MafiaBilliardTricks.GameVars.scaleX = 1;
                MafiaBilliardTricks.GameVars.correctionScale = 1;
                this.game.scale.pageAlignHorizontally = true;
            }
            else {
                this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
                if (this.game.scale.compatibility.supportsFullScreen) {
                    this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;
                    this.game.scale.onFullScreenChange.add(Boot.onFullScreenChange, this);
                }
                else {
                    console.log("Device does not support fullscreen");
                }
                Boot.setScaleFactor();
                this.game.scale.pageAlignVertically = true;
                this.game.scale.forceOrientation(true, false);
                window.onresize = Boot.onOrientationChange;
                window.onorientationchange = Boot.onOrientationChange;
                this.game.scale.onOrientationChange.add(Boot.onOrientationChange, this);
                this.game.scale.enterIncorrectOrientation.add(Boot.enterIncorrectOrientation, Boot);
                this.game.scale.leaveIncorrectOrientation.add(Boot.leaveIncorrectOrientation, Boot);
                Boot.bootedInWrongOrientation = window.innerHeight > window.innerWidth ? true : false;
            }
            this.game.onBlur.add(Boot.onBlur, this);
            this.game.onFocus.add(Boot.onFocus, this);
            if (MafiaBilliardTricks.GameConstants.DEVELOPMENT) {
                this.game.time.advancedTiming = true;
            }
        }
        preload() {
            this.load.path = MafiaBilliardTricks.GameConstants.ASSETS_PATH;
            this.load.image("bar", "/bar.png");
        }
        create() {
            if (!this.game.device.desktop && Boot.bootedInWrongOrientation) {
                return;
            }
            MafiaBilliardTricks.GameManager.init(this.game);
        }
        shutdown() {
            Boot.currentInstance = null;
            super.shutdown();
        }
    }
    MafiaBilliardTricks.Boot = Boot;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class CreditsState extends Phaser.State {
        init() {
            CreditsState.currentInstance = this;
        }
        create() {
            const background = this.add.sprite(0, 0, this.game.cache.getBitmapData(MafiaBilliardTricks.GameConstants.DARK_BROWN_SQUARE));
            background.scale.set(MafiaBilliardTricks.GameConstants.GAME_WIDTH / MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            const upperBar = this.add.image(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, 0, "bar");
            upperBar.anchor.x = .5;
            upperBar.scale.x = -1;
            const lowerBar = this.add.image(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, MafiaBilliardTricks.GameConstants.GAME_HEIGHT, "bar");
            lowerBar.anchor.x = .5;
            lowerBar.scale.x = -1;
            lowerBar.angle = 180;
            const scaledItemsContainer = this.add.group();
            scaledItemsContainer.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2;
            scaledItemsContainer.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            const ravalmaticLabel = new Phaser.Text(this.game, -30, 150, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["CREDITS_TITLE"], { font: "80px american-typewriter-condensed-bold", fill: "#FFFFFF" });
            scaledItemsContainer.add(MafiaBilliardTricks.Utils.resizeTextToFit(ravalmaticLabel, MafiaBilliardTricks.GameConstants.GAME_WIDTH * .7));
            ravalmaticLabel.anchor.set(.5);
            const leadProgrammer = new Phaser.Text(this.game, -355, 400, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["LEAD_PROGRAMMER"] + " Enriqueto", { font: "40px american-typewriter-regular", fill: "#FFFFFF" });
            scaledItemsContainer.add(MafiaBilliardTricks.Utils.resizeTextToFit(leadProgrammer, 600 * (1 / MafiaBilliardTricks.GameVars.scaleX)));
            const artLabel = new Phaser.Text(this.game, -400, 250, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["LEAD_DESIGNER"] + " Javi Sanz", { font: leadProgrammer.fontSize.toString() + "px american-typewriter-regular", fill: "#FFFFFF" });
            scaledItemsContainer.add(artLabel);
            const designLabel = new Phaser.Text(this.game, -385, 300, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["DESIGNER"] + " Ania Becerra", { font: leadProgrammer.fontSize.toString() + "px american-typewriter-regular", fill: "#FFFFFF" });
            scaledItemsContainer.add(designLabel);
            const codeLabel = new Phaser.Text(this.game, -370, 350, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["PROGRAMMER"] + " Pieter du Toit", { font: leadProgrammer.fontSize.toString() + "px american-typewriter-regular", fill: "#FFFFFF" });
            scaledItemsContainer.add(codeLabel);
            const player = this.add.image(MafiaBilliardTricks.GameConstants.GAME_WIDTH, MafiaBilliardTricks.GameConstants.GAME_HEIGHT, "texture_atlas_4", "character_player.png");
            player.anchor.set(.8, 1);
            player.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            const homeButton = this.add.button(5 * MafiaBilliardTricks.GameVars.scaleX, 535, "texture_atlas_1", this.onClickHome, this);
            homeButton.setFrames("btn_home_on.png", "btn_home_off.png", "btn_home_on.png");
            homeButton.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            this.game.camera.flash(0x2f1a20, 300);
        }
        shutdown() {
            CreditsState.currentInstance = null;
            super.shutdown();
        }
        onClickHome() {
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
            MafiaBilliardTricks.GameVars.justLeftCreditsPage = true;
            MafiaBilliardTricks.GameManager.returnToHomeFromSubMenuState();
        }
    }
    MafiaBilliardTricks.CreditsState = CreditsState;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class LanguageState extends Phaser.State {
        init() {
            LanguageState.currentInstance = this;
        }
        create() {
            const background = this.add.sprite(0, 0, this.game.cache.getBitmapData(MafiaBilliardTricks.GameConstants.DARK_BROWN_SQUARE));
            background.scale.set(MafiaBilliardTricks.GameConstants.GAME_WIDTH / MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            const upperBar = this.add.image(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, 0, "bar");
            upperBar.anchor.x = .5;
            const lowerBar = this.add.image(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, MafiaBilliardTricks.GameConstants.GAME_HEIGHT, "bar");
            lowerBar.anchor.x = .5;
            lowerBar.angle = 180;
            const note = this.add.image(MafiaBilliardTricks.GameConstants.GAME_WIDTH * .5, MafiaBilliardTricks.GameConstants.GAME_HEIGHT * .5, "texture_atlas_2", "note.png");
            note.anchor.set(.5, .5);
            note.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            const scaledItemsContainer = this.add.group();
            scaledItemsContainer.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH * .55;
            scaledItemsContainer.y = MafiaBilliardTricks.GameConstants.GAME_HEIGHT * .5;
            scaledItemsContainer.scale.x = MafiaBilliardTricks.GameVars.scaleX * 0.8;
            scaledItemsContainer.scale.y = 0.8;
            this.buttonEn = new Phaser.Button(this.game, 0, -240, "texture_atlas_2", this.onLanguageSelected, this);
            this.buttonEn.name = MafiaBilliardTricks.GameConstants.ENGLISH;
            this.buttonEn.setFrames("btn_en_on.png", "btn_en_off.png", "btn_en_on.png");
            this.buttonEn.anchor.set(.5);
            scaledItemsContainer.add(this.buttonEn);
            this.buttonFr = new Phaser.Button(this.game, 0, this.buttonEn.y + 95, "texture_atlas_2", this.onLanguageSelected, this);
            this.buttonFr.name = MafiaBilliardTricks.GameConstants.FRENCH;
            this.buttonFr.setFrames("btn_fr_on.png", "btn_fr_off.png", "btn_fr_on.png");
            this.buttonFr.anchor.set(.5);
            scaledItemsContainer.add(this.buttonFr);
            this.buttonDe = new Phaser.Button(this.game, 0, this.buttonFr.y + 95, "texture_atlas_2", this.onLanguageSelected, this);
            this.buttonDe.name = MafiaBilliardTricks.GameConstants.GERMAN;
            this.buttonDe.setFrames("btn_de_on.png", "btn_de_off.png", "btn_de_on.png");
            this.buttonDe.anchor.set(.5);
            scaledItemsContainer.add(this.buttonDe);
            this.buttonEs = new Phaser.Button(this.game, 0, this.buttonDe.y + 95, "texture_atlas_2", this.onLanguageSelected, this);
            this.buttonEs.name = MafiaBilliardTricks.GameConstants.SPANISH;
            this.buttonEs.setFrames("btn_es_on.png", "btn_es_off.png", "btn_es_on.png");
            this.buttonEs.anchor.set(.5);
            scaledItemsContainer.add(this.buttonEs);
            this.buttonPt = new Phaser.Button(this.game, 0, this.buttonEs.y + 95, "texture_atlas_2", this.onLanguageSelected, this);
            this.buttonPt.name = MafiaBilliardTricks.GameConstants.PORTUGUESE;
            this.buttonPt.setFrames("btn_pt_on.png", "btn_pt_off.png", "btn_pt_on.png");
            this.buttonPt.anchor.set(.5);
            scaledItemsContainer.add(this.buttonPt);
            this.buttonCa = new Phaser.Button(this.game, 0, this.buttonPt.y + 95, "texture_atlas_2", this.onLanguageSelected, this);
            this.buttonCa.name = MafiaBilliardTricks.GameConstants.CATALAN;
            this.buttonCa.setFrames("btn_ca_on.png", "btn_ca_off.png", "btn_ca_on.png");
            this.buttonCa.anchor.set(.5);
            scaledItemsContainer.add(this.buttonCa);
            const labelEn = new Phaser.Text(this.game, -this.buttonEn.width * .6, this.buttonEn.y, "English", { font: "30px american-typewriter-regular", fill: "#4C3528" });
            labelEn.anchor.set(1, 0.5);
            scaledItemsContainer.add(labelEn);
            const labelFr = new Phaser.Text(this.game, -this.buttonFr.width * .6, this.buttonFr.y, "Française", { font: "30px american-typewriter-regular", fill: "#4C3528" });
            labelFr.anchor.set(1, 0.5);
            scaledItemsContainer.add(labelFr);
            const labelDe = new Phaser.Text(this.game, -this.buttonDe.width * .6, this.buttonDe.y, "Deutsch", { font: "30px american-typewriter-regular", fill: "#4C3528" });
            labelDe.anchor.set(1, 0.5);
            scaledItemsContainer.add(labelDe);
            const labelEs = new Phaser.Text(this.game, -this.buttonEs.width * .6, this.buttonEs.y, "Español", { font: "30px american-typewriter-regular", fill: "#4C3528" });
            labelEs.anchor.set(1, 0.5);
            scaledItemsContainer.add(labelEs);
            const labelPt = new Phaser.Text(this.game, -this.buttonPt.width * .6, this.buttonPt.y, "Português", { font: "30px american-typewriter-regular", fill: "#4C3528" });
            labelPt.anchor.set(1, 0.5);
            scaledItemsContainer.add(labelPt);
            const labelCa = new Phaser.Text(this.game, -this.buttonPt.width * .6, this.buttonCa.y, "Català", { font: "30px american-typewriter-regular", fill: "#4C3528" });
            labelCa.anchor.set(1, 0.5);
            scaledItemsContainer.add(labelCa);
            this.checkMark = new Phaser.Image(this.game, this.buttonEn.width * .5, 0, "texture_atlas_1", "correct.png");
            this.checkMark.anchor.set(0, 0.5);
            scaledItemsContainer.add(this.checkMark);
            const aboutButton = new Phaser.Button(this.game, 10, (MafiaBilliardTricks.GameConstants.GAME_HEIGHT - 10), "texture_atlas_1", this.onClickBack, this);
            aboutButton.setFrames("btn_back_on.png", "btn_back_off.png", "btn_back_on.png");
            aboutButton.anchor.y = 1;
            aboutButton.scale.set(MafiaBilliardTricks.GameVars.scaleX, 1);
            aboutButton.bringToTop();
            this.add.existing(aboutButton);
            this.refreshButtons();
            this.game.camera.flash(0x2f1a20, 300);
        }
        shutdown() {
            MafiaBilliardTricks.CreditsState.currentInstance = null;
            super.shutdown();
        }
        onLanguageSelected(b) {
            MafiaBilliardTricks.GameManager.setLanguage(b.name);
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
            this.refreshButtons();
        }
        refreshButtons() {
            switch (MafiaBilliardTricks.GameVars.gameData.language) {
                case MafiaBilliardTricks.GameConstants.ENGLISH:
                    this.checkMark.y = this.buttonEn.y;
                    break;
                case MafiaBilliardTricks.GameConstants.FRENCH:
                    this.checkMark.y = this.buttonFr.y;
                    break;
                case MafiaBilliardTricks.GameConstants.GERMAN:
                    this.checkMark.y = this.buttonDe.y;
                    break;
                case MafiaBilliardTricks.GameConstants.SPANISH:
                    this.checkMark.y = this.buttonEs.y;
                    break;
                case MafiaBilliardTricks.GameConstants.PORTUGUESE:
                    this.checkMark.y = this.buttonPt.y;
                    break;
                case MafiaBilliardTricks.GameConstants.CATALAN:
                    this.checkMark.y = this.buttonCa.y;
                    break;
                default: break;
            }
            this.game.add.tween(this.checkMark.scale)
                .from({ y: 0 }, 500, Phaser.Easing.Elastic.Out, true);
            this.buttonEn.alpha = MafiaBilliardTricks.GameVars.gameData.language === MafiaBilliardTricks.GameConstants.ENGLISH ? .5 : 1;
            this.buttonFr.alpha = MafiaBilliardTricks.GameVars.gameData.language === MafiaBilliardTricks.GameConstants.FRENCH ? .5 : 1;
            this.buttonDe.alpha = MafiaBilliardTricks.GameVars.gameData.language === MafiaBilliardTricks.GameConstants.GERMAN ? .5 : 1;
            this.buttonEs.alpha = MafiaBilliardTricks.GameVars.gameData.language === MafiaBilliardTricks.GameConstants.SPANISH ? .5 : 1;
            this.buttonPt.alpha = MafiaBilliardTricks.GameVars.gameData.language === MafiaBilliardTricks.GameConstants.PORTUGUESE ? .5 : 1;
            this.buttonCa.alpha = MafiaBilliardTricks.GameVars.gameData.language === MafiaBilliardTricks.GameConstants.CATALAN ? .5 : 1;
            this.buttonEn.inputEnabled = MafiaBilliardTricks.GameVars.gameData.language !== MafiaBilliardTricks.GameConstants.ENGLISH;
            this.buttonFr.inputEnabled = MafiaBilliardTricks.GameVars.gameData.language !== MafiaBilliardTricks.GameConstants.FRENCH;
            this.buttonDe.inputEnabled = MafiaBilliardTricks.GameVars.gameData.language !== MafiaBilliardTricks.GameConstants.GERMAN;
            this.buttonEs.inputEnabled = MafiaBilliardTricks.GameVars.gameData.language !== MafiaBilliardTricks.GameConstants.SPANISH;
            this.buttonPt.inputEnabled = MafiaBilliardTricks.GameVars.gameData.language !== MafiaBilliardTricks.GameConstants.PORTUGUESE;
            this.buttonCa.inputEnabled = MafiaBilliardTricks.GameVars.gameData.language !== MafiaBilliardTricks.GameConstants.CATALAN;
            this.buttonEn.input.useHandCursor = MafiaBilliardTricks.GameVars.gameData.language !== MafiaBilliardTricks.GameConstants.ENGLISH;
            this.buttonFr.input.useHandCursor = MafiaBilliardTricks.GameVars.gameData.language !== MafiaBilliardTricks.GameConstants.FRENCH;
            this.buttonDe.input.useHandCursor = MafiaBilliardTricks.GameVars.gameData.language !== MafiaBilliardTricks.GameConstants.GERMAN;
            this.buttonEs.input.useHandCursor = MafiaBilliardTricks.GameVars.gameData.language !== MafiaBilliardTricks.GameConstants.SPANISH;
            this.buttonPt.input.useHandCursor = MafiaBilliardTricks.GameVars.gameData.language !== MafiaBilliardTricks.GameConstants.PORTUGUESE;
            this.buttonCa.input.useHandCursor = MafiaBilliardTricks.GameVars.gameData.language !== MafiaBilliardTricks.GameConstants.CATALAN;
        }
        onClickBack() {
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
            MafiaBilliardTricks.GameVars.justLeftCreditsPage = true;
            MafiaBilliardTricks.GameManager.returnToHomeFromSubMenuState();
        }
    }
    MafiaBilliardTricks.LanguageState = LanguageState;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class DevLevelSelectionState extends Phaser.State {
        static showBossSelectionButtons(game) {
            let xBuffer = 8;
            let yBuffer = 56;
            let columnCount = 4;
            let tableRatio = 21 / 42;
            let tableWidth = (game.width - ((columnCount * xBuffer) + xBuffer)) / columnCount;
            let tableHeight = tableWidth * tableRatio;
            const bosslevels = game.cache.getJSON("boss_levels");
            let bossLevelData = bosslevels;
            DevLevelSelectionState.bossSelectionButtons = [];
            let columnCounter = 0;
            let xPos = (tableWidth / 2);
            let yPos = 0;
            for (var i = 0; i < bossLevelData.length; i++) {
                if (columnCounter > (columnCount - 1)) {
                    yPos += tableHeight + yBuffer;
                    xPos = (tableWidth / 2);
                    columnCounter = 0;
                }
                columnCounter++;
                let lsb = new MafiaBilliardTricks.LevelSelectionButton(game, i, tableWidth, tableHeight, true, null);
                lsb.x = xPos + xBuffer;
                lsb.y = yPos + yBuffer;
                game.add.existing(lsb);
                DevLevelSelectionState.bossSelectionButtons.push(lsb);
                xPos += tableWidth + xBuffer;
            }
        }
        static showTableSelectionButtons(game) {
            let xBuffer = 8;
            let yBuffer = 56;
            let columnCount = 8;
            let tableRatio = 21 / 42;
            let tableWidth = (game.width - ((columnCount * xBuffer) + xBuffer)) / columnCount;
            let tableHeight = tableWidth * tableRatio;
            const levels = game.cache.getJSON("levels");
            let levelData = levels;
            DevLevelSelectionState.tableSelectionButtons = [];
            let columnCounter = 0;
            let xPos = (tableWidth / 2);
            let yPos = 0;
            const rowCount = 5;
            let rowCounter = 1;
            for (let i = rowCounter;; i += rowCount) {
                if (i >= levelData.length + rowCount) {
                    break;
                }
                if (columnCounter > (columnCount - 1)) {
                    yPos += tableHeight + yBuffer;
                    xPos = (tableWidth / 2);
                    columnCounter = 0;
                    i = ++rowCounter;
                }
                columnCounter++;
                let lsb = new MafiaBilliardTricks.LevelSelectionButton(game, i, tableWidth, tableHeight, false, levelData[i - 1]);
                lsb.x = xPos + xBuffer;
                lsb.y = yPos + yBuffer;
                if (i % 5 === 0) {
                    if ((i / 5) % 2 !== 0) {
                        lsb.button.tint = 0x888888;
                    }
                }
                else if (Math.floor(i / 5) % 2 === 0) {
                    lsb.button.tint = 0x888888;
                }
                game.add.existing(lsb);
                DevLevelSelectionState.tableSelectionButtons.push(lsb);
                xPos += tableWidth + xBuffer;
            }
        }
        init() {
            DevLevelSelectionState.currentInstance = this;
            this.showBossPage = false;
            this.game.load.json("levels", "\assets\config\levels.json");
            this.game.load.json("boss_levels", "\assets\config\boss_levels.json");
        }
        create() {
            const tmpBackround = this.add.image(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2, "texture_atlas_2", "background.png");
            tmpBackround.anchor.set(.5);
            tmpBackround.scale.set(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 1019 / MafiaBilliardTricks.GameVars.scaleX, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 604);
            DevLevelSelectionState.showTableSelectionButtons(this.game);
            const buttonPageChange = new Phaser.Button(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, MafiaBilliardTricks.GameConstants.GAME_HEIGHT, "texture_atlas_0", this.onClickBossesButton);
            buttonPageChange.anchor.set(0.5, 1.0);
            buttonPageChange.setFrames("button_pageChange_on.png", "button_pageChange_off.png", "button_pageChange_on.png", "button_pageChange_off.png");
            this.add.existing(buttonPageChange);
            this.buttonPageChange = buttonPageChange;
        }
        shutdown() {
            DevLevelSelectionState.currentInstance = null;
            super.shutdown();
        }
        onClickBossesButton() {
            if (!this.showBossPage) {
                for (let i = 0; i < DevLevelSelectionState.tableSelectionButtons.length; i++) {
                    DevLevelSelectionState.tableSelectionButtons[i].destroy();
                }
                DevLevelSelectionState.showBossSelectionButtons(this.game);
                this.showBossPage = true;
            }
            else {
                for (let i = 0; i < DevLevelSelectionState.bossSelectionButtons.length; i++) {
                    DevLevelSelectionState.bossSelectionButtons[i].destroy();
                }
                DevLevelSelectionState.showTableSelectionButtons(this.game);
                this.showBossPage = false;
            }
        }
    }
    MafiaBilliardTricks.DevLevelSelectionState = DevLevelSelectionState;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class LevelSelectionButton extends Phaser.Group {
        constructor(game, index, tableWidth, tableHeight, boss, levelData) {
            super(game, null, "dev-level-button" + index, false);
            this.button = new Phaser.Button(this.game, 0, 0, "texture_atlas_0", boss ? this.onClickBossButton : this.onClickButton);
            this.button.setFrames("button_level_selection_on.png", "button_level_selection_off.png", "button_level_selection_on.png", "button_level_selection_off.png");
            this.button.anchor.set(.5);
            this.button.name = index.toString();
            this.add(this.button);
            const levelLabel = new Phaser.Text(this.game, 0, 0, index.toString(), { font: "20px american-typewriter-regular", fill: "#FF0000" });
            levelLabel.anchor.set(.5, .4);
            this.add(levelLabel);
            this.tableWidth = tableWidth;
            this.tableHeight = tableHeight;
            if (levelData) {
                this.loadTable(tableWidth, tableHeight);
                this.loadBalls(levelData.ballData);
                if (levelData.timed) {
                    const textIsTimed = new Phaser.Text(this.game, this.button.width * 1.3, 15, "Timed", { font: "12px Arial", fill: "#FF5555" });
                    textIsTimed.anchor.x = 1.0;
                    this.add(textIsTimed);
                    const textTime = new Phaser.Text(this.game, textIsTimed.x, textIsTimed.y - 20, levelData.timeTurnsValue.toString(), { font: "18px Arial", fill: "#FF5555" });
                    textTime.anchor.x = 1.0;
                    this.add(textTime);
                }
                else if (levelData.turnBased) {
                    const textDiv = new Phaser.Text(this.game, -this.button.width * 1.3, -22, levelData.turnsLeftStarDivider ? levelData.turnsLeftStarDivider.toString() : "0", { font: "18px Arial", fill: "#FF55FF" });
                    this.add(textDiv);
                    const textHasTurns = new Phaser.Text(this.game, -this.button.width * 1.3, 15, "Turns", { font: "12px Arial", fill: "#55FF55" });
                    this.add(textHasTurns);
                    const textTurns = new Phaser.Text(this.game, textHasTurns.x, textHasTurns.y - 20, levelData.timeTurnsValue.toString(), { font: "18px Arial", fill: "#55FF55" });
                    this.add(textTurns);
                }
                if (true) {
                    let ballFeatures = "";
                    if (levelData.invisibleBalls) {
                        if (levelData.invisibleBalls.length > 0) {
                            ballFeatures += "i";
                        }
                    }
                    if (levelData.lossOnColourSunk) {
                        if (levelData.lossOnColourSunk.length > 0) {
                            ballFeatures += (ballFeatures.length > 0 ? "," : "") + "-s";
                        }
                    }
                    if (levelData.lossOnColourTouch) {
                        if (levelData.lossOnColourTouch.length > 0) {
                            ballFeatures += (ballFeatures.length > 0 ? "," : "") + "-t";
                        }
                    }
                    if (levelData.winOnColourSunk) {
                        if (levelData.winOnColourSunk.length > 0) {
                            ballFeatures += (ballFeatures.length > 0 ? "," : "") + "+s";
                        }
                    }
                    const textDiv = new Phaser.Text(this.game, this.button.width * 1.3, -22, ballFeatures, { font: "18px Arial", fill: "#9999FF" });
                    textDiv.anchor.x = 1;
                    this.add(textDiv);
                }
            }
        }
        loadTable(tableWidth, tableHeight) {
            const graphics = this.game.add.graphics(0, 0);
            graphics.beginFill(0x228B22, 1);
            graphics.drawRect(-tableWidth / 2, tableHeight / 2, tableWidth, tableHeight);
            this.add(graphics);
        }
        loadBalls(ballData) {
            const realTableWidth = 84000;
            const realTableHeight = 42000;
            for (let entry of ballData) {
                let x = (entry.x / realTableWidth) * this.tableWidth;
                let y = (entry.y / realTableHeight) * this.tableHeight;
                var graphics = this.game.add.graphics(0, 0);
                graphics.beginFill(this.getBallColour(entry.id), 1);
                graphics.drawCircle(x, y + this.tableHeight, 5);
                this.add(graphics);
            }
        }
        getBallColour(id) {
            switch (id) {
                case 0: return 0xFFFFFF;
                case 1: return 0xFFFF00;
                case 2: return 0x0000FF;
                case 3: return 0xFF0000;
                case 4: return 0x660099;
                case 5: return 0xFF6600;
                case 6: return 0x00FF00;
                case 7: return 0x800000;
                case 8: return 0x000000;
                case 9: return 0xFFFF00;
                case 10: return 0x0000FF;
                case 11: return 0xFF0000;
                case 12: return 0x660099;
                case 13: return 0xFF6600;
                case 14: return 0x00FF00;
                case 15: return 0x800000;
                default: return 0xFFFFFF;
            }
        }
        onClickButton(b) {
            if (this.game.device.touch && this.game.scale.compatibility.supportsFullScreen && !(this.game.device.iOS && this.game.device.mobileSafari)) {
                this.game.scale.startFullScreen();
                if (!MafiaBilliardTricks.GameVars.fullscreenTimer) {
                    MafiaBilliardTricks.GameVars.fullscreenTimer = this.game.time.events.add(200, function () {
                        MafiaBilliardTricks.GameManager.onLevelSelected(parseInt(b.name) - 1);
                    }, this);
                }
                else {
                    MafiaBilliardTricks.GameManager.onLevelSelected(parseInt(b.name) - 1);
                }
            }
            else {
                MafiaBilliardTricks.GameManager.onLevelSelected(parseInt(b.name) - 1);
            }
        }
        onClickBossButton(b) {
            MafiaBilliardTricks.GameManager.enterBossLevel(parseInt(b.name));
        }
    }
    MafiaBilliardTricks.LevelSelectionButton = LevelSelectionButton;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class BallEdition extends Phaser.Group {
        constructor(game, id) {
            super(game, null, "ball-edition");
            this.down = false;
            this.id = id;
            let spritesheetName = "texture_atlas_1";
            if (this.id <= 8) {
                this.ballType = MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID;
            }
            else {
                this.ballType = MafiaBilliardTricks.GameConstants.BALL_TYPE_STRIPED;
            }
            this.baseImage = new Phaser.Image(game, 0, 0, "texture_atlas_1");
            this.baseImage.width = 2 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            this.baseImage.height = 2 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            this.baseImage.anchor.set(.5);
            this.baseImage.inputEnabled = true;
            this.baseImage.events.onInputDown.add(this.onDown, this);
            this.baseImage.events.onInputUp.add(this.onUp, this);
            this.addChild(this.baseImage);
            if (this.ballType === MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID) {
                this.baseImage.frameName = "balls/solid_" + this.id + ".png";
            }
            else {
                this.baseImage.frameName = "balls/stripes_" + this.id + "_10.png";
            }
            this.shade = new Phaser.Image(game, 0, 0, "texture_atlas_1", "shade.png");
            this.shade.anchor.set(.5);
            this.shade.width = 2.2 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            this.shade.height = 2.2 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            this.addChild(this.shade);
        }
        update() {
            super.update();
            if (this.down) {
                this.x = this.game.input.activePointer.x - this.parent.x;
                this.y = this.game.input.activePointer.y - this.parent.y;
            }
        }
        onDown() {
            this.down = true;
        }
        onUp() {
            this.down = false;
            if (this.game.input.activePointer.y < 90) {
                MafiaBilliardTricks.LevelEditionState.currentInstance.removeBall(this);
            }
            else {
                this.down = false;
                if (MafiaBilliardTricks.LevelEditionState.currentInstance.gui.snapToGrid) {
                    this.snapCoordinatesToGrid();
                }
            }
        }
        snapCoordinatesToGrid() {
            let x = this.x;
            let y = this.y;
            let xError = Math.abs(x % MafiaBilliardTricks.GameConstants.GRID_DELTA_LINE);
            let yError = Math.abs(y % MafiaBilliardTricks.GameConstants.GRID_DELTA_LINE);
            if (xError < MafiaBilliardTricks.GameConstants.GRID_TOLERANCE || xError > (MafiaBilliardTricks.GameConstants.GRID_DELTA_LINE - MafiaBilliardTricks.GameConstants.GRID_TOLERANCE)) {
                x = Math.round(x / MafiaBilliardTricks.GameConstants.GRID_DELTA_LINE) * MafiaBilliardTricks.GameConstants.GRID_DELTA_LINE;
            }
            x = Billiard.Maths.fixNumber(x);
            if (yError < MafiaBilliardTricks.GameConstants.GRID_TOLERANCE || yError > (MafiaBilliardTricks.GameConstants.GRID_DELTA_LINE - MafiaBilliardTricks.GameConstants.GRID_TOLERANCE)) {
                y = Math.round(y / MafiaBilliardTricks.GameConstants.GRID_DELTA_LINE) * MafiaBilliardTricks.GameConstants.GRID_DELTA_LINE;
            }
            y = Billiard.Maths.fixNumber(y);
            this.x = x;
            this.y = y;
        }
    }
    MafiaBilliardTricks.BallEdition = BallEdition;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class LevelEditionGUI extends Phaser.Group {
        constructor(game, timed, turnBased, timeTurnValue, turnsLeftStarDivider) {
            super(game, null, "gui-level-edition");
            this.timed = timed;
            this.turnBased = turnBased;
            this.snapToGrid = false;
            if (this.timed && this.turnBased) {
                MafiaBilliardTricks.GameManager.log("Cannot have a timed and turn-based game!");
            }
            this.timeTurnValue = timeTurnValue;
            this.turnsLeftStarDivider = turnsLeftStarDivider;
            const backButton = new Phaser.Button(this.game, 0, 0, "texture_atlas_1", this.onClickBack, this);
            backButton.setFrames("btn_resume_on.png", "btn_resume_off.png", "btn_resume_on.png", "btn_resume_off.png");
            backButton.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            this.add(backButton);
            const startButton = new Phaser.Button(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH - 200, 5, "texture_atlas_1", this.onClickStart, this);
            startButton.setFrames("button_start_on.png", "button_start_off.png", "button_start_on.png", "button_start_off.png");
            startButton.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            this.add(startButton);
            const saveButton = new Phaser.Button(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH - 200, 60, "texture_atlas_1", this.onClickSave, this);
            saveButton.setFrames("button_save_on.png", "button_save_off.png", "button_save_on.png", "button_save_off.png");
            saveButton.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            this.add(saveButton);
            const cueBallButton = new Phaser.Image(this.game, 150, 50, "texture_atlas_1");
            cueBallButton.frameName = "balls/solid_0.png";
            cueBallButton.anchor.set(.5);
            cueBallButton.width = 2.5 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            cueBallButton.height = 2.5 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            cueBallButton.inputEnabled = true;
            cueBallButton.events.onInputDown.add(this.onDownBall, this);
            cueBallButton.name = "0";
            this.add(cueBallButton);
            const cueBallButtonShade = new Phaser.Image(game, 150, 50, "texture_atlas_1", "shade.png");
            cueBallButtonShade.anchor.set(.5);
            cueBallButtonShade.width = 2.75 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            cueBallButtonShade.height = 2.75 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            this.addChild(cueBallButtonShade);
            const blackBallButton = new Phaser.Image(this.game, 200, 50, "texture_atlas_1");
            blackBallButton.frameName = "balls/solid_8.png";
            blackBallButton.anchor.set(.5);
            blackBallButton.width = 2.5 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            blackBallButton.height = 2.5 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            blackBallButton.inputEnabled = true;
            blackBallButton.events.onInputDown.add(this.onDownBall, this);
            blackBallButton.name = "8";
            this.add(blackBallButton);
            const blackBallButtonShade = new Phaser.Image(game, 200, 50, "texture_atlas_1", "shade.png");
            blackBallButtonShade.anchor.set(.5);
            blackBallButtonShade.width = 2.75 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            blackBallButtonShade.height = 2.75 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            this.addChild(blackBallButtonShade);
            for (let i = 9; i <= 15; i++) {
                let stripedBallButton = new Phaser.Image(this.game, 200 + (i - 8) * 50, 50, "texture_atlas_1");
                stripedBallButton.frameName = "balls/stripes_" + i.toString() + "_10.png";
                stripedBallButton.anchor.set(.5);
                stripedBallButton.width = 2.5 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                stripedBallButton.height = 2.5 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                stripedBallButton.inputEnabled = true;
                stripedBallButton.events.onInputDown.add(this.onDownBall, this);
                stripedBallButton.name = i.toString();
                this.add(stripedBallButton);
                const strippedBallButtonShade = new Phaser.Image(game, 200 + (i - 8) * 50, 50, "texture_atlas_1", "shade.png");
                strippedBallButtonShade.anchor.set(.5);
                strippedBallButtonShade.width = 2.75 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                strippedBallButtonShade.height = 2.75 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                this.addChild(strippedBallButtonShade);
            }
            let isTimed = this.timed;
            let isTurnBased = this.turnBased;
            this.showTimeControls();
            this.showTurnControls();
            this.showSnapToGridCheckbox();
            this.showTimeTurnValueControl();
            this.showTurnsLeftStarDividerControl();
        }
        showTimeTurnValueControl() {
            this.timeTurnValueLabel = new Phaser.Text(this.game, 770, 34, this.timeTurnValue ? this.timeTurnValue.toString() : "0", { font: "28px Exo-SemiBold", fontWeight: "800", fill: "#FFFFFF", align: "center" });
            this.timeTurnValueLabel.anchor.set(0.5, 0.0);
            this.add(this.timeTurnValueLabel);
            const timeTurnUpButton = new Phaser.Button(this.game, 770, 20, "texture_atlas_0", this.onClickUpDownButtonTimeTurns, this);
            timeTurnUpButton.setFrames("button-arrow-on.png", "button-arrow-off.png", "button-arrow-on.png", "button-arrow-off.png");
            timeTurnUpButton.name = LevelEditionGUI.UP;
            timeTurnUpButton.anchor.set(.5);
            timeTurnUpButton.angle = -90;
            this.add(timeTurnUpButton);
            const timeTurnDownButton = new Phaser.Button(this.game, 770, 82, "texture_atlas_0", this.onClickUpDownButtonTimeTurns, this);
            timeTurnDownButton.setFrames("button-arrow-on.png", "button-arrow-off.png", "button-arrow-on.png", "button-arrow-off.png");
            timeTurnDownButton.name = LevelEditionGUI.DOWN;
            timeTurnDownButton.anchor.set(.5);
            timeTurnDownButton.angle = 90;
            this.add(timeTurnDownButton);
        }
        showTurnsLeftStarDividerControl() {
            this.turnsLeftStarDividerValueLabel = new Phaser.Text(this.game, 980, 34, this.turnsLeftStarDivider ? this.turnsLeftStarDivider.toString() : "0", { font: "28px Exo-SemiBold", fontWeight: "800", fill: "#FFFFFF", align: "center" });
            this.turnsLeftStarDividerValueLabel.anchor.set(0.5, 0.0);
            this.add(this.turnsLeftStarDividerValueLabel);
            this.turnsLeftStarDividerLabel = new Phaser.Text(this.game, 970, 34, "SDiv", { font: "28px Exo-SemiBold", fontWeight: "800", fill: "#FFFFFF", align: "center" });
            this.turnsLeftStarDividerLabel.anchor.set(1.0, 0.0);
            this.add(this.turnsLeftStarDividerLabel);
            this.turnsLeftStarDividerUpButton = new Phaser.Button(this.game, 980, 20, "texture_atlas_0", this.onClickUpDownButtonTurnsLeftStarDivider, this);
            this.turnsLeftStarDividerUpButton.setFrames("button-arrow-on.png", "button-arrow-off.png", "button-arrow-on.png", "button-arrow-off.png");
            this.turnsLeftStarDividerUpButton.name = LevelEditionGUI.UP;
            this.turnsLeftStarDividerUpButton.anchor.set(.5);
            this.turnsLeftStarDividerUpButton.angle = -90;
            this.add(this.turnsLeftStarDividerUpButton);
            this.turnsLeftStarDividerDownButton = new Phaser.Button(this.game, 980, 82, "texture_atlas_0", this.onClickUpDownButtonTurnsLeftStarDivider, this);
            this.turnsLeftStarDividerDownButton.setFrames("button-arrow-on.png", "button-arrow-off.png", "button-arrow-on.png", "button-arrow-off.png");
            this.turnsLeftStarDividerDownButton.name = LevelEditionGUI.DOWN;
            this.turnsLeftStarDividerDownButton.anchor.set(.5);
            this.turnsLeftStarDividerDownButton.angle = 90;
            this.add(this.turnsLeftStarDividerDownButton);
        }
        showSnapToGridCheckbox() {
            this.snapToGridButton = new Phaser.Image(this.game, 739, 615, "texture_atlas_0", this.snapToGrid ? "button-radio-on.png" : "button-radio-off.png");
            this.snapToGridButton.anchor.set(.5);
            this.snapToGridButton.inputEnabled = true;
            this.snapToGridButton.events.onInputDown.add(this.onDownSnapToGrid, this);
            this.game.world.bringToTop(this.snapToGridButton);
            this.add(this.snapToGridButton);
            let snapToGridLabel = new Phaser.Text(this.game, 774, 601, "Snap to grid", { font: "28px Exo-SemiBold", fontWeight: "800", fill: "#FFFFFF", align: "center" });
            this.game.world.bringToTop(snapToGridLabel);
            this.add(snapToGridLabel);
        }
        showTurnControls() {
            this.turnLevelButton = new Phaser.Image(this.game, 625, 72, "texture_atlas_0", this.turnBased ? "button-radio-on.png" : "button-radio-off.png");
            this.turnLevelButton.anchor.set(.5);
            this.turnLevelButton.inputEnabled = true;
            this.turnLevelButton.events.onInputDown.add(this.onDownTurnBasedLevel, this);
            this.add(this.turnLevelButton);
            let turnLevelLabel = new Phaser.Text(this.game, 660, 58, "Turns", { font: "28px Exo-SemiBold", fontWeight: "800", fill: "#FFFFFF", align: "center" });
            this.add(turnLevelLabel);
        }
        showTimeControls() {
            this.timeLevelButton = new Phaser.Image(this.game, 625, 34, "texture_atlas_0", this.timed ? "button-radio-on.png" : "button-radio-off.png");
            this.timeLevelButton.anchor.set(.5);
            this.timeLevelButton.inputEnabled = true;
            this.timeLevelButton.events.onInputDown.add(this.onDownTimedLevel, this);
            this.add(this.timeLevelButton);
            let timedLevelLabel = new Phaser.Text(this.game, 660, 20, "Timed", { font: "28px Exo-SemiBold", fontWeight: "800", fill: "#FFFFFF", align: "center" });
            this.add(timedLevelLabel);
        }
        onClickUpDownButtonTurnsLeftStarDivider(b) {
            if (this.timeTurnValue === undefined || this.turnsLeftStarDivider === undefined) {
                this.timeTurnValue = 0;
                this.turnsLeftStarDivider = 0;
            }
            if (b.name === LevelEditionGUI.UP) {
                this.turnsLeftStarDivider++;
            }
            else {
                this.turnsLeftStarDivider--;
                if (this.turnsLeftStarDivider < 0) {
                    this.turnsLeftStarDivider = 0;
                }
            }
            this.turnsLeftStarDividerValueLabel.text = this.turnsLeftStarDivider.toString();
        }
        onClickUpDownButtonTimeTurns(b) {
            if (this.timeTurnValue === undefined || this.turnsLeftStarDivider === undefined) {
                this.timeTurnValue = 0;
                this.turnsLeftStarDivider = 0;
            }
            if (b.name === LevelEditionGUI.UP) {
                this.timeTurnValue++;
            }
            else {
                this.timeTurnValue--;
                if (this.timeTurnValue < 0) {
                    this.timeTurnValue = 75;
                }
            }
            this.timeTurnValueLabel.text = this.timeTurnValue.toString();
        }
        onDownTimedLevel() {
            if (this.timeTurnValue === undefined || this.turnsLeftStarDivider === undefined) {
                this.timeTurnValue = 0;
                this.turnsLeftStarDivider = 0;
            }
            this.timed = !this.timed;
            if (this.timed && this.turnBased) {
                this.turnBased = false;
            }
            this.UpdateControlVisibility();
        }
        onDownTurnBasedLevel() {
            if (this.timeTurnValue === undefined || this.turnsLeftStarDivider === undefined) {
                this.timeTurnValue = 0;
                this.turnsLeftStarDivider = 0;
            }
            this.turnBased = !this.turnBased;
            if (this.turnBased && this.timed) {
                this.timed = false;
            }
            this.UpdateControlVisibility();
        }
        onDownSnapToGrid() {
            this.snapToGrid = !this.snapToGrid;
            this.snapToGridButton.frameName = this.snapToGrid ? "button-radio-on.png" : "button-radio-off.png";
        }
        UpdateControlVisibility() {
            this.timeLevelButton.frameName = this.timed ? "button-radio-on.png" : "button-radio-off.png";
            this.turnLevelButton.frameName = this.turnBased ? "button-radio-on.png" : "button-radio-off.png";
            this.turnsLeftStarDividerValueLabel.visible = this.turnBased;
            this.turnsLeftStarDividerLabel.visible = this.turnBased;
            this.turnsLeftStarDividerUpButton.visible = this.turnBased;
            this.turnsLeftStarDividerDownButton.visible = this.turnBased;
        }
        onDownBall(ballImage) {
            let ballId = parseInt(ballImage.name);
            MafiaBilliardTricks.LevelEditionState.currentInstance.addBall(ballId, ballImage.x, ballImage.y);
        }
        onClickBack() {
            MafiaBilliardTricks.GameManager.onClickBack();
        }
        onClickStart() {
            MafiaBilliardTricks.LevelEditionState.currentInstance.onClickStart();
        }
        onClickSave() {
            MafiaBilliardTricks.LevelEditionState.currentInstance.onClickSave();
        }
    }
    LevelEditionGUI.UP = "up";
    LevelEditionGUI.DOWN = "down";
    MafiaBilliardTricks.LevelEditionGUI = LevelEditionGUI;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class LevelEditionState extends Phaser.State {
        init() {
            LevelEditionState.currentInstance = this;
            this.balls = [];
        }
        create() {
            const levels = this.game.cache.getJSON("levels");
            this.levelData = levels[MafiaBilliardTricks.GameVars.currentLevel];
            const tmpBackround = this.add.image(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2, "texture_atlas_2", "background.png");
            tmpBackround.anchor.set(.5);
            tmpBackround.scale.set(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 1019 / MafiaBilliardTricks.GameVars.scaleX, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 604);
            this.tableContainer = this.add.group();
            this.tableContainer.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            this.tableContainer.position.set(MafiaBilliardTricks.GameConstants.TABLE_POS_X, MafiaBilliardTricks.GameConstants.TABLE_POS_Y);
            let pocketBackground = this.tableContainer.create(0, 0, "texture_atlas_2", "pockets.png");
            pocketBackground.anchor.set(.5);
            let cloth = this.tableContainer.create(0, 0, "texture_atlas_2", "cloth.png");
            cloth.anchor.set(.5);
            let tableTop = this.tableContainer.create(0, 0, "texture_atlas_2", "tableTop.png");
            tableTop.anchor.set(.5);
            let ornamentCorner = this.tableContainer.create(0, 0, "texture_atlas_2", "ornament_0.png");
            ornamentCorner.anchor.set(.5);
            this.drawGrid();
            this.addBalls();
            this.gui = new MafiaBilliardTricks.LevelEditionGUI(this.game, this.levelData.timed, this.levelData.turnBased, this.levelData.timeTurnsValue, this.levelData.turnsLeftStarDivider);
            this.add.existing(this.gui);
            this.add.text(15, MafiaBilliardTricks.GameConstants.GAME_HEIGHT - 40, "level " + (MafiaBilliardTricks.GameVars.currentLevel + 1), { font: "28px Exo-SemiBold", fontWeight: "800", fill: "#FFFF00", align: "center" });
        }
        shutdown() {
            LevelEditionState.currentInstance = null;
            super.shutdown();
        }
        addBall(id, x, y) {
            let ballEdition = new MafiaBilliardTricks.BallEdition(this.game, id);
            ballEdition.x = x;
            ballEdition.y = y;
            ballEdition.down = true;
            this.tableContainer.add(ballEdition);
            this.balls.push(ballEdition);
        }
        removeBall(ball) {
            let i = this.balls.indexOf(ball);
            this.balls.splice(i, 1);
            ball.destroy();
        }
        onClickStart() {
            const levels = this.game.cache.getJSON("levels");
            let levelData = levels[MafiaBilliardTricks.GameVars.currentLevel];
            levelData.timed = this.gui.timed;
            levelData.turnBased = this.gui.turnBased;
            levelData.timeTurnsValue = this.gui.timeTurnValue;
            levelData.turnsLeftStarDivider = this.gui.turnsLeftStarDivider;
            levelData.ballData.length = 0;
            let cueBall = null;
            for (let i = 0; i < this.balls.length; i++) {
                let ball = this.balls[i];
                if (ball.id === 0) {
                    cueBall = ball;
                }
                else {
                    let ballCoordinates = this.scaleAndFixBallCoordinates(ball);
                    levelData.ballData.push({ id: ball.id, active: true, isGhostBall: false, isnonEssentialCueBall: false, x: ballCoordinates.x, y: ballCoordinates.y });
                }
            }
            if (cueBall) {
                let cueBallCoordinates = this.scaleAndFixBallCoordinates(cueBall);
                levelData.ballData.unshift({ id: 0, active: true, isGhostBall: false, isnonEssentialCueBall: false, x: cueBallCoordinates.x, y: cueBallCoordinates.y });
            }
            MafiaBilliardTricks.GameManager.playEditedLevel();
        }
        onClickSave() {
            const levels = this.game.cache.getJSON("levels");
            let levelData = levels[MafiaBilliardTricks.GameVars.currentLevel];
            levelData.timed = this.gui.timed;
            levelData.turnBased = this.gui.turnBased;
            levelData.timeTurnsValue = this.gui.timeTurnValue;
            levelData.turnsLeftStarDivider = this.gui.turnsLeftStarDivider;
            levelData.ballData.length = 0;
            let cueBall = null;
            for (let i = 0; i < this.balls.length; i++) {
                let ball = this.balls[i];
                if (ball.id === 0) {
                    cueBall = ball;
                }
                else {
                    let ballCoordinates = this.scaleAndFixBallCoordinates(ball);
                    levelData.ballData.push({ id: ball.id, active: true, isGhostBall: false, isnonEssentialCueBall: false, x: ballCoordinates.x, y: ballCoordinates.y });
                }
            }
            if (cueBall) {
                let cueBallCoordinates = this.scaleAndFixBallCoordinates(cueBall);
                levelData.ballData.unshift({ id: 0, active: true, isGhostBall: false, isnonEssentialCueBall: false, x: cueBallCoordinates.x, y: cueBallCoordinates.y });
            }
            let a = document.createElement("a");
            let file = new Blob([JSON.stringify(levels)], { type: "text/plain" });
            a.href = URL.createObjectURL(file);
            a.download = "levels.json";
            a.click();
        }
        scaleAndFixBallCoordinates(ball) {
            let x = ball.x;
            let y = ball.y;
            x /= MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            x = Billiard.Maths.fixNumber(x);
            y /= MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            y = Billiard.Maths.fixNumber(y);
            return { x: x, y: y };
        }
        drawGrid() {
            let graphics = this.add.graphics(0, 0);
            this.tableContainer.add(graphics);
            graphics.lineStyle(1, 0xFFFFFF, .25);
            const deltaLine = MafiaBilliardTricks.GameConstants.GRID_DELTA_LINE;
            const numLineHorizontal = 11;
            for (let i = 0; i < numLineHorizontal; i++) {
                graphics.moveTo(-410, deltaLine * (i - (numLineHorizontal - 1) / 2));
                graphics.lineTo(410, deltaLine * (i - (numLineHorizontal - 1) / 2));
            }
            const numLineVertical = 21;
            for (let i = 0; i < numLineVertical; i++) {
                graphics.moveTo(deltaLine * (i - (numLineVertical - 1) / 2), -205);
                graphics.lineTo(deltaLine * (i - (numLineVertical - 1) / 2), 205);
            }
        }
        addBalls() {
            for (let i = 0; i < this.levelData.ballData.length; i++) {
                let ballEdition = new MafiaBilliardTricks.BallEdition(this.game, this.levelData.ballData[i].id);
                ballEdition.x = this.levelData.ballData[i].x * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                ballEdition.y = this.levelData.ballData[i].y * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                this.tableContainer.add(ballEdition);
                this.balls.push(ballEdition);
            }
        }
    }
    MafiaBilliardTricks.LevelEditionState = LevelEditionState;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class CharacterContainer extends Phaser.Group {
        constructor(game, characterId, parentRail) {
            super(game, null, "character-container");
            this.characterId = characterId;
            this.parentRail = parentRail;
            this.animatingIntro = this.characterId === MafiaBilliardTricks.GameVars.bossToBeIntroducedInMenu;
            if (MafiaBilliardTricks.GameVars.bossToBeIntroducedInMenu) {
                MafiaBilliardTricks.GameVars.bossToBeIntroducedInMenu = -1;
            }
            this.charButtonUnlocked = MafiaBilliardTricks.GameVars.gameData.bossesUnlocked[this.characterId] !== -1;
            this.charPrecedingMatchesUnlocked = MafiaBilliardTricks.GameVars.gameData.levelStars[this.characterId * 5] !== -1;
            this.note = new MafiaBilliardTricks.Note(this.game, this.characterId, this.animatingIntro);
            this.note.position.set(-420, 70);
            if (this.charButtonUnlocked) {
                this.note.activateBossButton();
            }
            this.add(this.note);
            this.note.visible = this.charPrecedingMatchesUnlocked;
            const siluetteText = this.charPrecedingMatchesUnlocked ? "" : "_siluette";
            this.character = new Phaser.Button(this.game, -16, 32, "texture_atlas_4", this.clickCharButton, this);
            this.character.setFrames("character_" + this.characterId + siluetteText + ".png", "character_" + this.characterId + siluetteText + ".png", "character_" + this.characterId + siluetteText + ".png", "character_" + this.characterId + siluetteText + ".png");
            this.character.events.onInputOver.add(this.overCharButton, this);
            this.character.scale.x = 1 / MafiaBilliardTricks.GameVars.correctionScale * (this.charPrecedingMatchesUnlocked ? 1 : 2);
            this.character.scale.y *= this.charPrecedingMatchesUnlocked ? 1 : 2;
            this.character.anchor.set(this.charPrecedingMatchesUnlocked ? 0.0 : 0.5, 0.0);
            if (this.animatingIntro) {
                this.character.alpha = 0;
                this.fakeSiluette = new Phaser.Image(this.game, -16, 32, "texture_atlas_4", "character_" + this.characterId + "_siluette.png");
                this.fakeSiluette.scale.set(1 / MafiaBilliardTricks.GameVars.correctionScale * 2, 2);
                this.add(this.fakeSiluette);
                this.bringToTop(this.fakeSiluette);
            }
            if (this.charPrecedingMatchesUnlocked) {
                this.game.add.tween(this.character).to({ y: this.character.y - 5 }, 4000, "Linear", true, 500).loop(true).yoyo(true);
            }
            this.add(this.character);
        }
        tweenTint(obj, startColor, endColor, time = 250, delay = 0, callback) {
            if (obj) {
                let colorBlend = {
                    step: 0
                };
                let colorTween = this.game.add.tween(colorBlend).to({ step: 100 }, time, "Linear", true, delay).loop(true).yoyo(true);
                colorTween.onUpdateCallback(() => {
                    obj.tint = Phaser.Color.interpolateColor(startColor, endColor, 100, colorBlend.step);
                });
                obj.tint = startColor;
                if (callback) {
                    colorTween.onComplete.add(callback, this);
                }
                colorTween.start();
                return colorTween;
            }
        }
        lock() {
        }
        unlock() {
        }
        animate() {
            this.note.x = -460;
            this.character.x = 30;
            this.game.add.tween(this.note)
                .to({ x: -420 }, 500, Phaser.Easing.Linear.None, true, 300);
            this.game.add.tween(this.character)
                .to({ x: -10 }, 500, Phaser.Easing.Linear.None, true, 300);
            if (this.animatingIntro) {
                this.game.add.tween(this.character)
                    .to({ alpha: 1 }, 1500, Phaser.Easing.Linear.None, true, 1000);
                this.game.add.tween(this.fakeSiluette)
                    .to({ alpha: 0 }, 1500, Phaser.Easing.Linear.None, true, 1000);
                this.note.animate();
                this.animatingIntro = false;
            }
        }
        clickCharButton() {
            if (this.charButtonUnlocked && !this.parentRail.tweening && this.characterId === this.parentRail.currentCharacter) {
                MafiaBilliardTricks.AdHelper.showAd(() => {
                    MafiaBilliardTricks.AudioManager.playSound("click_btn");
                    MafiaBilliardTricks.GameManager.enterBossLevel(this.characterId);
                }, this);
            }
        }
        overCharButton() {
            if (!this.charButtonUnlocked) {
                this.character.inputEnabled = false;
            }
        }
    }
    MafiaBilliardTricks.CharacterContainer = CharacterContainer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class LevelContainer extends Phaser.Group {
        constructor(game, level) {
            super(game, null, "level-container");
            const levelDescriptionStr = MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["DESCRIPTION_LEVEL_" + level];
            this.label = new Phaser.Text(this.game, 34, 4, levelDescriptionStr, { font: "18px american-typewriter-regular", fill: "#4C3528" });
            this.label.anchor.y = .5;
            this.label.wordWrap = true;
            this.add(MafiaBilliardTricks.Utils.resizeTextToFit(this.label, 265));
            this.level = level;
            const levelStarData = MafiaBilliardTricks.GameVars.gameData.levelStars[this.level];
            if (levelStarData === 0) {
                this.playButton = new Phaser.Button(this.game, 0, 3, "texture_atlas_1", this.onClickPlay, this);
                this.playButton.setFrames("button_play_level_on.png", "button_play_level_off.png", "button_play_level_on.png", "button_play_level_off.png");
                this.playButton.scale.set(0.8, 0.8 * MafiaBilliardTricks.GameVars.correctionScale);
                this.playButton.anchor.set(.5);
                this.add(this.playButton);
                this.checkBoxImage = null;
                this.strikeOut = null;
            }
            else if (levelStarData > 0) {
                this.checkedCheckBox = new Phaser.Button(this.game, 9, 3, "texture_atlas_1", this.onClickPlay, this);
                this.checkedCheckBox.setFrames("check_box_checked_on.png", "check_box_checked_off.png", "check_box_checked_on.png", "check_box_checked_off.png");
                this.checkedCheckBox.scale.set(1, MafiaBilliardTricks.GameVars.correctionScale);
                this.checkedCheckBox.anchor.set(.5);
                this.add(this.checkedCheckBox);
                const labelLowerLeftCorner = new Phaser.Point(this.label.x - 4, this.label.y + this.label.height * .5 - 14);
                const labelUpperRightCorner = new Phaser.Point(this.label.x + this.label.width, this.label.y - this.label.height * .5 + 14);
                this.strikeOut = new Phaser.Image(this.game, labelLowerLeftCorner.x, labelLowerLeftCorner.y, "texture_atlas_1", "tachon.png");
                this.strikeOut.anchor.set(0.0, 0.5);
                this.add(this.strikeOut);
                this.strikeOut.scale.x = (this.label.width / this.strikeOut.width) * 1.1;
                this.strikeOut.angle = Phaser.Math.radToDeg(Phaser.Math.angleBetweenPoints(labelLowerLeftCorner, labelUpperRightCorner));
                this.checkBoxImage = null;
                this.playButton = null;
                if (MafiaBilliardTricks.GameVars.lastLevelBeaten === level) {
                    this.checkedCheckBox.scale.y = 0.001;
                    this.game.add.tween(this.checkedCheckBox.scale).to({ y: MafiaBilliardTricks.GameVars.correctionScale }, 500, Phaser.Easing.Cubic.Out, true, 200);
                    this.checkedCheckBox.bringToTop();
                    const strikeOutMask = new Phaser.Graphics(this.game, this.strikeOut.x, this.strikeOut.y - (this.strikeOut.height / 2));
                    strikeOutMask.beginFill(0xFFFFFF);
                    strikeOutMask.drawRect(0, -50, this.strikeOut.width, 100);
                    strikeOutMask.visible = false;
                    this.add(strikeOutMask);
                    this.strikeOut.mask = strikeOutMask;
                    strikeOutMask.visible = true;
                    strikeOutMask.scale.x = 0.001;
                    this.game.add.tween(strikeOutMask.scale).to({ x: 1 }, 1500, Phaser.Easing.Cubic.In, true, 200);
                    MafiaBilliardTricks.GameVars.lastLevelBeaten = -1;
                }
            }
            else {
                this.playButton = null;
                this.strikeOut = null;
                this.checkBoxImage = new Phaser.Image(this.game, 0, 0, "texture_atlas_1", "check_box_unchecked.png");
                this.checkBoxImage.anchor.set(.5);
                this.checkBoxImage.scale.set(1, MafiaBilliardTricks.GameVars.correctionScale);
                this.add(this.checkBoxImage);
            }
            if (this.strikeOut || this.playButton) {
                this.label.inputEnabled = true;
                this.label.events.onInputOver.add(this.labelOver, this);
                this.label.events.onInputOut.add(this.labelOut, this);
                this.label.events.onInputDown.add(this.labelDown, this);
                this.label.events.onInputUp.add(this.onClickPlay, this);
            }
            if (MafiaBilliardTricks.GameVars.starLessLevels.indexOf(level) < 0) {
                const starTextureID = levelStarData >= 0 ? MafiaBilliardTricks.GameVars.gameData.levelStars[this.level] : 0;
                this.stars = new Phaser.Image(this.game, 340, 0, "texture_atlas_1", "stars_" + starTextureID + ".png");
                this.stars.scale.set(1, MafiaBilliardTricks.GameVars.correctionScale);
                this.stars.anchor.set(.5);
                this.add(this.stars);
            }
        }
        transitionInPlayButton(levelJustBeaten) {
            if (this.playButton) {
                if (levelJustBeaten) {
                    this.playButton.scale.set(0.001);
                    this.game.add.tween(this.playButton.scale).to({ x: 0.8, y: 0.8 * MafiaBilliardTricks.GameVars.correctionScale }, 500, Phaser.Easing.Cubic.In, true, 200)
                        .onComplete.add(function () {
                        const pulseTween = this.game.add.tween(this.playButton.scale);
                        pulseTween.to({ x: .835, y: .765 * MafiaBilliardTricks.GameVars.correctionScale }, 300, Phaser.Easing.Linear.None, false);
                        pulseTween.to({ x: .765, y: 0.835 * MafiaBilliardTricks.GameVars.correctionScale }, 700, Phaser.Easing.Elastic.Out);
                        pulseTween.loop();
                        pulseTween.start();
                    }, this);
                }
                else {
                    const pulseTween = this.game.add.tween(this.playButton.scale);
                    pulseTween.to({ x: .835, y: .765 * MafiaBilliardTricks.GameVars.correctionScale }, 300, Phaser.Easing.Linear.None, false);
                    pulseTween.to({ x: .765, y: 0.835 * MafiaBilliardTricks.GameVars.correctionScale }, 700, Phaser.Easing.Elastic.Out);
                    pulseTween.loop();
                    pulseTween.start();
                }
            }
        }
        onClickPlay() {
            if (this.game.device.touch && this.game.scale.compatibility.supportsFullScreen && !(this.game.device.iOS && this.game.device.mobileSafari)) {
                this.game.scale.startFullScreen();
                if (!MafiaBilliardTricks.GameVars.fullscreenTimer) {
                    MafiaBilliardTricks.GameVars.fullscreenTimer = this.game.time.events.add(200, function () {
                        MafiaBilliardTricks.AdHelper.showAd(() => {
                            MafiaBilliardTricks.GameManager.onLevelSelected(this.level);
                        }, this);
                    }, this);
                }
                else {
                    MafiaBilliardTricks.AdHelper.showAd(() => {
                        MafiaBilliardTricks.GameManager.onLevelSelected(this.level);
                    }, this);
                }
            }
            else {
                MafiaBilliardTricks.AdHelper.showAd(() => {
                    MafiaBilliardTricks.GameManager.onLevelSelected(this.level);
                }, this);
            }
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
        }
        labelDown() {
            if (this.checkedCheckBox) {
                this.checkedCheckBox.frameName = "check_box_checked_on.png";
            }
            if (this.playButton) {
                this.playButton.frameName = "button_play_level_on.png";
            }
        }
        labelOut() {
            if (this.checkedCheckBox) {
                this.checkedCheckBox.frameName = "check_box_checked_off.png";
            }
            if (this.playButton) {
                this.playButton.frameName = "button_play_level_off.png";
            }
        }
        labelOver() {
            if (this.checkedCheckBox) {
                this.checkedCheckBox.frameName = "check_box_checked_on.png";
            }
            if (this.playButton) {
                this.playButton.frameName = "button_play_level_on.png";
            }
        }
    }
    MafiaBilliardTricks.LevelContainer = LevelContainer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class LevelSelectionState extends Phaser.State {
        init() {
            LevelSelectionState.currentInstance = this;
            this.down_px = 0;
            this.down_t = 0;
        }
        create() {
            this.background = this.add.sprite(0, 0, this.game.cache.getBitmapData(MafiaBilliardTricks.GameConstants.DARK_BROWN_SQUARE));
            this.background.scale.set(MafiaBilliardTricks.GameConstants.GAME_WIDTH / MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            this.background.events.onInputUp.add(this.onUpBackground, this);
            this.scaledItemsContainer = this.add.group();
            this.scaledItemsContainer.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2;
            this.scaledItemsContainer.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            if (MafiaBilliardTricks.GameVars.playOutro) {
                this.background.inputEnabled = true;
                this.newDialogueLayer = new MafiaBilliardTricks.DialogueLayer(this.game, this, false);
                this.add.existing(this.newDialogueLayer);
                this.newDialogueLayer.loadDialogue("outro");
                if (this.newDialogueLayer.init()) {
                    MafiaBilliardTricks.GameVars.playOutro = false;
                    MafiaBilliardTricks.GameManager.writeGameData();
                }
            }
            else if (MafiaBilliardTricks.GameVars.gameData.introAlreadySeen) {
                this.createRestOfInterface(MafiaBilliardTricks.GameVars.teleportToLatestBossPage && MafiaBilliardTricks.GameVars.lastBossBeaten < 0);
                MafiaBilliardTricks.GameVars.teleportToLatestBossPage = false;
            }
            else {
                this.background.inputEnabled = true;
                this.newDialogueLayer = new MafiaBilliardTricks.DialogueLayer(this.game, this, false);
                this.add.existing(this.newDialogueLayer);
                this.newDialogueLayer.loadDialogue("intro");
                this.newDialogueLayer.init();
            }
            this.add.image(0, 0, "bar");
            const lowerBar = this.add.image(MafiaBilliardTricks.GameConstants.GAME_WIDTH, MafiaBilliardTricks.GameConstants.GAME_HEIGHT, "bar");
            lowerBar.angle = 180;
            const miniTitle = this.add.image(0, 0, "texture_atlas_1", "game-title-mini.png");
            miniTitle.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            miniTitle.anchor.set(.14, .26);
            const audioButton = new Phaser.Button(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH - 10 * MafiaBilliardTricks.GameVars.scaleX, 10, "texture_atlas_1", this.onAudioButtonClicked, this);
            if (MafiaBilliardTricks.GameVars.gameData.muted) {
                audioButton.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png", "button_audio_off_off.png");
            }
            else {
                audioButton.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png", "button_audio_on_off.png");
            }
            audioButton.anchor.x = 1;
            audioButton.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            audioButton.bringToTop();
            audioButton.alpha = 0;
            this.add.existing(audioButton);
            this.game.add.tween(audioButton)
                .to({ alpha: 1 }, 700, Phaser.Easing.Cubic.Out, true, 0);
            this.languageButton = new Phaser.Button(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH - 10, (MafiaBilliardTricks.GameConstants.GAME_HEIGHT - 20), "texture_atlas_2", this.onLanguageButtonClicked, this);
            this.languageButton.setFrames("btn_" + MafiaBilliardTricks.GameVars.gameData.language + "_on.png", "btn_" + MafiaBilliardTricks.GameVars.gameData.language + "_off.png", "btn_" + MafiaBilliardTricks.GameVars.gameData.language + "_on.png");
            this.languageButton.anchor.x = 1;
            this.languageButton.anchor.y = 1;
            this.languageButton.scale.set(MafiaBilliardTricks.GameVars.scaleX * .81, .81);
            this.languageButton.bringToTop();
            this.languageButton.alpha = 0;
            this.add.existing(this.languageButton);
            this.game.add.tween(this.languageButton)
                .to({ alpha: 1 }, 700, Phaser.Easing.Cubic.Out, true, 0);
            if (this.aboutButton) {
                this.aboutButton.bringToTop();
            }
            if (this.game.device.touch && MafiaBilliardTricks.GameVars.gameData.introAlreadySeen) {
                this.game.input.onDown.add(this.onDown, this);
                this.game.input.onUp.add(this.onUp, this);
            }
            if (!MafiaBilliardTricks.GameVars.gameData.muted) {
                if (MafiaBilliardTricks.GameVars.justLeftCreditsPage) {
                    MafiaBilliardTricks.GameVars.justLeftCreditsPage = false;
                }
                else {
                    MafiaBilliardTricks.AudioManager.playSound("music_menu", true);
                }
            }
        }
        shutdown() {
            LevelSelectionState.currentInstance = null;
            super.shutdown();
        }
        scrollRail(direction) {
            if (this.rail.tweening) {
                return;
            }
            MafiaBilliardTricks.AudioManager.playSound("page_swoosh");
            this.rail.scroll(direction);
            if (this.rail.currentCharacter === 0) {
                this.scrollButtonLeft.visible = false;
                this.scrollButtonRight.visible = true;
            }
            else if (this.rail.currentCharacter === 7) {
                this.scrollButtonLeft.visible = true;
                this.scrollButtonRight.visible = false;
            }
            else {
                this.scrollButtonLeft.visible = true;
                this.scrollButtonRight.visible = true;
            }
        }
        teleportRailToLatestLevel() {
            this.rail.teleport(MafiaBilliardTricks.GameVars.currentLevel);
        }
        onDown(p) {
            if (!MafiaBilliardTricks.GameVars.gameData.introAlreadySeen) {
                return;
            }
            this.down_px = p.x;
            this.down_t = this.game.time.time;
        }
        onUp(p) {
            if (!MafiaBilliardTricks.GameVars.gameData.introAlreadySeen) {
                return;
            }
            const swipe = p.x - this.down_px;
            if (Math.abs(swipe) > 10 && this.game.time.time - this.down_t < 500) {
                if (swipe > 0 && this.scrollButtonLeft.visible) {
                    this.scrollRail(MafiaBilliardTricks.GameConstants.LEFT);
                }
                if (swipe < 0 && this.scrollButtonRight.visible) {
                    this.scrollRail(MafiaBilliardTricks.GameConstants.RIGHT);
                }
            }
        }
        hideDialogueLayer() {
            MafiaBilliardTricks.GameManager.log(this.game.time);
            this.newDialogueLayer.destroy();
            this.createRestOfInterface(true);
            this.background.inputEnabled = false;
        }
        createRestOfInterface(calculateLatestLevel) {
            this.rail = new MafiaBilliardTricks.Rail(this.game);
            let latestLevel = Math.floor(MafiaBilliardTricks.GameVars.currentLevel / 5);
            MafiaBilliardTricks.GameManager.resetCurrentLevel();
            if (calculateLatestLevel) {
                latestLevel = -1;
                for (let i = 0; i < MafiaBilliardTricks.GameVars.gameData.bossesUnlocked.length; i++) {
                    if (MafiaBilliardTricks.GameVars.gameData.bossesUnlocked[i] === 0) {
                        latestLevel = i;
                        break;
                    }
                }
                if (latestLevel === -1) {
                    for (let i = 0; i < MafiaBilliardTricks.GameVars.gameData.levelStars.length; i++) {
                        if (MafiaBilliardTricks.GameVars.gameData.levelStars[i] === 0) {
                            latestLevel = Math.floor(i / 5);
                            break;
                        }
                    }
                    if (latestLevel === -1) {
                        latestLevel = 7;
                    }
                }
                MafiaBilliardTricks.GameVars.currentLevel = latestLevel;
            }
            this.rail.teleport(latestLevel);
            this.scaledItemsContainer.add(this.rail);
            this.aboutButton = new Phaser.Button(this.game, 10, (MafiaBilliardTricks.GameConstants.GAME_HEIGHT - 10), "texture_atlas_1", this.onAboutButtonClicked, this);
            this.aboutButton.setFrames("button_about_on.png", "button_about_off.png", "button_about_on.png");
            this.aboutButton.anchor.y = 1;
            this.aboutButton.scale.set(MafiaBilliardTricks.GameVars.scaleX, 1);
            this.aboutButton.bringToTop();
            this.aboutButton.visible = true;
            this.add.existing(this.aboutButton);
            this.scrollButtonLeft = this.add.button(35 * MafiaBilliardTricks.GameVars.scaleX, 340, "texture_atlas_1", this.onClickScrollButton, this);
            this.scrollButtonLeft.setFrames("button_arrow_on.png", "button_arrow_off.png", "button_arrow_on.png");
            this.scrollButtonLeft.anchor.set(.5);
            this.scrollButtonLeft.scale.x = -1;
            this.scrollButtonLeft.name = MafiaBilliardTricks.GameConstants.LEFT;
            this.scrollButtonRight = this.add.button(MafiaBilliardTricks.GameConstants.GAME_WIDTH - 35 * MafiaBilliardTricks.GameVars.scaleX, 340, "texture_atlas_1", this.onClickScrollButton, this);
            this.scrollButtonRight.setFrames("button_arrow_on.png", "button_arrow_off.png", "button_arrow_on.png");
            this.scrollButtonRight.anchor.set(.5);
            this.scrollButtonRight.name = MafiaBilliardTricks.GameConstants.RIGHT;
            if (this.rail.currentCharacter === 0) {
                this.scrollButtonLeft.visible = false;
            }
            else if (this.rail.currentCharacter === 7) {
                this.scrollButtonRight.visible = false;
            }
            this.rail.alpha = 0;
            this.aboutButton.alpha = 0;
            this.scrollButtonLeft.alpha = 0;
            this.scrollButtonRight.alpha = 0;
            this.game.add.tween(this.rail)
                .to({ alpha: 1 }, 700, Phaser.Easing.Cubic.Out, true, 0);
            this.game.add.tween(this.aboutButton)
                .to({ alpha: 1 }, 700, Phaser.Easing.Cubic.Out, true, 0);
            this.game.add.tween(this.scrollButtonLeft)
                .to({ alpha: 1 }, 700, Phaser.Easing.Cubic.Out, true, 0);
            this.game.add.tween(this.scrollButtonRight)
                .to({ alpha: 1 }, 700, Phaser.Easing.Cubic.Out, true, 0);
        }
        onUpBackground() {
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
            this.hideDialogueLayer();
        }
        onClickScrollButton(b) {
            this.scrollRail(b.name);
        }
        onAboutButtonClicked(b) {
            MafiaBilliardTricks.GameManager.enterCreditsState();
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
        }
        onLanguageButtonClicked(b) {
            MafiaBilliardTricks.GameManager.enterLanguageState();
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
        }
        onAudioButtonClicked(b) {
            MafiaBilliardTricks.AudioManager.switchAudioState();
            if (MafiaBilliardTricks.GameVars.gameData.muted) {
                MafiaBilliardTricks.GameManager.log("muting");
                MafiaBilliardTricks.AudioManager.stopSound("music_menu");
                b.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png", "button_audio_off_off.png");
            }
            else {
                MafiaBilliardTricks.GameManager.log("unmuting");
                MafiaBilliardTricks.AudioManager.playSound("click_btn");
                MafiaBilliardTricks.AudioManager.playSound("music_menu");
                b.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png", "button_audio_on_off.png");
            }
        }
    }
    MafiaBilliardTricks.LevelSelectionState = LevelSelectionState;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class Note extends Phaser.Group {
        constructor(game, characterId, animateIntro) {
            super(game, null, "character-container");
            this.characterId = characterId;
            this.animateIntro = animateIntro;
            const note = new Phaser.Image(this.game, 0, 0, "texture_atlas_2", "note.png");
            this.add(note);
            const imageName = (characterId === 0 ? "en_name_character_" + characterId + ".png" : "name_character_" + characterId + ".png");
            this.characterNameLabel = new Phaser.Image(this.game, 225, 75, "texture_atlas_1", imageName);
            this.characterNameLabel.anchor.set(0.5);
            this.add(this.characterNameLabel);
            if (this.animateIntro) {
                this.characterNameLabel.x -= MafiaBilliardTricks.GameConstants.GAME_WIDTH;
            }
            const characterDescriptionStr = MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["DESCRIPTION_CHARACTER_" + characterId];
            this.characterDescriptionLabel = new Phaser.Text(this.game, this.characterNameLabel.x, this.characterNameLabel.y + 60, characterDescriptionStr, { font: "25px american-typewriter-regular", fill: "#4C3528" });
            this.characterDescriptionLabel.anchor.set(0.5);
            this.add(MafiaBilliardTricks.Utils.resizeTextToFit(this.characterDescriptionLabel, note.width * .85));
            const levelJustWon = MafiaBilliardTricks.GameVars.lastLevelBeaten !== -1;
            this.levelContainerArray = [];
            for (let i = 0; i < 5; i++) {
                let levelContainer = new MafiaBilliardTricks.LevelContainer(this.game, 5 * this.characterId + i);
                levelContainer.position.set(60, 180 + i * 55);
                this.add(levelContainer);
                levelContainer.transitionInPlayButton(levelJustWon);
                if (this.animateIntro) {
                    levelContainer.x -= MafiaBilliardTricks.GameConstants.GAME_WIDTH;
                }
                this.levelContainerArray.push(levelContainer);
            }
            this.bossButton = new MafiaBilliardTricks.TButton(game, 213, 463, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language].FINAL_LESSON, "emptybtns/empty_btn_final_lesson_off.png", "emptybtns/empty_btn_final_lesson_on.png", "left", 60, this.onBossButtonClick, this);
            this.bossButton.alpha = 0.4;
            this.bossButton.scale.set(1, MafiaBilliardTricks.GameVars.correctionScale);
            this.add(this.bossButton);
            this.bossButton.inputEnabled = false;
            if (this.animateIntro) {
                this.bossButton.x -= MafiaBilliardTricks.GameConstants.GAME_WIDTH;
            }
            if (MafiaBilliardTricks.GameVars.gameData.bossesUnlocked[this.characterId] > 0) {
                let strikeOut = new Phaser.Image(this.game, this.bossButton.x - (this.bossButton.width / 2), this.bossButton.y, "texture_atlas_1", "tachon.png");
                strikeOut.anchor.set(0.0, 0.5);
                strikeOut.scale.x = this.bossButton.width / this.bossButton.width * 1.2;
                strikeOut.scale.y = 1.2;
                this.add(strikeOut);
                if (MafiaBilliardTricks.GameVars.lastBossBeaten === this.characterId) {
                    const strikeOutMask = new Phaser.Graphics(this.game, strikeOut.x, strikeOut.y - (strikeOut.height / 2));
                    strikeOutMask.beginFill(0xFFFFFF);
                    strikeOutMask.drawRect(0, 0, strikeOut.width, strikeOut.height);
                    this.add(strikeOutMask);
                    strikeOut.mask = strikeOutMask;
                    strikeOutMask.visible = true;
                    strikeOutMask.scale.x = 0.001;
                    this.game.add.tween(strikeOutMask.scale)
                        .to({ x: 1 }, 500, Phaser.Easing.Cubic.In, true, 500)
                        .onComplete.add(function () {
                        MafiaBilliardTricks.LevelSelectionState.currentInstance.scrollRail(MafiaBilliardTricks.GameConstants.RIGHT);
                    });
                    MafiaBilliardTricks.GameVars.bossToBeIntroducedInMenu = MafiaBilliardTricks.GameVars.lastBossBeaten + 1;
                    MafiaBilliardTricks.GameVars.lastBossBeaten = -1;
                }
            }
        }
        activateBossButton() {
            this.bossButton.inputEnabled = true;
            this.bossButton.alpha = 1.0;
            if (MafiaBilliardTricks.GameVars.gameData.bossesUnlocked[this.characterId] === 0) {
                const pulseTween = this.game.add.tween(this.bossButton.scale);
                pulseTween.to({ x: 1.05, y: .95 * MafiaBilliardTricks.GameVars.correctionScale }, 300, Phaser.Easing.Linear.None, false);
                pulseTween.to({ x: .95, y: 1.05 * MafiaBilliardTricks.GameVars.correctionScale }, 700, Phaser.Easing.Elastic.Out);
                pulseTween.loop();
                pulseTween.start();
            }
        }
        animate() {
            this.game.add.tween(this.characterDescriptionLabel)
                .to({ x: this.characterDescriptionLabel.x + MafiaBilliardTricks.GameConstants.GAME_WIDTH }, 750, Phaser.Easing.Linear.None, true, 200);
            this.game.add.tween(this.characterNameLabel)
                .to({ x: this.characterNameLabel.x + MafiaBilliardTricks.GameConstants.GAME_WIDTH }, 750, Phaser.Easing.Linear.None, true, 100);
            let delay = 250;
            for (let cc of this.levelContainerArray) {
                this.game.add.tween(cc)
                    .to({ x: cc.x + MafiaBilliardTricks.GameConstants.GAME_WIDTH }, 750, Phaser.Easing.Linear.None, true, delay);
                delay += 50;
            }
            this.animateIntro = false;
            this.game.add.tween(this.bossButton)
                .to({ x: this.bossButton.x + MafiaBilliardTricks.GameConstants.GAME_WIDTH }, 750, Phaser.Easing.Linear.None, true, 500);
        }
        onBossButtonClick() {
            MafiaBilliardTricks.AdHelper.showAd(() => {
                MafiaBilliardTricks.GameManager.enterBossLevel(this.characterId);
                MafiaBilliardTricks.AudioManager.playSound("click_btn");
            }, this);
        }
    }
    MafiaBilliardTricks.Note = Note;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class Rail extends Phaser.Group {
        constructor(game) {
            super(game, null, "rail");
            this.tweening = false;
            this.currentCharacter = 0;
            this.characterArray = [];
            for (let i = 0; i < 8; i++) {
                let characterBackground = new Phaser.Image(this.game, 0, 0, "texture_atlas_3", "bg_" + (i + 1) + ".png");
                characterBackground.anchor.set(0.5, 0.0);
                characterBackground.scale.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / characterBackground.width;
                characterBackground.scale.y = MafiaBilliardTricks.GameConstants.GAME_HEIGHT / characterBackground.height;
                characterBackground.x = i * MafiaBilliardTricks.GameConstants.GAME_WIDTH;
                this.add(characterBackground);
                let characterContainer = new MafiaBilliardTricks.CharacterContainer(this.game, i, this);
                characterContainer.x = i * MafiaBilliardTricks.GameConstants.GAME_WIDTH;
                if (i !== 0) {
                    characterContainer.alpha = 0;
                }
                this.add(characterContainer);
                this.characterArray.push(characterContainer);
                this.bringToTop(characterContainer);
                this.sendToBack(characterBackground);
            }
        }
        update() {
            super.update();
            if (this.tweening) {
                this.refreshBossPage();
            }
        }
        teleport(characterId) {
            if (characterId < 0 || characterId > 7) {
                MafiaBilliardTricks.GameManager.log("error or no level set yet");
                characterId = 0;
            }
            MafiaBilliardTricks.GameManager.log("teleporting to boss page: " + characterId.toString());
            this.currentCharacter = characterId;
            this.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH * -this.currentCharacter;
            this.refreshBossPage();
        }
        scroll(direction) {
            if (this.tweening || (this.currentCharacter >= 7 && direction === MafiaBilliardTricks.GameConstants.RIGHT)) {
                return;
            }
            this.tweening = true;
            let px;
            if (direction === MafiaBilliardTricks.GameConstants.LEFT) {
                px = this.x + MafiaBilliardTricks.GameConstants.GAME_WIDTH;
                this.currentCharacter--;
            }
            else {
                px = this.x - MafiaBilliardTricks.GameConstants.GAME_WIDTH;
                this.currentCharacter++;
            }
            const characterContainer = this.characterArray[this.currentCharacter];
            characterContainer.animate();
            this.game.add.tween(this)
                .to({ x: px }, 650, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.tweening = false;
            }, this);
        }
        refreshBossPage() {
            for (let i = 0; i < this.characterArray.length; i++) {
                const characterContainer = this.characterArray[i];
                if (i === this.currentCharacter) {
                    this.game.add.tween(characterContainer)
                        .to({ alpha: 1.0 }, 250, Phaser.Easing.Cubic.Out, true);
                    characterContainer.visible = true;
                }
                else {
                    this.game.add.tween(characterContainer)
                        .to({ alpha: 0.0 }, 250, Phaser.Easing.Cubic.Out, true);
                }
            }
        }
    }
    MafiaBilliardTricks.Rail = Rail;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class CueContainer extends Phaser.Group {
        constructor(game) {
            super(game, null, "cue-container");
            CueContainer.currentInstance = this;
            this.fineDialAngleOffset = 180;
            this.settingPower = false;
            this.angle = 180;
            this.lastTapPointer = null;
            this.doReorientCueToTapLocation = false;
            this.shooting = false;
            this.down_px = 0;
            this.down_py = 0;
            this.impulseFactor = 0;
            this.aimDirectionVector = new Billiard.Vector2D(1, 0);
            this.startAim = false;
            this.downTimer = 0;
            this.downTimerActive = false;
            this.downTimerFuseDuration = 10;
            this.touchHeldDown = false;
            this.doLockControlsToGuide = false;
            this.desiredAngle = 0;
            this.cue = new Phaser.Image(this.game, 0, 0, "texture_atlas_1", "cue.png");
            this.cue.anchor.y = .5;
            this.add(this.cue);
            if (this.game.device.touch) {
                this.game.input.onUp.add(this.onTapScreen, this);
            }
            else {
                this.game.input.onDown.add(this.onMouseDown, this);
                this.game.input.onUp.add(this.onMouseUp, this);
            }
            this.cue.visible = false;
        }
        update() {
            if (this.downTimerActive) {
                this.downTimer++;
            }
            if (MafiaBilliardTricks.GameVars.skipNextScreenTap || !this.cue.visible || this.shooting ||
                MafiaBilliardTricks.SpinCircleLayer.currentInstance || MafiaBilliardTricks.PauseLayer.currentInstance ||
                MafiaBilliardTricks.GameVars.paused || MafiaBilliardTricks.GameVars.draggingCueBall || MafiaBilliardTricks.GameVars.selectingPocket || MafiaBilliardTricks.GUI.overGuiItem) {
                this.lastTapPointer = null;
                return;
            }
            if (MafiaBilliardTricks.GameVars.bossMatchActive && MafiaBilliardTricks.MatchManagerBoss.activePlayer.name === MafiaBilliardTricks.GameConstants.BOT) {
                return;
            }
            const cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            if (this.game.device.touch) {
                if (this.doLockControlsToGuide && MafiaBilliardTricks.StageContainer.currentInstance.guideContainer.desiredAngleAchieved) {
                    return;
                }
                if (this.doReorientCueToTapLocation) {
                    this.doReorientCueToTapLocation = false;
                    if (!this.lastTapPointer) {
                        return;
                    }
                    this.reorientCueToTapLocation();
                    this.lastTapPointer = null;
                }
                else if (this.settingPower) {
                    this.cue.x = this.impulseFactor * CueContainer.MAX_DELTA_CUE;
                    if (MafiaBilliardTricks.GameVars.bossMatchActive && cueBall.handIcon) {
                        cueBall.handIcon.visible = false;
                    }
                }
                else {
                    if (this.game.input.activePointer.isDown && !this.settingPower) {
                        if (this.game.input.activePointer.duration > 300) {
                            this.touchHeldDown = true;
                        }
                        if (MafiaBilliardTricks.FineDial.wasDown || MafiaBilliardTricks.FineDial.isDown) {
                            this.touchHeldDown = false;
                            if (MafiaBilliardTricks.FineDial.isDown) {
                                this.angle = this.fineDialAngleOffset + MafiaBilliardTricks.FineDial.deltaY * MafiaBilliardTricks.GameConstants.FINE_DIAL_SENSITIVITY;
                                this.aimDirectionVector = this.getAimDirection();
                            }
                        }
                        else if (this.startAim) {
                            const dx = (this.game.input.activePointer.x - this.parent.x) / MafiaBilliardTricks.GameVars.scaleX - cueBall.mc.x;
                            const dy = this.game.input.activePointer.y - this.parent.y - cueBall.mc.y;
                            let pointerAngle = 180 / Math.PI * Math.atan2(dy, dx);
                            let deltaAngle = Billiard.Maths.angleDiff(pointerAngle, this.startAng);
                            this.angle = this.startCue + deltaAngle;
                            this.aimDirectionVector = this.getAimDirection();
                        }
                        else {
                            this.startCue = this.angle;
                            const dx = (this.game.input.activePointer.x - this.parent.x) / MafiaBilliardTricks.GameVars.scaleX - cueBall.mc.x;
                            const dy = this.game.input.activePointer.y - this.parent.y - cueBall.mc.y;
                            this.startAng = 180 / Math.PI * Math.atan2(dy, dx);
                            this.startAim = true;
                        }
                    }
                    else {
                        this.startAim = false;
                    }
                }
            }
            else {
                if (this.settingPower && !(this.doLockControlsToGuide && !MafiaBilliardTricks.StageContainer.currentInstance.guideContainer.desiredAngleAchieved)) {
                    if (MafiaBilliardTricks.GameVars.bossMatchActive && cueBall.handIcon) {
                        cueBall.handIcon.visible = false;
                    }
                    const x = this.down_px - this.game.input.activePointer.x;
                    const y = this.down_py - this.game.input.activePointer.y;
                    const transf_x = x * Math.cos(this.rotation) + y * Math.sin(this.rotation);
                    this.impulseFactor = -Phaser.Math.clamp(transf_x, -CueContainer.MAX_DELTA_CUE, 0) / CueContainer.MAX_DELTA_CUE;
                    this.cue.x = this.impulseFactor * CueContainer.MAX_DELTA_CUE;
                }
                else {
                    let cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
                    const dx = cueBall.mc.x - this.game.input.activePointer.x + this.parent.x;
                    const dy = cueBall.mc.y - this.game.input.activePointer.y + this.parent.y;
                    if (this.doLockControlsToGuide) {
                        let projectedRot = 90 - Billiard.Maths.findBearing(dy, dx);
                        let withinSnapRange = this.angleWithinSnapRange(projectedRot);
                        if (!MafiaBilliardTricks.StageContainer.currentInstance.guideContainer.desiredAngleAchieved) {
                            if (withinSnapRange) {
                                this.rotation = Billiard.Maths.PI_DIV_180 * (this.desiredAngle + 180);
                                this.aimDirectionVector = this.getAimDirection();
                            }
                            else {
                                this.rotation = Math.atan2(dy, dx);
                                this.aimDirectionVector = this.getAimDirection();
                            }
                        }
                        else if (!withinSnapRange) {
                            this.rotation = Math.atan2(dy, dx);
                            this.aimDirectionVector = this.getAimDirection();
                        }
                    }
                    else {
                        this.rotation = Math.atan2(dy, dx);
                        this.aimDirectionVector = this.getAimDirection();
                    }
                }
            }
        }
        rotateCueAt(rot) {
            let difference = this.rotation - rot;
            let times = Math.floor((difference - (-Math.PI)) / (Math.PI * 2));
            let shortAngle = (difference - (times * (Math.PI * 2))) * -1;
            let newAngle = this.rotation + shortAngle;
            let cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            let rand = Math.random() * 600 + 300;
            this.position.x = cueBall.mc.x;
            this.position.y = cueBall.mc.y;
            this.game.add.tween(this)
                .to({ rotation: newAngle }, rand, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.aimDirectionVector = this.getAimDirection(newAngle);
            }, this);
            return true;
        }
        botShoot(shotData) {
            this.aimDirectionVector = this.getAimDirection();
            this.shooting = true;
            MafiaBilliardTricks.MatchManagerBoss.alphaSelectPocket();
            const vel = new Billiard.Vector2D(shotData.velocity.x, shotData.velocity.y);
            const velN = vel.normalize();
            const rot = Math.atan2(velN.y, velN.x) + (180 * (Math.PI / 180));
            MafiaBilliardTricks.GameManager.log("real aiming");
            if (this.rotateCueAt(rot)) {
                const deltaScrew = this.aimDirectionVector.times(vel.magnitude * shotData.screw * shotData.verticalSpin);
                this.game.add.tween(this.cue).to({ x: 100 }, 400, Phaser.Easing.Cubic.Out, true, 500)
                    .onComplete.add(function () {
                    let dot = this.aimDirectionVector.dot(velN);
                    if (dot < .9) {
                        MafiaBilliardTricks.GameManager.log("BOT CUE AIM BUG FOUND!");
                    }
                    this.game.add.tween(this.cue)
                        .to({ x: -5 }, 200, Phaser.Easing.Cubic.Out, true, 1000)
                        .onComplete.add(function () {
                        this.applyReceivedImpulse(vel, deltaScrew, shotData.english);
                    }, this);
                }, this);
                return true;
            }
            else {
                return false;
            }
        }
        startGame() {
            this.showCue();
        }
        applyReceivedImpulse(velocity, deltaScrew, english) {
            const cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            cueBall.velocity = velocity;
            cueBall.deltaScrew = deltaScrew;
            cueBall.english = english;
            MafiaBilliardTricks.MatchManagerBoss.ballHasBeenShot();
        }
        applyImpulse() {
            const cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                cueBall.hideHandIcon();
            }
            cueBall.velocity = this.aimDirectionVector.times(this.impulseFactor * CueContainer.MAX_IMPULSE);
            let screw;
            if (MafiaBilliardTricks.GameVars.verticalSpin > 0) {
                screw = .035;
            }
            else if (MafiaBilliardTricks.GameVars.verticalSpin < 0) {
                screw = .0425;
            }
            else {
                screw = 0;
            }
            cueBall.deltaScrew = this.aimDirectionVector.times(cueBall.velocity.magnitude * screw * MafiaBilliardTricks.GameVars.verticalSpin);
            cueBall.english = MafiaBilliardTricks.GameVars.english;
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                MafiaBilliardTricks.MatchManagerBoss.ballHasBeenShot();
            }
            else {
                MafiaBilliardTricks.MatchManager.ballHasBeenShot();
            }
        }
        showCue() {
            if (this.cueVisibilityTween) {
                this.shooting = false;
                this.cueVisibilityTween.pendingDelete = true;
            }
            this.cue.visible = true;
            this.cue.alpha = 1;
            this.cue.x = 0;
            const cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            this.position.x = cueBall.mc.x;
            this.position.y = cueBall.mc.y;
        }
        hideCue(noTween) {
            if (noTween) {
                this.cue.visible = false;
                this.shooting = false;
            }
            else {
                this.cueVisibilityTween = this.game.add.tween(this.cue)
                    .to({ x: 0, alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true, 300);
                this.cueVisibilityTween.onComplete.add(function () {
                    this.cue.visible = false;
                    this.shooting = false;
                }, this);
            }
        }
        swapCueBall() {
            const cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            this.position.x = cueBall.mc.x;
            this.position.y = cueBall.mc.y;
        }
        shoot(pointer) {
            this.settingPower = false;
            if (!this.cue.visible || MafiaBilliardTricks.SpinCircleLayer.currentInstance || MafiaBilliardTricks.GameVars.shotRunning || MafiaBilliardTricks.GameVars.paused || MafiaBilliardTricks.GameVars.draggingCueBall) {
                this.impulseFactor = 0;
                return;
            }
            if (this.impulseFactor > 0) {
                MafiaBilliardTricks.MatchManagerBoss.alphaSelectPocket();
                this.shooting = true;
                if (this.doLockControlsToGuide) {
                    this.doLockControlsToGuide = false;
                }
                this.game.add.tween(this.cue)
                    .to({ x: -5 }, 75, Phaser.Easing.Cubic.Out, true)
                    .onComplete.add(function () {
                    this.applyImpulse();
                    this.impulseFactor = 0;
                    this.settingPower = false;
                }, this);
            }
            else {
                const cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
                if (MafiaBilliardTricks.GameVars.bossMatchActive && cueBall.handIcon) {
                    cueBall.handIcon.visible = true;
                }
                this.impulseFactor = 0;
                this.settingPower = false;
                this.shooting = false;
            }
        }
        setDesiredAngle(angle) {
            this.doLockControlsToGuide = true;
            this.desiredAngle = angle;
        }
        getAimDirection(rotation) {
            if (!rotation) {
                rotation = this.rotation;
            }
            return new Billiard.Vector2D(-Math.cos(rotation), -Math.sin(rotation));
        }
        aimHelper() {
            if (this.game.device.desktop || (MafiaBilliardTricks.GameVars.bossMatchActive && MafiaBilliardTricks.MatchManagerBoss.activePlayer.name === MafiaBilliardTricks.GameConstants.BOT)) {
                return;
            }
            let cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            let viableBalls = [];
            for (let i = 0; i < MafiaBilliardTricks.GameVars.ballArray.length; i++) {
                const ball = MafiaBilliardTricks.GameVars.ballArray[i];
                if (ball.id === 0 || !ball.active) {
                    continue;
                }
                if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                    if (MafiaBilliardTricks.MatchManagerBoss.IsBallInvalidForCurrentPlayer(ball.id)) {
                        continue;
                    }
                }
                else {
                    if (MafiaBilliardTricks.MatchManager.isBallInvalidForCurrentPlayer(ball.id)) {
                        continue;
                    }
                }
                if (!this.clearLineOfSight(cueBall.position, ball.position)) {
                    continue;
                }
                viableBalls.push(ball);
            }
            if (viableBalls.length < 1) {
                return;
            }
            viableBalls = this.sortAndPruneViableBalls(viableBalls);
            const dxFinal = viableBalls[0].position.x - cueBall.position.x;
            const dyFinal = viableBalls[0].position.y - cueBall.position.y;
            let angle = Math.atan2(dyFinal, dxFinal) * 180 / Math.PI + 180;
            if (Math.abs(this.angle - angle) > 180) {
                angle -= 360;
            }
            this.angle = angle + -.15 + .3 * Math.random();
            this.aimDirectionVector = this.getAimDirection();
        }
        sortAndPruneViableBalls(viableBalls) {
            let list = [];
            for (let i = 0; i < viableBalls.length; i++) {
                let ball = viableBalls[i];
                let b1Closest = Number.MAX_VALUE;
                let pocketIndex = -1;
                for (let j = 0; j < MafiaBilliardTricks.GameVars.pocketArray.length; j++) {
                    const b1XDiff = ball.position.x - MafiaBilliardTricks.GameVars.pocketArray[j].position.x;
                    const b1YDiff = ball.position.y - MafiaBilliardTricks.GameVars.pocketArray[j].position.y;
                    const b1Dist = b1XDiff * b1XDiff + b1YDiff * b1YDiff;
                    if (b1Dist < b1Closest) {
                        b1Closest = b1Dist;
                        pocketIndex = j;
                    }
                }
                list.push({ index: i, distance: b1Closest, pocketIndex: pocketIndex });
            }
            list = list.sort((n1, n2) => n1.distance - n2.distance);
            let answer = [];
            let culledBalls = [];
            for (let i = 0; i < list.length; i++) {
                const ballIndex = list[i].index;
                const pocketIndex = list[i].pocketIndex;
                const ball = viableBalls[ballIndex];
                const pocket = MafiaBilliardTricks.GameVars.pocketArray[pocketIndex];
                if (!this.clearLineOfSight(ball.position, pocket.position, ball.position)) {
                    culledBalls.push(viableBalls[ballIndex]);
                    continue;
                }
                else {
                    answer.push(viableBalls[ballIndex]);
                }
            }
            return answer.length > 0 ? answer : culledBalls;
        }
        clearLineOfSight(start, target, excludeBallPos) {
            if (!excludeBallPos) {
                excludeBallPos = target;
            }
            let c = new Billiard.Point(start.x, start.y);
            let p = new Billiard.Point(target.x, target.y);
            let g = 2 * MafiaBilliardTricks.GameConstants.BALL_RADIUS;
            for (let i = 0; i < MafiaBilliardTricks.GameVars.ballArray.length; i++) {
                const ball = MafiaBilliardTricks.GameVars.ballArray[i];
                if (ball.id === 0 || ball.position === excludeBallPos || !ball.active) {
                    continue;
                }
                let u = new Billiard.Point(ball.position.x, ball.position.y);
                var h = Billiard.Maths.lineIntersectCircle(c, p, u, g);
                if (h.intersects) {
                    return false;
                }
            }
            return true;
        }
        angleWithinSnapRange(currentAngle) {
            if (Math.abs(currentAngle - (180 + this.desiredAngle)) < 2) {
                return true;
            }
            else {
                return false;
            }
        }
        cancelShot() {
            this.cue.x = 0;
            this.settingPower = false;
            this.impulseFactor = 0;
            this.shooting = false;
        }
        onMouseUp(pointer) {
            if (!this.game.input.activePointer.withinGame) {
                return;
            }
            else {
                this.mousePressed = false;
            }
            this.downTimerActive = false;
            if (this.downTimer < this.downTimerFuseDuration) {
                this.downTimer = 0;
                this.cancelShot();
                return;
            }
            this.downTimer = 0;
            this.shoot(pointer);
        }
        onMouseDown(pointer) {
            if (!this.cue.visible || MafiaBilliardTricks.GameVars.shotRunning || MafiaBilliardTricks.SpinCircleLayer.currentInstance || MafiaBilliardTricks.GameVars.draggingCueBall
                || MafiaBilliardTricks.GUI.overGuiItem) {
                return;
            }
            if (this.game.input.activePointer.withinGame) {
                if (this.mousePressed) {
                    return;
                }
                else {
                    this.mousePressed = true;
                }
            }
            this.settingPower = true;
            this.downTimerActive = true;
            this.down_px = this.game.input.activePointer.x;
            this.down_py = this.game.input.activePointer.y;
        }
        onTapScreen(pointer) {
            if (MafiaBilliardTricks.GameVars.skipNextScreenTap || this.doReorientCueToTapLocation || MafiaBilliardTricks.FineDial.isDown || MafiaBilliardTricks.FineDial.wasDown ||
                this.settingPower || !this.cue.visible || this.shooting ||
                MafiaBilliardTricks.SpinCircleLayer.currentInstance || MafiaBilliardTricks.PauseLayer.currentInstance ||
                MafiaBilliardTricks.GameVars.paused || MafiaBilliardTricks.GameVars.draggingCueBall || MafiaBilliardTricks.GameVars.selectingPocket || MafiaBilliardTricks.GUI.overGuiItem) {
                MafiaBilliardTricks.GameVars.skipNextScreenTap = false;
                return;
            }
            this.doReorientCueToTapLocation = true;
            this.lastTapPointer = pointer;
        }
        reorientCueToTapLocation() {
            if (this.game.scale.compatibility.supportsFullScreen && !(this.game.device.iOS && this.game.device.mobileSafari)) {
                this.game.scale.startFullScreen();
            }
            if (this.lastTapPointer && !this.lastTapPointer.withinGame) {
                return;
            }
            if (MafiaBilliardTricks.GameVars.shotRunning || MafiaBilliardTricks.GUI.overGuiItem ||
                this.settingPower || MafiaBilliardTricks.SpinCircleLayer.currentInstance ||
                MafiaBilliardTricks.GameVars.paused ||
                MafiaBilliardTricks.GameVars.draggingCueBall || (MafiaBilliardTricks.GameVars.bossMatchActive && MafiaBilliardTricks.MatchManagerBoss.activePlayer.name === MafiaBilliardTricks.GameConstants.BOT) ||
                MafiaBilliardTricks.PauseLayer.currentInstance) {
                return;
            }
            if (this.touchHeldDown) {
                this.touchHeldDown = false;
                return;
            }
            if (MafiaBilliardTricks.FineDial.isDown || MafiaBilliardTricks.FineDial.wasDown) {
                return;
            }
            else {
                let cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
                let px = (this.lastTapPointer.x - this.parent.x) / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameConstants.PHYS_SCALE / MafiaBilliardTricks.GameVars.correctionScale;
                let py = (this.lastTapPointer.y - this.parent.y) / MafiaBilliardTricks.GameConstants.PHYS_SCALE / MafiaBilliardTricks.GameVars.correctionScale;
                let dx;
                let dy;
                for (let i = 0; i < MafiaBilliardTricks.GameVars.ballArray.length; i++) {
                    let ball = MafiaBilliardTricks.GameVars.ballArray[i];
                    if (ball.id !== 0) {
                        dx = ball.position.x - px;
                        dy = ball.position.y - py;
                        let d = Math.sqrt(dx * dx + dy * dy);
                        if (d < 2.5 * MafiaBilliardTricks.GameConstants.BALL_RADIUS) {
                            px = ball.position.x;
                            py = ball.position.y;
                            break;
                        }
                    }
                }
                dx = px - cueBall.position.x;
                dy = py - cueBall.position.y;
                let angle = Math.atan2(dy, dx) * 180 / Math.PI + 180;
                angle += -.15 + .3 * Math.random();
                if (Math.abs(this.angle - angle) > 180) {
                    angle -= 360;
                }
                this.game.add.tween(this)
                    .to({ angle: angle }, 180, Phaser.Easing.Cubic.Out, true)
                    .onUpdateCallback(function () {
                    this.aimDirectionVector = this.getAimDirection();
                }, this);
            }
        }
    }
    CueContainer.MAX_IMPULSE = 1900;
    CueContainer.MAX_DELTA_CUE = 150;
    MafiaBilliardTricks.CueContainer = CueContainer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class DebugObjectsContainer extends Phaser.Group {
        constructor(game) {
            super(game, null, "debug-objects-container");
            this.graphics = new Phaser.Graphics(this.game);
            this.add(this.graphics);
            this.cueBallGraphics = new Phaser.Graphics(this.game);
            this.add(this.cueBallGraphics);
        }
        drawCircle(p, radius, color) {
            this.graphics.lineStyle(1, color);
            this.graphics.drawCircle(p.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, p.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE, 2 * radius * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
        }
        clearCueBallGraphics() {
            this.cueBallGraphics.clear();
        }
        drawCueBallTrajectoryPoint(p, color) {
            this.cueBallGraphics.lineStyle(1, color, 1);
            this.cueBallGraphics.beginFill(color, 1);
            this.cueBallGraphics.drawCircle(p.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, p.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE, 5);
            this.cueBallGraphics.endFill();
        }
        drawPoint(p, color) {
            this.graphics.lineStyle(1, color, 1);
            this.graphics.beginFill(color, 1);
            this.graphics.drawCircle(p.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, p.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE, 5);
            this.graphics.endFill();
        }
        drawLine(p1, p2, color) {
            this.graphics.lineStyle(1, color, 1);
            this.graphics.moveTo(p1.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, p1.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
            this.graphics.lineTo(p2.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, p2.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
        }
    }
    DebugObjectsContainer.WHITE = 0xFFFFFF;
    DebugObjectsContainer.RED = 0xFF0000;
    DebugObjectsContainer.GREEN = 0x00FF00;
    DebugObjectsContainer.BLUE = 0x0000FF;
    DebugObjectsContainer.YELLOW = 0xFFFF00;
    DebugObjectsContainer.LILAC = 0xC8A2C8;
    DebugObjectsContainer.ORANGE = 0xFFA500;
    DebugObjectsContainer.MAROON = 0x800000;
    MafiaBilliardTricks.DebugObjectsContainer = DebugObjectsContainer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class GuideContainer extends Phaser.Group {
        constructor(game) {
            super(game, null, "guide-container");
            this.guide = new Phaser.Graphics(this.game);
            this.add(this.guide);
            this.guideWidth = 3.5;
            this.guideAlpha = .65;
            this.desiredAngleGuideLeft = new Phaser.Graphics(this.game);
            this.add(this.desiredAngleGuideLeft);
            this.desiredAngleGuideRight = new Phaser.Graphics(this.game);
            this.add(this.desiredAngleGuideRight);
            this.doCheckDesiredAngle = false;
            this.doRefreshDesiredAngleGuide = false;
            this.desiredAngleAchieved = false;
            this.desiredAngle = 0;
            this.alpha = 0;
            this.game.add.tween(this)
                .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true);
        }
        update() {
            super.update();
            if (MafiaBilliardTricks.GameVars.shotRunning) {
                return;
            }
            if (!MafiaBilliardTricks.GameVars.ballArray) {
                return;
            }
            this.guide.lineStyle(this.guideWidth, 0xFFFFFF, this.guideAlpha);
            let cueBallPos = MafiaBilliardTricks.GameVars.ballArray[0].position;
            const aimDir = MafiaBilliardTricks.CueContainer.currentInstance.getAimDirection();
            let distantPoint = cueBallPos.plus(aimDir.times(5e5));
            let intersectedBalls = [];
            let intersectionPoints = [];
            let n = false;
            let guideLineColour = 0xFFFFFF;
            let guideTipCircleColor = 0xFFFFFF;
            if (this.doCheckDesiredAngle) {
                this.checkDesiredAngle();
                if (!this.desiredAngleAchieved) {
                    guideLineColour = 0xFF0000;
                    guideTipCircleColor = 0xFF0000;
                }
            }
            for (let i = 0, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                let ball = MafiaBilliardTricks.GameVars.ballArray[i];
                if (ball.active && i !== 0) {
                    let c = new Billiard.Point(cueBallPos.x, cueBallPos.y);
                    let p = new Billiard.Point(distantPoint.x, distantPoint.y);
                    let u = new Billiard.Point(ball.position.x, ball.position.y);
                    let g = 2 * MafiaBilliardTricks.GameConstants.BALL_RADIUS;
                    var h = Billiard.Maths.lineIntersectCircle(c, p, u, g);
                    if (h.intersects) {
                        intersectedBalls.push(ball);
                        if (h.enter !== null) {
                            intersectionPoints.push(h.enter);
                        }
                        else {
                            intersectionPoints.push(new Billiard.Point(cueBallPos.x, cueBallPos.y));
                            n = true;
                        }
                    }
                }
            }
            let touchedBall;
            let circleCenter = null;
            let startPoint = new Billiard.Point(cueBallPos.x, cueBallPos.y);
            let endPoint = new Billiard.Point(distantPoint.x, distantPoint.y);
            const isCornerCase = this.checkForCornerCase(startPoint);
            const invalidGuide = (isCornerCase && this.doCancelIntersection(startPoint, endPoint, aimDir));
            if (intersectedBalls.length > 0) {
                if (invalidGuide) {
                    return;
                }
                let minSquaredDistance = 1e10;
                for (let i = 0, ln = intersectedBalls.length; i < ln; i++) {
                    let squaredDistance = (intersectedBalls[i].position.x - cueBallPos.x) * (intersectedBalls[i].position.x - cueBallPos.x) + (intersectedBalls[i].position.y - cueBallPos.y) * (intersectedBalls[i].position.y - cueBallPos.y);
                    if (squaredDistance < minSquaredDistance) {
                        minSquaredDistance = squaredDistance;
                        touchedBall = intersectedBalls[i];
                        circleCenter = intersectionPoints[i];
                    }
                }
                if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                    if (MafiaBilliardTricks.MatchManagerBoss.IsBallInvalidForCurrentPlayer(touchedBall.id)) {
                        guideTipCircleColor = 0xFF0000;
                    }
                }
                else {
                    if (MafiaBilliardTricks.MatchManager.isBallInvalidForCurrentPlayer(touchedBall.id)) {
                        guideTipCircleColor = 0xFF0000;
                    }
                }
                this.guide.clear();
                this.guide.lineStyle(this.guideWidth, guideLineColour, this.guideAlpha);
                const DEBUG_MULTIPLIER = MafiaBilliardTricks.GameConstants.LEVEL_EDITION ? 100 : 1;
                let w = Billiard.Maths.findBearing(circleCenter.x - cueBallPos.x, circleCenter.y - cueBallPos.y);
                let b = Billiard.Maths.findBearing(touchedBall.position.x - circleCenter.x, touchedBall.position.y - circleCenter.y);
                let P = Math.abs(Billiard.Maths.angleDiff(b, w));
                let x = 5 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * ((90 - P) / 90);
                let touchedBallLineEnd = new Billiard.Point(touchedBall.position.x + Math.cos(b * Math.PI / 180) * x * DEBUG_MULTIPLIER, touchedBall.position.y + Math.sin(b * Math.PI / 180) * x * DEBUG_MULTIPLIER);
                this.guide.moveTo(cueBallPos.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, cueBallPos.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
                this.guide.lineTo(circleCenter.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, circleCenter.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
                this.guide.lineStyle(this.guideWidth, guideTipCircleColor, this.guideAlpha);
                this.guide.drawCircle(circleCenter.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, circleCenter.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE, 2 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
                this.guide.lineStyle(this.guideWidth, guideLineColour, this.guideAlpha);
                this.guide.moveTo(touchedBall.position.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, touchedBall.position.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
                let deflectionDirection = new Phaser.Point(touchedBallLineEnd.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, touchedBallLineEnd.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
                this.guide.lineTo(deflectionDirection.x, deflectionDirection.y);
                if (!n) {
                    let C = Billiard.Maths.findBearing(circleCenter.x - cueBallPos.x, circleCenter.y - cueBallPos.y);
                    let T = Billiard.Maths.findBearing(touchedBallLineEnd.x - circleCenter.x, touchedBallLineEnd.y - circleCenter.y);
                    let P = Billiard.Maths.angleDiff(T, C);
                    let x = 5 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * P / 90;
                    let E = T - 90;
                    let M = new Billiard.Point(circleCenter.x + x * Math.cos(E * Math.PI / 180) * DEBUG_MULTIPLIER, circleCenter.y + x * Math.sin(E * Math.PI / 180) * DEBUG_MULTIPLIER);
                    this.guide.moveTo(circleCenter.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, circleCenter.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
                    this.guide.lineTo(M.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, M.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
                }
            }
            else {
                const cushionVertsToUse = isCornerCase ? MafiaBilliardTricks.StageContainer.CORNER_CASE_CUSHION_VERTEXES : MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES;
                for (let i = 0; i < 4; i++) {
                    let intersection = Billiard.Maths.lineIntersectLine(startPoint, endPoint, cushionVertsToUse[i], cushionVertsToUse[i + 1]);
                    if (intersection !== null) {
                        circleCenter = intersection;
                        if (invalidGuide) {
                            circleCenter = null;
                        }
                    }
                }
                if (circleCenter !== null) {
                    this.guide.clear();
                    this.guide.lineStyle(this.guideWidth, guideLineColour, this.guideAlpha);
                    this.guide.moveTo(cueBallPos.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, cueBallPos.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
                    this.guide.lineTo(circleCenter.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, circleCenter.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
                    this.guide.drawCircle(circleCenter.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, circleCenter.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE, 2 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
                }
                else {
                    this.guide.clear();
                    return;
                }
            }
        }
        setDesiredAngle(desiredAngle) {
            this.doCheckDesiredAngle = true;
            this.doRefreshDesiredAngleGuide = true;
            this.desiredAngle = desiredAngle;
            this.setupDesiredAngleGuide();
        }
        disableDesiredAngleGuide() {
            if (this.desiredAngleGuideRight) {
                this.desiredAngleGuideRight.clear();
            }
            if (this.desiredAngleGuideLeft) {
                this.desiredAngleGuideLeft.clear();
            }
            if (this.doCheckDesiredAngle) {
                this.doCheckDesiredAngle = false;
            }
        }
        checkForCornerCase(startPoint) {
            return startPoint.y < MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[0].y ||
                startPoint.x > MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[2].x ||
                startPoint.y > MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[2].y ||
                startPoint.x < MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[0].x;
        }
        doCancelIntersection(start, end, direction) {
            const perp = new Billiard.Vector2D(direction.y, -direction.x);
            const startAsVec = new Billiard.Vector2D(start.x, start.y);
            const endAsVec = new Billiard.Vector2D(end.x, end.y);
            const startTangentLeft = startAsVec.plus(perp.times(MafiaBilliardTricks.GameConstants.BALL_RADIUS));
            const startTangentRight = startAsVec.minus(perp.times(MafiaBilliardTricks.GameConstants.BALL_RADIUS));
            const endTangentLeft = endAsVec.plus(perp.times(MafiaBilliardTricks.GameConstants.BALL_RADIUS));
            const endTangentRight = endAsVec.minus(perp.times(MafiaBilliardTricks.GameConstants.BALL_RADIUS));
            let tooHigh = start.y < MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[0].y;
            let tooRight = start.x > MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[2].x;
            let tooLeft = start.y > MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[2].y;
            let tooLow = start.x < MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[0].x;
            let linesToTestAgainst = [];
            if (tooHigh) {
                linesToTestAgainst.push(0, 2, 3, 5);
            }
            if (tooRight) {
                linesToTestAgainst.push(6, 8);
            }
            if (tooLeft) {
                linesToTestAgainst.push(9, 11, 12, 14);
            }
            if (tooLow) {
                linesToTestAgainst.push(15, 17);
            }
            for (let j = 0; j < linesToTestAgainst.length; j++) {
                const indexOnLineArray = linesToTestAgainst[j];
                let tangentIntersectionLeft = Billiard.Maths.lineIntersectLine(new Phaser.Point(startTangentLeft.x, startTangentLeft.y), new Phaser.Point(endTangentLeft.x, endTangentLeft.y), new Phaser.Point(MafiaBilliardTricks.GameVars.lineArray[indexOnLineArray].p1.x, MafiaBilliardTricks.GameVars.lineArray[indexOnLineArray].p1.y), new Phaser.Point(MafiaBilliardTricks.GameVars.lineArray[indexOnLineArray].p2.x, MafiaBilliardTricks.GameVars.lineArray[indexOnLineArray].p2.y));
                if (tangentIntersectionLeft !== null) {
                    return true;
                }
                let tangentIntersectionRight = Billiard.Maths.lineIntersectLine(new Phaser.Point(startTangentRight.x, startTangentRight.y), new Phaser.Point(endTangentRight.x, endTangentRight.y), new Phaser.Point(MafiaBilliardTricks.GameVars.lineArray[indexOnLineArray].p1.x, MafiaBilliardTricks.GameVars.lineArray[indexOnLineArray].p1.y), new Phaser.Point(MafiaBilliardTricks.GameVars.lineArray[indexOnLineArray].p2.x, MafiaBilliardTricks.GameVars.lineArray[indexOnLineArray].p2.y));
                if (tangentIntersectionRight !== null) {
                    return true;
                }
            }
            return false;
        }
        checkDesiredAngle() {
            let w = Billiard.Maths.findBearing(MafiaBilliardTricks.CueContainer.currentInstance.getAimDirection().x, MafiaBilliardTricks.CueContainer.currentInstance.getAimDirection().y);
            if (w < this.desiredAngle - MafiaBilliardTricks.GameConstants.DESIRED_PATH_ERROR_MAX || w > this.desiredAngle + MafiaBilliardTricks.GameConstants.DESIRED_PATH_ERROR_MAX) {
                if (this.desiredAngleAchieved) {
                    this.desiredAngleAchieved = false;
                    this.doRefreshDesiredAngleGuide = true;
                }
            }
            else {
                if (!this.desiredAngleAchieved) {
                    this.desiredAngleAchieved = true;
                    this.doRefreshDesiredAngleGuide = true;
                }
            }
            if (this.doRefreshDesiredAngleGuide) {
                this.setupDesiredAngleGuide();
            }
        }
        createDottedLine(lineGraphic, start, direction, guideLineColour) {
            let distantPoint = start.plus(new Billiard.Vector2D(direction.x, direction.y).times(5e5));
            let intersectedBalls = [];
            let intersectionPoints = [];
            let n = false;
            for (let i = 0, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                let ball = MafiaBilliardTricks.GameVars.ballArray[i];
                if (ball.active && i !== 0) {
                    let c = new Billiard.Point(start.x, start.y);
                    let p = new Billiard.Point(distantPoint.x, distantPoint.y);
                    let u = new Billiard.Point(ball.position.x, ball.position.y);
                    let g = 2 * MafiaBilliardTricks.GameConstants.BALL_RADIUS;
                    var h = Billiard.Maths.lineIntersectCircle(c, p, u, g);
                    if (h.intersects) {
                        intersectedBalls.push(ball);
                        if (h.enter !== null) {
                            intersectionPoints.push(h.enter);
                        }
                        else {
                            intersectionPoints.push(new Billiard.Point(start.x, start.y));
                            n = true;
                        }
                    }
                }
            }
            let touchedBall;
            let intersectionPoint = null;
            if (intersectedBalls.length > 0) {
                let minSquaredDistance = 1e10;
                for (let i = 0, ln = intersectedBalls.length; i < ln; i++) {
                    let squaredDistance = (intersectedBalls[i].position.x - start.x) * (intersectedBalls[i].position.x - start.x) + (intersectedBalls[i].position.y - start.y) * (intersectedBalls[i].position.y - start.y);
                    if (squaredDistance < minSquaredDistance) {
                        minSquaredDistance = squaredDistance;
                        touchedBall = intersectedBalls[i];
                        intersectionPoint = intersectionPoints[i];
                    }
                }
                lineGraphic.clear();
                lineGraphic.lineStyle(this.guideWidth, guideLineColour, .6);
                let w = Billiard.Maths.findBearing(intersectionPoint.x - start.x, intersectionPoint.y - start.y);
                let b = Billiard.Maths.findBearing(touchedBall.position.x - intersectionPoint.x, touchedBall.position.y - intersectionPoint.y);
                let P = Math.abs(Billiard.Maths.angleDiff(b, w));
                let x = 5 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * ((90 - P) / 90);
                let f = new Billiard.Point(touchedBall.position.x + Math.cos(b * Math.PI / 180) * x, touchedBall.position.y + Math.sin(b * Math.PI / 180) * x);
                this.dottedLineTo(lineGraphic, new Phaser.Point(start.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, start.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE), new Phaser.Point(direction.x, direction.y), Phaser.Point.distance(new Phaser.Point(start.x, start.y), new Phaser.Point(intersectionPoint.x, intersectionPoint.y)) * MafiaBilliardTricks.GameConstants.PHYS_SCALE, 15);
                lineGraphic.lineStyle(this.guideWidth, guideLineColour, .6);
                lineGraphic.moveTo(touchedBall.position.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, touchedBall.position.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE);
            }
            else {
                let c = new Billiard.Point(start.x, start.y);
                let p = new Billiard.Point(distantPoint.x, distantPoint.y);
                for (let i = 0; i < 4; i++) {
                    let intersection = Billiard.Maths.lineIntersectLine(c, p, MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[i], MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[i + 1]);
                    if (intersection !== null) {
                        intersectionPoint = intersection;
                    }
                }
                if (intersectionPoint !== null) {
                    lineGraphic.clear();
                    lineGraphic.lineStyle(this.guideWidth, guideLineColour, .6);
                    this.dottedLineTo(lineGraphic, new Phaser.Point(start.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, start.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE), new Phaser.Point(direction.x, direction.y), Phaser.Point.distance(new Phaser.Point(start.x, start.y), new Phaser.Point(intersectionPoint.x, intersectionPoint.y)) * MafiaBilliardTricks.GameConstants.PHYS_SCALE, 15);
                }
            }
            return lineGraphic;
        }
        dottedLineTo(graphic, start, direction, distance, spacing) {
            graphic.moveTo(start.x, start.y);
            let currentV = new Billiard.Vector2D(start.x, start.y);
            let directionV = new Billiard.Vector2D(direction.x, direction.y);
            let draw = true;
            for (let i = 0; i < distance; i += spacing) {
                const newV = currentV.plus(directionV.times(spacing));
                if (draw) {
                    graphic.lineTo(newV.x, newV.y);
                }
                else {
                    graphic.moveTo(newV.x, newV.y);
                }
                currentV = newV;
                draw = !draw;
            }
        }
        setupDesiredAngleGuide() {
            const desiredPathOffset = 10 / MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            let cueBallPos = MafiaBilliardTricks.GameVars.ballArray[0].position;
            const desiredDir = new Billiard.Vector2D(1, 0).rotate(this.desiredAngle);
            const offsetFromCueBallPosMultiplier = 3;
            let startOffset = desiredDir.times(desiredPathOffset * offsetFromCueBallPosMultiplier);
            let startPos = cueBallPos.plus(startOffset);
            const perp = new Billiard.Vector2D(desiredDir.y, -desiredDir.x);
            const guideColor = this.desiredAngleAchieved ? 0xFFFFFF : 0xFF0000;
            this.createDottedLine(this.desiredAngleGuideLeft, startPos.plus(perp.times(desiredPathOffset)), desiredDir, guideColor);
            this.createDottedLine(this.desiredAngleGuideRight, startPos.plus(perp.times(-desiredPathOffset)), desiredDir, guideColor);
            this.doRefreshDesiredAngleGuide = false;
        }
    }
    MafiaBilliardTricks.GuideContainer = GuideContainer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class MatchManager {
        static init(game) {
            MatchManager.game = game;
            const levels = this.game.cache.getJSON("levels");
            let levelData = levels[MafiaBilliardTricks.GameVars.currentLevel];
            if (MafiaBilliardTricks.GameVars.starLessLevels.indexOf(MafiaBilliardTricks.GameVars.currentLevel) > 0) {
                MafiaBilliardTricks.GameManager.log("Missing variables in levels.JSON. Scoring disabled for this match");
            }
            MafiaBilliardTricks.GameVars.timed = levelData.timed !== undefined ? levelData.timed : false;
            MafiaBilliardTricks.GameVars.turnBased = levelData.turnBased !== undefined ? levelData.turnBased : false;
            MafiaBilliardTricks.GameVars.timeTurnsValue = levelData.timeTurnsValue !== undefined ? levelData.timeTurnsValue : 0;
            MafiaBilliardTricks.GameVars.turnsLeftStarDivider = levelData.turnsLeftStarDivider !== undefined ? levelData.turnsLeftStarDivider : 0;
            MafiaBilliardTricks.GameVars.lossOnColourSunk = levelData.lossOnColourSunk !== undefined ? levelData.lossOnColourSunk : undefined;
            MafiaBilliardTricks.GameVars.lossOnColourTouch = levelData.lossOnColourTouch !== undefined ? levelData.lossOnColourTouch : undefined;
            MafiaBilliardTricks.GameVars.invisibleBalls = levelData.invisibleBalls !== undefined ? levelData.invisibleBalls : undefined;
            MafiaBilliardTricks.GameVars.winOnColourSunk = levelData.winOnColourSunk !== undefined ? levelData.winOnColourSunk : undefined;
            this.winBallsLeft = -1;
            this.victoryTimerRunning = false;
            this.matchWon = false;
            this.victoryTimer = 0;
            MafiaBilliardTricks.GameVars.startingMessage = levelData.startingMessage ? levelData.startingMessage : "";
            if (!MafiaBilliardTricks.GameVars.gameData.spinMechanismActive && levelData.activatesSpinMechanism) {
                MafiaBilliardTricks.GameVars.gameData.spinMechanismActive = true;
                MafiaBilliardTricks.GameManager.log("Spin mechanism now active");
                MafiaBilliardTricks.GameManager.writeGameData();
            }
            MafiaBilliardTricks.GameVars.english = 0;
            MafiaBilliardTricks.GameVars.verticalSpin = 0;
            MafiaBilliardTricks.GameVars.turnSet = true;
            MafiaBilliardTricks.GameVars.currentTimeOrTurns = 0;
            MafiaBilliardTricks.GameVars.ballsOnStage = 0;
            MafiaBilliardTricks.GameVars.shotRunning = false;
            MatchManager.setBallsInitialPositions();
            MatchManager.hideInvisibleBalls();
            if (MafiaBilliardTricks.GameVars.timed) {
                MatchManager.game.time.removeAll();
                MatchManager.game.time.events.removeAll();
                this.game.time.removeAll();
                this.game.time.events.removeAll();
                MatchManager.trueTimer = new MafiaBilliardTricks.TrueTimer(this.game);
                MatchManager.trueTimer.start();
            }
        }
        static pauseTimer() {
            MafiaBilliardTricks.GameManager.log("pause timer");
            if (MatchManager.trueTimer) {
                MafiaBilliardTricks.GameManager.log(MatchManager.game.time);
                MatchManager.trueTimer.pause();
            }
        }
        static resumeTimer() {
            MafiaBilliardTricks.GameManager.log("resume timer");
            if (MatchManager.trueTimer) {
                MatchManager.trueTimer.resume();
            }
        }
        static destroyTimer() {
            if (this.game && MatchManager.trueTimer) {
                MafiaBilliardTricks.GameManager.log("destroy timer");
                MatchManager.trueTimer = null;
                MafiaBilliardTricks.PoolState.currentInstance.upperHUD.destroyTimerLabel();
                this.game.time.removeAll();
                this.game.time.events.removeAll();
            }
        }
        static update() {
            if (MafiaBilliardTricks.GameVars.timed && MatchManager.trueTimer) {
                const timerTimeElapsed = MatchManager.trueTimer.getTimeElapsed();
                if (timerTimeElapsed > 0) {
                    this.onSecondPassed(timerTimeElapsed);
                }
            }
            if (this.victoryTimerRunning) {
                this.victoryTimer++;
                const postGameCountdownDuration = 50;
                if (this.victoryTimer >= postGameCountdownDuration) {
                    if (this.matchWon) {
                        this.levelPassed();
                    }
                    else {
                        this.gameOver();
                    }
                }
            }
            MafiaBilliardTricks.GameVars.shotRunning = false;
            for (let i = 0, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                if (MafiaBilliardTricks.GameVars.ballArray[i].velocity.magnitudeSquared > 0) {
                    MafiaBilliardTricks.GameVars.shotRunning = true;
                    if (MafiaBilliardTricks.GameVars.invisibleBalls) {
                        if (MafiaBilliardTricks.GameVars.invisibleBalls.indexOf(MafiaBilliardTricks.GameVars.ballArray[i].id) > -1) {
                            this.ghostOutBall(MafiaBilliardTricks.GameVars.ballArray[i]);
                        }
                    }
                    else if (MafiaBilliardTricks.GameVars.ballArray[i].isGhostBall) {
                        this.ghostOutBall(MafiaBilliardTricks.GameVars.ballArray[i]);
                    }
                }
            }
            if (!MafiaBilliardTricks.GameVars.shotRunning && !MafiaBilliardTricks.GameVars.turnSet) {
                if (MafiaBilliardTricks.GameVars.turnBased) {
                    if (MafiaBilliardTricks.GameVars.currentTimeOrTurns >= MafiaBilliardTricks.GameVars.timeTurnsValue) {
                        MatchManager.prepVictoryTimer(false);
                    }
                }
                MafiaBilliardTricks.GameVars.shotRunning = false;
                MafiaBilliardTricks.GameVars.turnSet = true;
                MatchManager.newTurn();
            }
        }
        static isBallInvalidForCurrentPlayer(ballId) {
            if (MafiaBilliardTricks.GameVars.lossOnColourTouch) {
                for (let id of MafiaBilliardTricks.GameVars.lossOnColourTouch) {
                    if (id === ballId) {
                        return true;
                    }
                }
            }
            return false;
        }
        static calcScoreBasedOnTimeRemaining() {
            let t = (MafiaBilliardTricks.GameVars.timeTurnsValue - MafiaBilliardTricks.GameVars.currentTimeOrTurns) / MafiaBilliardTricks.GameVars.timeTurnsValue;
            let y = Phaser.Easing.Quadratic.Out(t);
            return y;
        }
        static onSecondPassed(timerTimeElapsed) {
            MafiaBilliardTricks.GameVars.currentTimeOrTurns += timerTimeElapsed;
            MafiaBilliardTricks.PoolState.currentInstance.upperHUD.updateTimer();
            MafiaBilliardTricks.PoolState.currentInstance.updateActualScore(this.calcScoreBasedOnTimeRemaining());
            if (MafiaBilliardTricks.GameVars.currentTimeOrTurns >= MafiaBilliardTricks.GameVars.timeTurnsValue + 1) {
                if (MafiaBilliardTricks.PauseLayer.currentInstance) {
                    MafiaBilliardTricks.PauseLayer.currentInstance.destroy();
                }
                MatchManager.destroyTimer();
                MatchManager.prepVictoryTimer(false);
            }
        }
        static onDownCueBall(cueBall) {
            MafiaBilliardTricks.CueContainer.currentInstance.swapCueBall();
        }
        static ballHasBeenShot() {
            this.snapShotBalls();
            MafiaBilliardTricks.GameVars.shotRunning = true;
            MafiaBilliardTricks.GameVars.turnSet = false;
            if (MafiaBilliardTricks.GameVars.turnBased) {
                MafiaBilliardTricks.GameVars.currentTimeOrTurns++;
            }
            MafiaBilliardTricks.PoolState.currentInstance.ballShot();
        }
        static setTouchedBall(ballId, pos) {
            if (MafiaBilliardTricks.GameVars.lossOnColourTouch) {
                for (let id of MafiaBilliardTricks.GameVars.lossOnColourTouch) {
                    if (id === ballId) {
                        if (pos) {
                            MafiaBilliardTricks.PoolState.currentInstance.upperHUD.showSpark(pos);
                        }
                        MatchManager.prepVictoryTimer(false);
                    }
                }
            }
        }
        static reset() {
            this.game.state.start("PoolState", true, false);
            this.hideInvisibleBalls();
        }
        static undo() {
            if (MafiaBilliardTricks.GameVars.timed) {
                this.snapShotScore();
            }
            MafiaBilliardTricks.GameVars.doUndo = true;
            this.reset();
        }
        static showSpinCircleLayer() {
            MafiaBilliardTricks.GameVars.paused = true;
            MafiaBilliardTricks.PoolState.currentInstance.showSpinCircleLayer();
        }
        static hideSpinCircleLayer(x, y) {
            MafiaBilliardTricks.GameVars.paused = false;
            MafiaBilliardTricks.GameVars.english = x;
            MafiaBilliardTricks.GameVars.verticalSpin = y;
            MafiaBilliardTricks.PoolState.currentInstance.hideSpinCircleLayer();
        }
        static newTurn() {
            MafiaBilliardTricks.GameVars.shotRunning = false;
            MafiaBilliardTricks.GameVars.turnSet = true;
            MafiaBilliardTricks.GameVars.english = 0;
            MafiaBilliardTricks.GameVars.verticalSpin = 0;
            MafiaBilliardTricks.PoolState.currentInstance.newTurn();
            if (MafiaBilliardTricks.GameVars.turnBased && (MafiaBilliardTricks.GameVars.timeTurnsValue - MafiaBilliardTricks.GameVars.currentTimeOrTurns !== 0) && MafiaBilliardTricks.GameVars.ballsOnStage !== 0) {
                MafiaBilliardTricks.GameManager.log(MafiaBilliardTricks.GameVars.timeTurnsValue);
                MafiaBilliardTricks.GameManager.log(MafiaBilliardTricks.GameVars.currentTimeOrTurns);
                MafiaBilliardTricks.PoolState.currentInstance.updateActualScore(MatchManager.calculateActualMatchScoreProgress());
            }
            this.hideInvisibleBalls();
        }
        static setBallsInitialPositions() {
            MafiaBilliardTricks.GameVars.ballArray = [];
            if (!MafiaBilliardTricks.GameVars.doUndo) {
                const levels = this.game.cache.getJSON("levels");
                let levelData = levels[MafiaBilliardTricks.GameVars.currentLevel];
                for (let i = 0; i < levelData.ballData.length; i++) {
                    let ballObject = new MafiaBilliardTricks.BallObject(this.game, levelData.ballData[i].id, levelData.ballData[i].x, levelData.ballData[i].y);
                    ballObject.isGhostBall = levelData.ballData[i].isGhostBall;
                    ballObject.isnonEssentialCueBall = levelData.ballData[i].isnonEssentialCueBall;
                    if (ballObject.isnonEssentialCueBall) {
                        ballObject.mc.setAsBlankBall();
                        ballObject.mc.sprite.tint = 0xB4E6EC;
                    }
                    if (levelData.ballData[i].id !== 0) {
                        MafiaBilliardTricks.GameVars.ballsOnStage++;
                        if (MafiaBilliardTricks.GameVars.winOnColourSunk) {
                            if (MafiaBilliardTricks.GameVars.winOnColourSunk.indexOf(levelData.ballData[i].id) > -1) {
                                if (this.winBallsLeft < 0) {
                                    this.winBallsLeft = 0;
                                }
                                this.winBallsLeft++;
                                MafiaBilliardTricks.GameManager.log("win ball count " + this.winBallsLeft.toString());
                                MafiaBilliardTricks.GameManager.log("win ball id " + levelData.ballData[i].id.toString());
                            }
                        }
                    }
                    MafiaBilliardTricks.GameVars.ballArray.push(ballObject);
                }
            }
            else {
                for (let i = 0; i < MafiaBilliardTricks.GameVars.tableSnapShotSolo.balls.length; i++) {
                    let ballObject = new MafiaBilliardTricks.BallObject(this.game, MafiaBilliardTricks.GameVars.tableSnapShotSolo.balls[i].id, MafiaBilliardTricks.GameVars.tableSnapShotSolo.balls[i].position.x, MafiaBilliardTricks.GameVars.tableSnapShotSolo.balls[i].position.y);
                    ballObject.isGhostBall = MafiaBilliardTricks.GameVars.tableSnapShotSolo.balls[i].isGhostBall;
                    ballObject.isnonEssentialCueBall = MafiaBilliardTricks.GameVars.tableSnapShotSolo.balls[i].isnonEssentialCueBall;
                    if (ballObject.isnonEssentialCueBall) {
                        ballObject.mc.setAsBlankBall();
                        ballObject.mc.sprite.tint = 0xB4E6EC;
                    }
                    if (MafiaBilliardTricks.GameVars.tableSnapShotSolo.balls[i].id !== 0) {
                        MafiaBilliardTricks.GameVars.ballsOnStage++;
                        if (MafiaBilliardTricks.GameVars.winOnColourSunk) {
                            if (MafiaBilliardTricks.GameVars.winOnColourSunk.indexOf(MafiaBilliardTricks.GameVars.tableSnapShotSolo.balls[i].id) > -1) {
                                if (this.winBallsLeft < 0) {
                                    this.winBallsLeft = 0;
                                }
                                this.winBallsLeft++;
                            }
                        }
                    }
                    MafiaBilliardTricks.GameVars.ballArray.push(ballObject);
                }
            }
        }
        static startGame() {
            if (!MafiaBilliardTricks.GameVars.doUndo) {
                const tut = MafiaBilliardTricks.GameConstants.TUTORIAL_LEVELS.filter(tData => tData.level - 1 === MafiaBilliardTricks.GameVars.currentLevel);
                if (tut.length > 0) {
                    let tutorialData = tut[0];
                    MafiaBilliardTricks.PoolState.currentInstance.showTutorialLayer(tutorialData.tutEnum);
                }
            }
            else {
                MatchManager.implementUndoSettings();
            }
            MafiaBilliardTricks.GameVars.tableSnapShotSolo = null;
            MafiaBilliardTricks.GameVars.doUndo = false;
            if (MafiaBilliardTricks.GameVars.starLessLevels.indexOf(MafiaBilliardTricks.GameVars.currentLevel) < 0) {
                if (MafiaBilliardTricks.GameVars.turnBased) {
                    MafiaBilliardTricks.PoolState.currentInstance.updateActualScore(MatchManager.calculateActualMatchScoreProgress());
                }
            }
        }
        static implementUndoSettings() {
            MafiaBilliardTricks.GameVars.currentTimeOrTurns = MafiaBilliardTricks.GameVars.tableSnapShotSolo.timeTurnsValue;
            MafiaBilliardTricks.PoolState.currentInstance.upperHUD.updateTimer();
            if (MafiaBilliardTricks.GameVars.turnBased) {
                MafiaBilliardTricks.PoolState.currentInstance.updateActualScore(this.calculateActualMatchScoreProgress());
                MafiaBilliardTricks.PoolState.currentInstance.hud.updateTurnsCounter();
            }
            else {
                MafiaBilliardTricks.PoolState.currentInstance.updateActualScore(this.calcScoreBasedOnTimeRemaining());
            }
        }
        static ballPocketed(contactEvent) {
            let pocketedBall = contactEvent.ball;
            if (pocketedBall.id !== 0) {
                MafiaBilliardTricks.GameVars.ballsOnStage--;
                if (MafiaBilliardTricks.GameVars.lossOnColourSunk || MafiaBilliardTricks.GameVars.winOnColourSunk) {
                    MafiaBilliardTricks.GameManager.log(MafiaBilliardTricks.GameVars.lossOnColourSunk);
                    if (MafiaBilliardTricks.GameVars.lossOnColourSunk) {
                        for (let id of MafiaBilliardTricks.GameVars.lossOnColourSunk) {
                            if (id === pocketedBall.id) {
                                MatchManager.prepVictoryTimer(false);
                            }
                        }
                    }
                    if (MafiaBilliardTricks.GameVars.winOnColourSunk) {
                        MafiaBilliardTricks.GameManager.log("winOnColourSunk valid");
                        for (let id of MafiaBilliardTricks.GameVars.winOnColourSunk) {
                            if (id === pocketedBall.id) {
                                this.winBallsLeft--;
                                if (this.winBallsLeft <= 0) {
                                    MatchManager.prepVictoryTimer(true);
                                }
                            }
                        }
                    }
                }
                else if (MafiaBilliardTricks.GameVars.ballsOnStage === 0) {
                    MatchManager.prepVictoryTimer(true);
                }
            }
        }
        static gameOver() {
            MafiaBilliardTricks.GameVars.matchScore = 0;
            if (MafiaBilliardTricks.GameVars.lossCountSolo === Number.NaN || !MafiaBilliardTricks.GameVars.lossCountSolo) {
                MafiaBilliardTricks.GameVars.lossCountSolo = 0;
            }
            MafiaBilliardTricks.GameVars.lossCountSolo++;
            MafiaBilliardTricks.PoolState.currentInstance.updateActualScore(0.0);
            if (this.trueTimer) {
                this.destroyTimer();
            }
            if (MafiaBilliardTricks.GameVars.lossCountSolo >= 3) {
                this.game.camera.flash(0x2f1a20, 300);
                MatchManager.reset();
            }
            else {
                MafiaBilliardTricks.PoolState.currentInstance.showEndMatchLayer();
            }
        }
        static calculateActualMatchScoreProgress(disregardLastTurnTick = false) {
            const turnMod = disregardLastTurnTick ? -1 : 0;
            const currentTimeOrTurnsModded = MafiaBilliardTricks.GameVars.currentTimeOrTurns + turnMod;
            if (MafiaBilliardTricks.GameVars.turnsLeftStarDivider === 0) {
                return 1;
            }
            else {
                const turnsLeft = MafiaBilliardTricks.GameVars.timeTurnsValue - currentTimeOrTurnsModded;
                const twoStarPoint = this.getOneTwoStarMidpoint();
                if (turnsLeft > MafiaBilliardTricks.GameVars.turnsLeftStarDivider) {
                    return 1;
                }
                else if (turnsLeft > MafiaBilliardTricks.GameVars.timeTurnsValue - twoStarPoint) {
                    return 2 / 3;
                }
                else {
                    return 1 / 3;
                }
            }
        }
        static getOneTwoStarMidpoint() {
            if (MafiaBilliardTricks.GameVars.turnsLeftStarDivider > MafiaBilliardTricks.GameConstants.USE_STAR_DIVIDER_TO_INTERPOLATE_MINIMUM) {
                let threeStarPoint = MafiaBilliardTricks.GameVars.timeTurnsValue - MafiaBilliardTricks.GameVars.turnsLeftStarDivider;
                return Math.ceil(threeStarPoint + ((MafiaBilliardTricks.GameVars.timeTurnsValue - threeStarPoint) * 0.5));
            }
            else {
                return MafiaBilliardTricks.GameVars.timeTurnsValue - MafiaBilliardTricks.GameVars.turnsLeftStarDivider + 1;
            }
        }
        static levelPassed(forceScore) {
            if (this.trueTimer) {
                this.destroyTimer();
            }
            MafiaBilliardTricks.GameVars.lastLevelBeaten = MafiaBilliardTricks.GameVars.currentLevel;
            MafiaBilliardTricks.GameVars.matchScore = forceScore ? forceScore : this.calculateFinalMatchScore();
            MafiaBilliardTricks.GameManager.levelPassed(MafiaBilliardTricks.GameVars.currentLevel);
            MafiaBilliardTricks.PoolState.currentInstance.showEndMatchLayer();
        }
        static snapShotBalls() {
            let balls = [];
            for (let i = 0; i < MafiaBilliardTricks.GameVars.ballArray.length; i++) {
                let ballOnTable = MafiaBilliardTricks.GameVars.ballArray[i];
                if (ballOnTable.active) {
                    let newBall = new MafiaBilliardTricks.BallObject(this.game, ballOnTable.id, ballOnTable.position.x, ballOnTable.position.y);
                    newBall.isGhostBall = ballOnTable.isGhostBall;
                    newBall.isnonEssentialCueBall = ballOnTable.isnonEssentialCueBall;
                    balls.push(newBall);
                }
            }
            MafiaBilliardTricks.GameVars.tableSnapShotSolo = { balls: balls, timeTurnsValue: MafiaBilliardTricks.GameVars.currentTimeOrTurns };
        }
        static snapShotScore() {
            if (MafiaBilliardTricks.GameVars.tableSnapShotSolo) {
                MafiaBilliardTricks.GameVars.tableSnapShotSolo.timeTurnsValue = MafiaBilliardTricks.GameVars.currentTimeOrTurns;
            }
            else {
                MafiaBilliardTricks.GameManager.log("Couldn't snapshot score. tableSnapShot undefined");
            }
        }
        static prepVictoryTimer(won) {
            if (!MatchManager.victoryTimerRunning) {
                MatchManager.matchWon = won;
                MatchManager.victoryTimerRunning = true;
            }
        }
        static ghostOutBall(ballObject) {
            if (ballObject.velocity.magnitudeSquared > 15000) {
                ballObject.mc.alpha = 1;
            }
            else {
                ballObject.mc.alpha = Phaser.Easing.Cubic.Out(ballObject.velocity.magnitudeSquared / 15000);
            }
        }
        static calculateFinalMatchScore() {
            let final = 1;
            if (MafiaBilliardTricks.GameVars.turnBased) {
                final = this.calculateActualMatchScoreProgress(true);
            }
            else if (MafiaBilliardTricks.GameVars.timed) {
                final = this.calcScoreBasedOnTimeRemaining();
            }
            return Math.ceil(final * 3);
        }
        static hideInvisibleBalls() {
            for (let i = 0; i < MafiaBilliardTricks.GameVars.ballArray.length; i++) {
                let ballOnTable = MafiaBilliardTricks.GameVars.ballArray[i];
                if (ballOnTable.active) {
                    if (MafiaBilliardTricks.GameVars.invisibleBalls) {
                        for (let invisId of MafiaBilliardTricks.GameVars.invisibleBalls) {
                            if (invisId === ballOnTable.id) {
                                ballOnTable.mc.alpha = 0;
                                ballOnTable.shadow.alpha = 0;
                            }
                        }
                    }
                    else if (ballOnTable.isGhostBall) {
                        ballOnTable.mc.alpha = 0;
                        ballOnTable.shadow.alpha = 0;
                    }
                }
            }
        }
    }
    MafiaBilliardTricks.MatchManager = MatchManager;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class MatchManagerBoss {
        static init(game) {
            MatchManagerBoss.game = game;
            MafiaBilliardTricks.GameVars.english = 0;
            MafiaBilliardTricks.GameVars.verticalSpin = 0;
            MafiaBilliardTricks.GameVars.ballsOnStage = 0;
            MafiaBilliardTricks.GameVars.turnSet = true;
            MafiaBilliardTricks.GameVars.shotRunning = false;
            MafiaBilliardTricks.GameVars.draggingCueBall = false;
            MafiaBilliardTricks.GameVars.selectingPocket = false;
            MafiaBilliardTricks.GameVars.currentTimeOrTurns = 0;
            MafiaBilliardTricks.GameVars.matchScore = -1;
            this.matchOver = false;
            this.blackSunkPocket = -1;
            this.breakShotPending = true;
            this.foulCommitted = false;
            this.foulReason = "";
            this.pocketedOwnBall = false;
            this.sidesEstablished = false;
            this.blackPocketed = false;
            this.whitePocketed = false;
            this.solidPocketed = false;
            this.stripePocketed = false;
            this.touchedAnyBall = false;
            this.checkBlackBallEligibilityEveryTurn = false;
            this.bossShootCounter = 0;
            this.delayBeforeShot = 30 + 50 * this.game.rnd.frac();
            this.botCanShootNow = false;
            this.botCurrentShotData = null;
            MatchManagerBoss.rackBalls();
            this.activePlayer = new MafiaBilliardTricks.Player("player");
            this.inactivePlayer = new MafiaBilliardTricks.Player(MafiaBilliardTricks.GameConstants.BOT);
        }
        static startGame() {
            let bossSkill = MafiaBilliardTricks.GameVars.bossSkill;
            bossSkill -= this.getBossSkillCurve(MafiaBilliardTricks.GameVars.currentBoss);
            this.firstShot = true;
            Billiard.Bot.init(MafiaBilliardTricks.GameConstants.FRICTION, MafiaBilliardTricks.GameConstants.BALL_RADIUS, MafiaBilliardTricks.GameConstants.POCKET_RADIUS, MafiaBilliardTricks.GameConstants.PHYS_SCALE, MafiaBilliardTricks.GameConstants.MIN_VELOCITY, MafiaBilliardTricks.GameConstants.CUSHION_RESTITUTION, MafiaBilliardTricks.GameConstants.BALL_RESTITUTION, MafiaBilliardTricks.GameVars.extractLineArrayString(), MafiaBilliardTricks.GameVars.extractVertexArrayString(), MafiaBilliardTricks.GameVars.extractPocketArrayString(), bossSkill);
            if (MafiaBilliardTricks.GameVars.botStarts) {
                this.switchPlayer();
                MafiaBilliardTricks.PoolState.currentInstance.hud.updateActivePlayerPortraitHighlight();
            }
            if (this.activePlayer.name === MafiaBilliardTricks.GameConstants.BOT) {
                MafiaBilliardTricks.StageContainer.currentInstance.hideGuide();
                MafiaBilliardTricks.CueContainer.currentInstance.showCue();
                MatchManagerBoss.giveBotShootOrder();
            }
            else {
                MafiaBilliardTricks.StageContainer.currentInstance.setCueBall();
            }
            MafiaBilliardTricks.PoolState.currentInstance.upperHUD.showMessage(MafiaBilliardTricks.HUDMessageType.TURN_INDICATOR, this.activePlayer, 1000);
        }
        static update() {
            if (MafiaBilliardTricks.GameVars.paused) {
                return;
            }
            if (this.botCanShootNow) {
                this.bossShootCounter++;
                if (this.bossShootCounter > this.delayBeforeShot) {
                    if (MafiaBilliardTricks.CueContainer.currentInstance.botShoot(this.botCurrentShotData)) {
                        this.botCurrentShotData = null;
                        this.botCanShootNow = false;
                        this.bossShootCounter = 0;
                    }
                }
            }
            if (MafiaBilliardTricks.GameVars.paused) {
                return;
            }
            if (MafiaBilliardTricks.GameVars.matchScore >= 0) {
                return;
            }
            MafiaBilliardTricks.GameVars.shotRunning = false;
            for (let i = 0, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                if (MafiaBilliardTricks.GameVars.ballArray[i].velocity.magnitudeSquared > 0) {
                    MafiaBilliardTricks.GameVars.shotRunning = true;
                    break;
                }
            }
            if (this.activePlayer.name === MafiaBilliardTricks.GameConstants.BOT) {
                if (this.botPreparingToShoot && !MafiaBilliardTricks.GameVars.shotRunning && MafiaBilliardTricks.PoolState.currentInstance.upperHUD.areMessageTweensFinished()) {
                    this.botCurrentShotData = Billiard.Bot.getShot(MafiaBilliardTricks.GameVars.extractBallsArrayString(), MafiaBilliardTricks.GameVars.currentTimeOrTurns, this.activePlayer.side, 20000);
                    MafiaBilliardTricks.PoolState.currentInstance.showPauseButton();
                    MafiaBilliardTricks.PoolState.currentInstance.hideThinkingMessage();
                    if (this.activePlayer.eligibleToSinkBlack) {
                        MafiaBilliardTricks.StageContainer.currentInstance.setSelectedPocket(this.botCurrentShotData.pocket8Ball);
                    }
                    this.botCanShootNow = true;
                    this.botPreparingToShoot = false;
                }
                else {
                }
            }
            if (!MafiaBilliardTricks.GameVars.shotRunning && !MafiaBilliardTricks.GameVars.turnSet) {
                MafiaBilliardTricks.GameVars.shotRunning = false;
                MafiaBilliardTricks.GameVars.turnSet = true;
                MatchManagerBoss.newTurn();
            }
        }
        static generatePosibleAngles() {
            let balls = MafiaBilliardTricks.GameVars.ballArray;
            let positions = [];
            let allPositions = [];
            let finalPositions = [];
            for (let i = 0; i < balls.length; i++) {
                let position = new Billiard.Point(balls[i].position.x, balls[i].position.y);
                if (balls[i].active && balls[i].id !== 0) {
                    if (!this.activePlayer.side && balls[i].id !== 8) {
                        positions.push(position);
                    }
                    else {
                        if (this.activePlayer.side === MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID) {
                            if (balls[i].id > 8) {
                                positions.push(position);
                            }
                        }
                        else {
                            if (balls[i].id < 8) {
                                positions.push(position);
                            }
                        }
                    }
                    if (balls[i].id === 8 && this.activePlayer.eligibleToSinkBlack) {
                        positions.push(position);
                    }
                    allPositions.push(position);
                }
            }
            let cuePosition = new Billiard.Point(balls[0].position.x, balls[0].position.y);
            for (let i = 0; i < positions.length; i++) {
                let canShoot = true;
                for (let j = 0; j < allPositions.length; j++) {
                    if (positions[i].x !== allPositions[j].x || positions[i].y !== allPositions[j].y) {
                        if (Billiard.Maths.lineIntersectCircle(cuePosition, positions[i], allPositions[j], MafiaBilliardTricks.GameConstants.BALL_RADIUS).intersects) {
                            canShoot = false;
                            break;
                        }
                    }
                }
                if (canShoot) {
                    finalPositions.push(positions[i]);
                }
            }
            let angles = [];
            for (let i = 0; i < finalPositions.length; i++) {
                angles.push(((Billiard.Maths.findBearing(finalPositions[i].x - cuePosition.x, finalPositions[i].y - cuePosition.y) + 180) * Math.PI) / 180);
            }
            return angles;
        }
        static onDownCueBall(cueBall) {
            MafiaBilliardTricks.CueContainer.currentInstance.swapCueBall();
        }
        static ballHasBeenShot() {
            MafiaBilliardTricks.GameVars.shotRunning = true;
            MafiaBilliardTricks.GameVars.turnSet = false;
            MafiaBilliardTricks.GameVars.currentTimeOrTurns++;
            MafiaBilliardTricks.PoolState.currentInstance.ballShot();
        }
        static reset() {
            MafiaBilliardTricks.GameManager.log("Resetting game");
            this.game.state.start("PoolState", true, false);
            MafiaBilliardTricks.StageContainer.currentInstance.setCueBall();
        }
        static showSpinCircleLayer() {
            MafiaBilliardTricks.PoolState.currentInstance.showSpinCircleLayer();
        }
        static hideSpinCircleLayer(x, y) {
            MafiaBilliardTricks.GameVars.english = x;
            MafiaBilliardTricks.GameVars.verticalSpin = y;
            MafiaBilliardTricks.PoolState.currentInstance.hideSpinCircleLayer();
        }
        static newTurn() {
            if (this.matchOver) {
                return;
            }
            MatchManagerBoss.applyRules();
            if (this.matchOver) {
                return;
            }
            if (this.checkBlackBallEligibilityEveryTurn) {
                MatchManagerBoss.checkEligibilityForBlackBall();
            }
            this.firstShot = false;
            this.solidPocketed = false;
            this.stripePocketed = false;
            this.touchedAnyBall = false;
            this.touchedAnyCushion = false;
            this.touchedWrongBallFirst = false;
            this.pocketedOwnBall = false;
            if (this.activePlayer.eligibleToSinkBlack) {
                if (this.activePlayer.name === "player") {
                    MafiaBilliardTricks.PoolState.currentInstance.upperHUD.showMessage(MafiaBilliardTricks.HUDMessageType.POCKET_CHOICE, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["CHOOSE_A_POCKET"], 2000);
                }
                MafiaBilliardTricks.StageContainer.currentInstance.showChoiceOfPockets();
            }
            else {
                MafiaBilliardTricks.StageContainer.currentInstance.hideSelectPocket();
            }
            if (this.blackPocketed) {
                this.matchOver = true;
                return;
            }
            this.blackPocketed = false;
            MafiaBilliardTricks.GameManager.log("...........TURN " + this.activePlayer.name + " ...........");
            MafiaBilliardTricks.GameVars.shotRunning = false;
            MafiaBilliardTricks.GameVars.turnSet = true;
            MafiaBilliardTricks.GameVars.english = 0;
            MafiaBilliardTricks.GameVars.verticalSpin = 0;
            let cueBall = (MafiaBilliardTricks.GameVars.ballArray[0]);
            cueBall.firstContact = false;
            if (!cueBall.active || this.whitePocketed || this.foulCommitted) {
                MafiaBilliardTricks.GameManager.log("set cue ball");
                MafiaBilliardTricks.StageContainer.currentInstance.setCueBall();
                if (this.activePlayer.name === MafiaBilliardTricks.GameConstants.BOT) {
                    MafiaBilliardTricks.GameVars.draggingCueBall = true;
                    cueBall.hideHandIcon();
                    MatchManagerBoss.botSetWhiteBall();
                }
            }
            else {
                cueBall.hideHandIcon();
                MafiaBilliardTricks.GameVars.draggingCueBall = false;
            }
            MafiaBilliardTricks.PoolState.currentInstance.newTurn();
            if (this.activePlayer.name === MafiaBilliardTricks.GameConstants.BOT) {
                MafiaBilliardTricks.StageContainer.currentInstance.hideGuide();
                if (this.game.device.touch) {
                    MafiaBilliardTricks.PoolState.currentInstance.hideMobileControls();
                }
                this.giveBotShootOrder();
            }
            else if (MafiaBilliardTricks.GameVars.selectingPocket) {
                MafiaBilliardTricks.CueContainer.currentInstance.hideCue();
                MafiaBilliardTricks.StageContainer.currentInstance.hideGuide();
            }
            if (this.foulCommitted) {
                MafiaBilliardTricks.PoolState.currentInstance.upperHUD.showMessage(MafiaBilliardTricks.HUDMessageType.FOUL, this.foulReason);
                this.foulReason = "";
            }
            this.foulCommitted = false;
            this.whitePocketed = false;
            if (this.activePlayer.name === MafiaBilliardTricks.GameConstants.BOT) {
                MafiaBilliardTricks.PoolState.currentInstance.setCueballButtonInputEnabled(false);
            }
            MafiaBilliardTricks.PoolState.currentInstance.upperHUD.resetKillAllTweensAnywayTimer();
        }
        static alphaSelectPocket() {
            MafiaBilliardTricks.StageContainer.currentInstance.alphaSelectPocket();
        }
        static setTouchedBall(ballId) {
            if (ballId === 0 || this.touchedAnyBall) {
                return;
            }
            this.touchedWrongBallFirst = this.IsBallInvalidForCurrentPlayer(ballId);
            if (this.touchedWrongBallFirst) {
                MafiaBilliardTricks.GameManager.log("touching wrong ball " + ballId);
            }
        }
        static IsBallInvalidForCurrentPlayer(ballId) {
            if (!this.activePlayer) {
                return false;
            }
            if (this.activePlayer.side === MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID && ballId < 8) {
                return false;
            }
            else if (this.activePlayer.side === MafiaBilliardTricks.GameConstants.BALL_TYPE_STRIPED && ballId > 8) {
                return false;
            }
            else if (this.activePlayer.side === "" && ballId !== 8) {
                return false;
            }
            else if (ballId === 8) {
                if (this.activePlayer.eligibleToSinkBlack) {
                    return false;
                }
                else {
                    return true;
                }
            }
            else {
                return true;
            }
        }
        static rackBalls() {
            this.solidsPocketedCount = 0;
            this.stripesPocketedCount = 0;
            MafiaBilliardTricks.GameVars.ballArray = [];
            for (let i = 0; i < MafiaBilliardTricks.GameConstants.BALLS_INITIAL_POSITIONS.length; i++) {
                let ballObject;
                let ballX = MafiaBilliardTricks.GameConstants.BALLS_INITIAL_POSITIONS[i][0];
                let ballY = MafiaBilliardTricks.GameConstants.BALLS_INITIAL_POSITIONS[i][1];
                if (i === 0) {
                    ballObject = new MafiaBilliardTricks.CueBallObject(this.game, i, ballX, ballY);
                }
                else {
                    ballX += 0.05 * Billiard.Maths.fixNumber(this.game.rnd.frac());
                    ballY += 0.05 * Billiard.Maths.fixNumber(this.game.rnd.frac());
                    ballObject = new MafiaBilliardTricks.BallObject(this.game, i, ballX, ballY);
                }
                if (i !== 0) {
                    MafiaBilliardTricks.GameVars.ballsOnStage++;
                }
                MafiaBilliardTricks.GameVars.ballArray.push(ballObject);
            }
        }
        static ballPocketed(contactEvent) {
            const pocketedBall = contactEvent.ball;
            const pocketId = contactEvent.target.id;
            MafiaBilliardTricks.PoolState.currentInstance.hud.ballPocketed(pocketedBall.id);
            if (pocketedBall.id !== 0 && pocketedBall.id !== 8) {
                MafiaBilliardTricks.GameVars.ballsOnStage--;
                if (pocketedBall.id < 8) {
                    MafiaBilliardTricks.GameManager.log("SOLID sunk");
                    this.solidPocketed = true;
                    this.solidsPocketedCount++;
                }
                else {
                    MafiaBilliardTricks.GameManager.log("STRIPE sunk");
                    this.stripePocketed = true;
                    this.stripesPocketedCount++;
                }
                if (this.solidsPocketedCount === 7 || this.stripesPocketedCount === 7) {
                    this.checkBlackBallEligibilityEveryTurn = true;
                }
            }
            else if (pocketedBall.id === 8) {
                this.blackSunkPocket = pocketId;
                this.blackPocketed = true;
            }
            else {
                this.whitePocketed = true;
            }
        }
        static cueBallSet(x, y) {
            MafiaBilliardTricks.StageContainer.currentInstance.newTurn();
        }
        static gameOver() {
            this.matchOver = true;
            if (MafiaBilliardTricks.GameVars.currentBoss === 6) {
                MafiaBilliardTricks.GameVars.bossAttemptsElsa++;
            }
            else if (MafiaBilliardTricks.GameVars.currentBoss === 7) {
                MafiaBilliardTricks.GameVars.bossAttemptsDon++;
            }
            MafiaBilliardTricks.CueContainer.currentInstance.hideCue();
            MafiaBilliardTricks.StageContainer.currentInstance.hideGuide();
            let cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            cueBall.hideHandIcon();
            MafiaBilliardTricks.GameVars.matchScore = 0;
            MafiaBilliardTricks.PoolState.currentInstance.showEndMatchLayer();
        }
        static levelPassed() {
            this.matchOver = true;
            MafiaBilliardTricks.CueContainer.currentInstance.hideCue();
            MafiaBilliardTricks.StageContainer.currentInstance.hideGuide();
            let cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            cueBall.hideHandIcon();
            MafiaBilliardTricks.GameVars.matchScore = 3;
            MafiaBilliardTricks.GameVars.lastBossBeaten = MafiaBilliardTricks.GameVars.currentBoss;
            MafiaBilliardTricks.GameManager.levelPassed(MafiaBilliardTricks.GameVars.currentLevel);
            MafiaBilliardTricks.PoolState.currentInstance.showEndMatchLayer();
        }
        static setIsSelectingPocket(isSelecting) {
            MafiaBilliardTricks.GameVars.selectingPocket = isSelecting;
            if (!isSelecting && MatchManagerBoss.activePlayer.name !== MafiaBilliardTricks.GameConstants.BOT) {
                MafiaBilliardTricks.CueContainer.currentInstance.showCue();
                MafiaBilliardTricks.StageContainer.currentInstance.showGuide();
            }
        }
        static getBossSkillCurve(currentBoss) {
            if (currentBoss === 6) {
                if (MafiaBilliardTricks.GameVars.bossAttemptsElsa > 5) {
                    return 2;
                }
                else if (MafiaBilliardTricks.GameVars.bossAttemptsElsa > 2) {
                    return 1;
                }
                else {
                    return 0;
                }
            }
            else if (currentBoss === 7) {
                if (MafiaBilliardTricks.GameVars.bossAttemptsDon > 5) {
                    return 2;
                }
                else if (MafiaBilliardTricks.GameVars.bossAttemptsDon > 2) {
                    return 1;
                }
                else {
                    return 0;
                }
            }
            else {
                return 0;
            }
        }
        static giveBotShootOrder() {
            MafiaBilliardTricks.PoolState.currentInstance.hidePauseButton();
            MafiaBilliardTricks.PoolState.currentInstance.showThinkingMessage();
            this.botPreparingToShoot = true;
        }
        static botSetWhiteBall() {
            let cueBallPos = Billiard.Bot.getCueBallPosition(MafiaBilliardTricks.GameVars.extractBallsArrayString(), this.activePlayer.side);
            let cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            cueBall.setPositionForAI(cueBallPos.x, cueBallPos.y);
            cueBall.hideHandIcon();
        }
        static checkEligibilityForBlackBall() {
            if (this.solidsPocketedCount === 7) {
                if (this.activePlayer.side === MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID) {
                    this.activePlayer.eligibleToSinkBlack = true;
                    MafiaBilliardTricks.GameManager.log(this.activePlayer.name + " now eligible to sink black");
                }
                else if (this.inactivePlayer.side === MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID) {
                    this.inactivePlayer.eligibleToSinkBlack = true;
                    MafiaBilliardTricks.GameManager.log(this.inactivePlayer.name + " now eligible to sink black");
                }
            }
            if (this.stripesPocketedCount === 7) {
                if (this.activePlayer.side === MafiaBilliardTricks.GameConstants.BALL_TYPE_STRIPED) {
                    this.activePlayer.eligibleToSinkBlack = true;
                    MafiaBilliardTricks.GameManager.log(this.activePlayer.name + " now eligible to sink black");
                }
                else if (this.inactivePlayer.side === MafiaBilliardTricks.GameConstants.BALL_TYPE_STRIPED) {
                    this.inactivePlayer.eligibleToSinkBlack = true;
                    MafiaBilliardTricks.GameManager.log(this.inactivePlayer.name + " now eligible to sink black");
                }
            }
        }
        static applyRules() {
            if (this.breakShotPending) {
                this.applyBreakShotRules();
                return;
            }
            else {
                this.applyStandardTurnRules();
                if (this.blackPocketed) {
                    MafiaBilliardTricks.GameManager.log("Black sunk");
                    MafiaBilliardTricks.GameManager.log("Called pocket: " + this.activePlayer.calledPocket);
                    MafiaBilliardTricks.GameManager.log("Sunk pocket: " + this.blackSunkPocket);
                    MafiaBilliardTricks.GameManager.log("foul?: " + this.foulCommitted);
                    MafiaBilliardTricks.GameManager.log("correct pocket called?: " + (this.activePlayer.calledPocket === this.blackSunkPocket));
                    MafiaBilliardTricks.GameManager.log("eligible to sink black?: " + this.activePlayer.eligibleToSinkBlack);
                    MafiaBilliardTricks.GameManager.log("active is: " + this.activePlayer.name);
                    MafiaBilliardTricks.GameManager.log("inactive is: " + this.inactivePlayer.name);
                    if (this.activePlayer.eligibleToSinkBlack &&
                        this.activePlayer.calledPocket === this.blackSunkPocket &&
                        !this.foulCommitted) {
                        if (this.activePlayer.name === "player") {
                            this.levelPassed();
                        }
                        else {
                            this.gameOver();
                        }
                    }
                    else {
                        if (this.inactivePlayer.name === "player") {
                            this.levelPassed();
                        }
                        else {
                            this.gameOver();
                        }
                    }
                }
                else if (this.foulCommitted) {
                    MafiaBilliardTricks.GameManager.log("FOUL");
                    this.switchPlayer();
                }
                else if (!this.pocketedOwnBall) {
                    this.switchPlayer();
                }
                else {
                    MafiaBilliardTricks.GameManager.log("NO EVENT");
                }
            }
        }
        static applyStandardTurnRules() {
            if (this.touchedWrongBallFirst || !this.touchedAnyBall) {
                MafiaBilliardTricks.GameManager.log("touchedWrongBallFirst || !touchedAnyBall");
                this.foulCommitted = true;
                this.foulReason = this.touchedWrongBallFirst ? MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["FOUL_TOUCH_WRONG_BALL"] : MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["FOUL_TOUCH_NO_BALL"];
            }
            if (this.whitePocketed) {
                MafiaBilliardTricks.GameManager.log("white Sunk");
                this.foulCommitted = true;
                this.foulReason = MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["FOUL_WHITE_POCKETED"];
            }
            if (this.solidPocketed || this.stripePocketed) {
                if (this.sidesEstablished) {
                    if (this.solidPocketed && this.activePlayer.side === MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID ||
                        this.stripePocketed && this.activePlayer.side === MafiaBilliardTricks.GameConstants.BALL_TYPE_STRIPED) {
                        MafiaBilliardTricks.GameManager.log("sunk own ball.");
                        this.pocketedOwnBall = true;
                    }
                    if (this.solidPocketed && this.activePlayer.side !== MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID ||
                        this.stripePocketed && this.activePlayer.side !== MafiaBilliardTricks.GameConstants.BALL_TYPE_STRIPED) {
                        MafiaBilliardTricks.GameManager.log("sunk wrong ball");
                        this.foulCommitted = true;
                        this.foulReason = MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["FOUL_RIVAL_BALL_POCKETED"];
                    }
                }
                else {
                    MafiaBilliardTricks.GameManager.log("Side-Establishing Solid or Stripe Sunk.");
                    if (!(this.solidPocketed && this.stripePocketed)) {
                        this.determineSides();
                    }
                    this.pocketedOwnBall = true;
                }
            }
            else {
                if (!this.touchedAnyCushion && !this.blackPocketed) {
                    MafiaBilliardTricks.GameManager.log("no cushion touched after nothing sunk");
                    this.foulCommitted = true;
                    this.foulReason = MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["FOUL_CUSHION_NOT_TOUCHED"];
                }
            }
            if (!(this.solidPocketed || this.stripePocketed || this.whitePocketed || this.blackPocketed)) {
                MafiaBilliardTricks.GameManager.log("sunk nothing.");
            }
        }
        static applyBreakShotRules() {
            MafiaBilliardTricks.GameManager.log("Applying post break rules");
            this.breakShotPending = false;
            if (this.blackPocketed || !this.touchedAnyBall) {
                MafiaBilliardTricks.GameManager.log("Black Sunk or no other ball touched.");
                this.reset();
            }
            else if (this.solidPocketed && this.stripePocketed) {
                if (!this.whitePocketed) {
                    MafiaBilliardTricks.GameManager.log("Solid, Stripe Sunk (not white)");
                }
                else {
                    MafiaBilliardTricks.GameManager.log("Solid, Stripe and White sunk");
                    this.switchPlayer();
                    return;
                }
            }
            else if (this.solidPocketed || this.stripePocketed) {
                if (!this.whitePocketed) {
                    MafiaBilliardTricks.GameManager.log("Either stripe or Solid sunk.");
                    this.determineSides();
                    return;
                }
                else {
                    MafiaBilliardTricks.GameManager.log("Either stripe or Solid sunk, as well as white.");
                    this.determineSides();
                    this.switchPlayer();
                    return;
                }
            }
            else if (this.whitePocketed) {
                this.switchPlayer();
            }
            else {
                MafiaBilliardTricks.GameManager.log("Uneventful.");
                this.switchPlayer();
            }
        }
        static determineSides() {
            MafiaBilliardTricks.GameManager.log("Assigning sides.");
            if (this.solidPocketed) {
                this.activePlayer.side = MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID;
                this.inactivePlayer.side = MafiaBilliardTricks.GameConstants.BALL_TYPE_STRIPED;
            }
            else {
                this.activePlayer.side = MafiaBilliardTricks.GameConstants.BALL_TYPE_STRIPED;
                this.inactivePlayer.side = MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID;
            }
            MafiaBilliardTricks.PoolState.currentInstance.hud.assignSidesForBossMatch();
            let playerSide = this.activePlayer.name === "player" ? this.activePlayer.side : this.inactivePlayer.side;
            MafiaBilliardTricks.PoolState.currentInstance.upperHUD.showMessage(MafiaBilliardTricks.HUDMessageType.SIDE_ASSIGNMENT, playerSide);
            MafiaBilliardTricks.GameManager.log(this.activePlayer.name + " is now " + this.activePlayer.side);
            MafiaBilliardTricks.GameManager.log(this.inactivePlayer.name + " is now " + this.inactivePlayer.side);
            this.sidesEstablished = true;
        }
        static switchPlayer() {
            MafiaBilliardTricks.GameManager.log("Switching players (" + MatchManagerBoss.activePlayer.name + " to " + MatchManagerBoss.inactivePlayer.name + ")");
            let lastActive = MatchManagerBoss.activePlayer;
            this.activePlayer = MatchManagerBoss.inactivePlayer;
            this.inactivePlayer = lastActive;
            MafiaBilliardTricks.GameManager.log("enqueuing");
            MafiaBilliardTricks.PoolState.currentInstance.upperHUD.showMessage(MafiaBilliardTricks.HUDMessageType.TURN_INDICATOR, this.activePlayer);
        }
    }
    MafiaBilliardTricks.MatchManagerBoss = MatchManagerBoss;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class PauseLayer extends Phaser.Group {
        constructor(game) {
            super(game, null, "pause-layer");
            PauseLayer.currentInstance = this;
            const transparentBackground = new Phaser.Image(this.game, 0, 0, this.game.cache.getBitmapData(MafiaBilliardTricks.GameConstants.BLUE_SQUARE));
            transparentBackground.scale.set(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 64, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 64);
            transparentBackground.alpha = .4;
            transparentBackground.inputEnabled = true;
            transparentBackground.events.onInputDown.add(this.onDownTransparentLayer, this);
            this.add(transparentBackground);
            let resumeBtnPx = 0;
            const buttonResume = new Phaser.Button(this.game, resumeBtnPx, 0, "texture_atlas_1", this.onClickResume);
            buttonResume.setFrames("btn_resume_on.png", "btn_resume_off.png", "btn_resume_on.png", "btn_resume_off.png");
            buttonResume.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            buttonResume.scale.y = MafiaBilliardTricks.GameVars.correctionScale;
            this.add(buttonResume);
            const buttonHome = new Phaser.Button(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 - 120, "texture_atlas_1", this.onClickExit, this);
            buttonHome.anchor.set(0.5);
            buttonHome.setFrames("btn_home_on.png", "btn_home_off.png", "btn_home_on.png", "btn_home_off.png");
            buttonHome.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            buttonHome.scale.y = MafiaBilliardTricks.GameVars.correctionScale;
            this.add(buttonHome);
            const buttonHomeLabel = new Phaser.Text(this.game, buttonHome.x, buttonHome.y + 60, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["BACK_TO_HOME"], { font: "24px american-typewriter-regular", fill: "#FFFFFF" });
            buttonHomeLabel.anchor.set(0.5);
            buttonHomeLabel.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            buttonHomeLabel.scale.y = MafiaBilliardTricks.GameVars.correctionScale;
            this.add(buttonHomeLabel);
            const rematchButton = new MafiaBilliardTricks.TButton(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language].REMATCH, "emptybtns/empty_btn_rematch_off.png", "emptybtns/empty_btn_rematch_on.png", "right", 80, this.onClickRematch, this);
            rematchButton.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            rematchButton.scale.y = MafiaBilliardTricks.GameVars.correctionScale;
            this.add(rematchButton);
            if (this.game.device.touch) {
                this.createHandednessSwitch();
            }
            this.createMusicSwitch();
            this.alpha = 0;
            this.game.add.tween(this)
                .to({ alpha: 1 }, 400, Phaser.Easing.Cubic.Out, true);
        }
        destroy(destroyChildren, soft) {
            super.destroy(destroyChildren, soft);
            PauseLayer.currentInstance = null;
        }
        createMusicSwitch() {
            const switchAudio = new Phaser.Button(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 + 150, "texture_atlas_1", this.onClickAudioButton, this);
            switchAudio.anchor.set(0.0, 0.5);
            switchAudio.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            switchAudio.scale.y = MafiaBilliardTricks.GameVars.correctionScale;
            if (MafiaBilliardTricks.GameVars.gameData.muted) {
                switchAudio.setFrames("switch_off.png", "switch_off.png");
            }
            else {
                switchAudio.setFrames("switch_on.png", "switch_on.png");
            }
            this.add(switchAudio);
            this.switchAudioLabel = new Phaser.Text(this.game, switchAudio.x - 16, switchAudio.y, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["SOUND"] + (MafiaBilliardTricks.GameVars.gameData.muted ? MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["OFF"] : MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["ON"]), { font: "24px american-typewriter-regular", fill: "#FFFFFF" });
            this.switchAudioLabel.anchor.set(1.0, 0.5);
            this.switchAudioLabel.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            this.switchAudioLabel.scale.y = MafiaBilliardTricks.GameVars.correctionScale;
            this.add(this.switchAudioLabel);
        }
        createHandednessSwitch() {
            const switchHandedness = new Phaser.Button(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 + 100, "texture_atlas_1", this.onClickSwitchControlSide, this);
            switchHandedness.anchor.set(0.0, 0.5);
            switchHandedness.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            switchHandedness.scale.y = MafiaBilliardTricks.GameVars.correctionScale;
            if (MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.LEFT) {
                switchHandedness.setFrames("switch_off.png", "switch_off.png");
            }
            else {
                switchHandedness.setFrames("switch_on.png", "switch_on.png");
            }
            this.add(switchHandedness);
            this.switchHandednessLabel = new Phaser.Text(this.game, switchHandedness.x - 16, switchHandedness.y, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["HANDEDNESS"] +
                (MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.LEFT ?
                    MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["LEFT"] : MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["RIGHT"]), { font: "24px american-typewriter-regular", fill: "#FFFFFF" });
            this.switchHandednessLabel.anchor.set(1.0, 0.5);
            this.switchHandednessLabel.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            this.switchHandednessLabel.scale.y = MafiaBilliardTricks.GameVars.correctionScale;
            this.add(this.switchHandednessLabel);
        }
        onClickAudioButton(b) {
            MafiaBilliardTricks.AudioManager.switchAudioState();
            if (MafiaBilliardTricks.GameVars.gameData.muted) {
                MafiaBilliardTricks.AudioManager.stopSound("music_menu");
                b.setFrames("switch_off.png");
            }
            else {
                b.setFrames("switch_on.png");
                MafiaBilliardTricks.AudioManager.playSound("click_btn");
            }
            this.switchAudioLabel.text = MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["SOUND"] + (MafiaBilliardTricks.GameVars.gameData.muted ? MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["OFF"] : MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["ON"]);
        }
        onClickSwitchControlSide(b) {
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
            if (MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.LEFT) {
                MafiaBilliardTricks.GameManager.changeMobileControlsSide(MafiaBilliardTricks.GameConstants.RIGHT);
                b.setFrames("switch_on.png");
            }
            else {
                MafiaBilliardTricks.GameManager.changeMobileControlsSide(MafiaBilliardTricks.GameConstants.LEFT);
                b.setFrames("switch_off.png");
            }
            this.switchHandednessLabel.text = MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["HANDEDNESS"] +
                (MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.LEFT ?
                    MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["LEFT"] : MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["RIGHT"]);
        }
        onClickResume(b) {
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
            b.clearFrames();
            MafiaBilliardTricks.PoolState.currentInstance.hidePauseLayer();
        }
        onClickExit(b) {
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
            MafiaBilliardTricks.GameVars.paused = false;
            MafiaBilliardTricks.GameManager.onClickBack();
        }
        onClickRematch(b) {
            MafiaBilliardTricks.AdHelper.showAd(() => {
                b.clearFrames();
                MafiaBilliardTricks.AudioManager.playSound("click_btn");
                MafiaBilliardTricks.CueContainer.currentInstance = new MafiaBilliardTricks.CueContainer(this.game);
                MafiaBilliardTricks.GameManager.onLevelSelected(MafiaBilliardTricks.GameVars.currentLevel);
                MafiaBilliardTricks.PoolState.currentInstance.hideEndMatchLayer();
            }, this);
        }
        onDownTransparentLayer() {
            MafiaBilliardTricks.PoolState.currentInstance.hidePauseLayer();
        }
    }
    MafiaBilliardTricks.PauseLayer = PauseLayer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class Player {
        constructor(name) {
            this.name = name;
            this.hasAnotherShot = false;
            this.side = "";
            this.calledPocket = -1;
            this.eligibleToSinkBlack = false;
        }
    }
    MafiaBilliardTricks.Player = Player;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class PoolState extends Phaser.State {
        init() {
            MafiaBilliardTricks.AudioManager.stopSound("music_menu", true);
            PoolState.currentInstance = this;
            this.pauseLayer = null;
            this.endMatchLayer = null;
            MafiaBilliardTricks.GameVars.paused = false;
            MafiaBilliardTricks.GameVars.draggingCueBall = false;
            MafiaBilliardTricks.GameVars.timed = false;
            MafiaBilliardTricks.GameVars.turnBased = false;
            MafiaBilliardTricks.GameVars.timeTurnsValue = -1;
            MafiaBilliardTricks.GameVars.turnsLeftStarDivider = -1;
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                MafiaBilliardTricks.MatchManagerBoss.init(this.game);
            }
            else {
                MafiaBilliardTricks.MatchManager.init(this.game);
            }
        }
        create() {
            const tmpBackround = this.add.image(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2, "texture_atlas_2", "background.png");
            tmpBackround.anchor.set(.5);
            tmpBackround.scale.set((MafiaBilliardTricks.GameConstants.GAME_WIDTH / 1019) / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 604);
            this.hud = new MafiaBilliardTricks.HUD(this.game);
            this.add.existing(this.hud);
            this.stageContainer = new MafiaBilliardTricks.StageContainer(this.game);
            this.add.existing(this.stageContainer);
            this.gui = new MafiaBilliardTricks.GUI(this.game);
            this.add.existing(this.gui);
            this.upperHUD = new MafiaBilliardTricks.UpperHUD(this.game);
            this.add.existing(this.upperHUD);
            this.upperStageContainer = new MafiaBilliardTricks.UpperStageContainer(this.game);
            this.add.existing(this.upperStageContainer);
            if (MafiaBilliardTricks.GameVars.timed) {
                this.upperHUD.addTimer(this.stageContainer.timerContainer);
            }
            this.gui.startGame();
            if (!this.showDialogueLayer()) {
                this.startGame();
            }
            this.thinkingText = new Phaser.Text(this.game, this.upperStageContainer.x, this.upperStageContainer.y, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["THINKING"], { font: "36px american-typewriter-regular", fill: "#FFFFFF" });
            this.thinkingText.anchor.set(0.5);
            this.thinkingText.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            this.thinkingText.visible = false;
            this.add.existing(this.thinkingText);
        }
        shutdown() {
            PoolState.currentInstance = null;
            super.shutdown();
        }
        update() {
            super.update();
            if (MafiaBilliardTricks.GameVars.paused) {
                return;
            }
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                MafiaBilliardTricks.MatchManagerBoss.update();
            }
            else {
                MafiaBilliardTricks.MatchManager.update();
            }
        }
        showSpinCircleLayer() {
            if (MafiaBilliardTricks.GameVars.shotRunning && !this.spinCircleLayer) {
                return;
            }
            MafiaBilliardTricks.GameVars.paused = true;
            if (this.tutorialLayer) {
                this.hideTutorialLayer();
            }
            this.spinCircleLayer = new MafiaBilliardTricks.SpinCircleLayer(this.game);
            this.add.existing(this.spinCircleLayer);
            this.spinCircleLayer.suggestSpin();
        }
        hideSpinCircleLayer() {
            this.gui.setRedPointPosition();
            this.spinCircleLayer.destroy();
            MafiaBilliardTricks.GameVars.paused = false;
        }
        showPauseLayer() {
            if (this.pauseLayer) {
                return;
            }
            if (!MafiaBilliardTricks.GameVars.bossMatchActive) {
                MafiaBilliardTricks.MatchManager.pauseTimer();
            }
            MafiaBilliardTricks.GameVars.paused = true;
            this.pauseLayer = new MafiaBilliardTricks.PauseLayer(this.game);
            this.add.existing(this.pauseLayer);
        }
        hidePauseLayer() {
            MafiaBilliardTricks.GUI.overGuiItem = false;
            if (!MafiaBilliardTricks.GameVars.bossMatchActive) {
                MafiaBilliardTricks.MatchManager.resumeTimer();
            }
            MafiaBilliardTricks.GameVars.paused = false;
            this.pauseLayer.destroy();
            this.pauseLayer = null;
        }
        hideThinkingMessage() {
            this.hud.hideThinkingMessage();
        }
        showThinkingMessage() {
            this.hud.showThinkingMessage();
        }
        hidePauseButton() {
            this.gui.setPauseButtonVisible(false);
        }
        showPauseButton() {
            this.gui.setPauseButtonVisible(true);
        }
        showEndMatchLayer() {
            MafiaBilliardTricks.GameVars.paused = true;
            PoolState.currentInstance.gui.visible = false;
            PoolState.currentInstance.hud.visible = false;
            MafiaBilliardTricks.CueContainer.currentInstance.hideCue();
            MafiaBilliardTricks.StageContainer.currentInstance.hideGuide();
            this.endMatchLayer = new MafiaBilliardTricks.EndMatchLayer(this.game);
            this.endMatchLayer.msgBox.init();
            this.add.existing(this.endMatchLayer);
        }
        hideEndMatchLayer() {
            MafiaBilliardTricks.GameVars.paused = false;
            if (this.endMatchLayer) {
                this.endMatchLayer.destroy();
            }
        }
        showTutorialLayer(tutId) {
            if (!MafiaBilliardTricks.GameVars.tutorialActive || MafiaBilliardTricks.GameVars.continueWithTutorial) {
                if (this.tutorialLayer) {
                    this.tutorialLayer.destroy();
                }
                MafiaBilliardTricks.GameVars.tutorialActive = true;
                this.tutorialLayer = new MafiaBilliardTricks.TutorialLayer(this.game);
                this.add.existing(this.tutorialLayer);
                this.tutorialLayer.init(tutId);
            }
        }
        hideTutorialLayer() {
            MafiaBilliardTricks.GameVars.paused = false;
            this.tutorialLayer.destroy();
        }
        ballShot() {
            if (MafiaBilliardTricks.GameVars.paused) {
                return;
            }
            this.setCueballButtonInputEnabled(false);
            this.hud.ballShot();
            this.gui.ballHasBeenShot();
            if (this.gui.fineDial) {
                this.gui.fineDial.tweenOut();
            }
            this.stageContainer.ballHasBeenShot();
        }
        newTurn() {
            this.setCueballButtonInputEnabled(true);
            this.hud.newTurn();
            this.gui.newTurn();
            this.stageContainer.newTurn();
        }
        setCueballButtonInputEnabled(enabled) {
            this.gui.setCueballButtonInputEnabled(enabled);
        }
        hideMobileControls() {
            this.gui.fineDial.hide();
            this.gui.forceSettingContainer.hide();
        }
        changeMobileControlsSide() {
            if (this.gui.forceSettingContainer) {
                this.gui.forceSettingContainer.changeSide();
            }
            if (this.gui.fineDial) {
                this.gui.fineDial.changeSide();
            }
        }
        render() {
            if (MafiaBilliardTricks.GameConstants.DEVELOPMENT) {
                this.game.debug.text(this.game.time.fps.toString(), 8, 100, "#00ff00");
            }
        }
        updateTurnsCounter(scorePercentage) {
            if (!MafiaBilliardTricks.GameVars.bossMatchActive && this.gui.starsBox) {
                this.gui.starsBox.changeStarsBoxFullMask(scorePercentage, false, 0.5);
            }
        }
        updateActualScore(scorePercentage) {
            if (!MafiaBilliardTricks.GameVars.bossMatchActive && this.gui.starsBox) {
                this.gui.starsBox.changeStarsBoxFullMask(scorePercentage, false, 0.5);
            }
        }
        hideDialogueLayer() {
            this.setupGameAfterDialogue();
        }
        showDialogueLayer() {
            if (!MafiaBilliardTricks.GameVars.levelDialogueAlreadyRun) {
                this.newDialogueLayer = new MafiaBilliardTricks.DialogueLayer(this.game, this, true);
                this.add.existing(this.newDialogueLayer);
                if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                    this.newDialogueLayer.loadDialogue("boss_" + MafiaBilliardTricks.GameVars.currentBoss);
                }
                else {
                    this.newDialogueLayer.loadDialogue(MafiaBilliardTricks.GameVars.currentLevel.toString());
                }
                if (!this.newDialogueLayer.init()) {
                    return false;
                }
                else {
                    MafiaBilliardTricks.AudioManager.playSound("music_dialogue", true);
                }
                MafiaBilliardTricks.MatchManager.pauseTimer();
                MafiaBilliardTricks.GameVars.paused = true;
                let cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
                if (cueBall) {
                    if (cueBall.handIcon) {
                        cueBall.handIcon.visible = false;
                    }
                }
                this.gui.visible = false;
                this.hud.visible = false;
                this.upperHUD.visible = false;
                MafiaBilliardTricks.CueContainer.currentInstance.hideCue(true);
                MafiaBilliardTricks.StageContainer.currentInstance.hideGuide();
                MafiaBilliardTricks.GameVars.levelDialogueAlreadyRun = true;
                return true;
            }
            else {
                return false;
            }
        }
        setupGameAfterDialogue() {
            MafiaBilliardTricks.AudioManager.stopSound("music_dialogue", true);
            this.newDialogueLayer.destroy();
            MafiaBilliardTricks.GameVars.paused = false;
            if (MafiaBilliardTricks.GameVars.timed) {
                MafiaBilliardTricks.MatchManager.resumeTimer();
            }
            let cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            if (cueBall) {
                if (cueBall.handIcon) {
                    cueBall.handIcon.visible = true;
                }
            }
            this.gui.visible = true;
            this.hud.visible = true;
            this.upperHUD.visible = true;
            MafiaBilliardTricks.CueContainer.currentInstance.showCue();
            MafiaBilliardTricks.StageContainer.currentInstance.showGuide();
            this.startGame();
        }
        startGame() {
            if (!MafiaBilliardTricks.GameVars.bossMatchActive) {
                MafiaBilliardTricks.MatchManager.startGame();
            }
            else {
                MafiaBilliardTricks.MatchManagerBoss.startGame();
            }
        }
    }
    MafiaBilliardTricks.PoolState = PoolState;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class SelectPockets extends Phaser.Group {
        constructor(game) {
            super(game, null, "select-pocket");
            this.canSelect = true;
            this.pockets = [];
            for (let i = 0; i < 6; i++) {
                let x = MafiaBilliardTricks.GameVars.pocketArray[i].position.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                let y = MafiaBilliardTricks.GameVars.pocketArray[i].position.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                let pocket = new Phaser.Image(this.game, x, y, "texture_atlas_1", "pocket_mark.png");
                pocket.anchor.set(0.5);
                pocket.name = MafiaBilliardTricks.GameVars.pocketArray[i].id.toString();
                pocket.inputEnabled = true;
                pocket.events.onInputUp.add(this.onPocketDown, this);
                this.add(pocket);
                this.pockets.push(pocket);
            }
            this.visible = false;
        }
        showChoiceOfPockets() {
            this.alpha = 1;
            this.hideSelectPockets();
            MafiaBilliardTricks.MatchManagerBoss.activePlayer.calledPocket = -1;
            MafiaBilliardTricks.MatchManagerBoss.setIsSelectingPocket(true);
            this.visible = true;
            this.canSelect = true;
            this.tweens = [];
            for (let i = 0; i < 6; i++) {
                let tween = this.game.add.tween(this.pockets[i])
                    .to({ alpha: [0, 1] }, 2000, Phaser.Easing.Linear.None, true, 0, -1);
                this.tweens.push(tween);
            }
        }
        hideSelectPockets() {
            if (!this.visible) {
                return;
            }
            MafiaBilliardTricks.MatchManagerBoss.setIsSelectingPocket(false);
            this.visible = false;
            for (let i = 0; i < 6; i++) {
                this.game.tweens.remove(this.tweens[i]);
                this.pockets[i].alpha = 1;
            }
        }
        showSelectedPocket(num) {
            for (let i = 0; i < 6; i++) {
                this.game.tweens.remove(this.tweens[i]);
                if (parseInt(this.pockets[i].name) === num) {
                    this.pockets[i].alpha = .6;
                }
                else {
                    this.pockets[i].alpha = 0;
                }
            }
            MafiaBilliardTricks.MatchManagerBoss.setIsSelectingPocket(false);
        }
        setSelectedPocket(pocketId) {
            if (!this.canSelect) {
                return;
            }
            this.canSelect = false;
            for (let i = 0; i < 6; i++) {
                this.game.tweens.remove(this.tweens[i]);
                if (parseInt(this.pockets[i].name) === pocketId) {
                    this.pockets[i].alpha = .6;
                }
                else {
                    this.pockets[i].alpha = 0;
                }
            }
            MafiaBilliardTricks.MatchManagerBoss.setIsSelectingPocket(false);
            MafiaBilliardTricks.MatchManagerBoss.activePlayer.calledPocket = pocketId;
            MafiaBilliardTricks.GUI.overGuiItem = false;
        }
        onPocketDown(img) {
            if (MafiaBilliardTricks.MatchManagerBoss.activePlayer.name === MafiaBilliardTricks.GameConstants.BOT) {
                return;
            }
            const pocketId = parseInt(img.name);
            this.setSelectedPocket(pocketId);
        }
    }
    MafiaBilliardTricks.SelectPockets = SelectPockets;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class StageContainer extends Phaser.Group {
        static onContact(contactEvent) {
            let ball = contactEvent.ball;
            let contact = {
                collisionType: contactEvent.collisionType,
                type: null,
                target: null,
                targetVelocity: null,
                position: ball.position,
                targetPosition: contactEvent.target.position,
                velocity: null,
                screw: ball.screw,
                deltaScrew: null,
            };
            if (contactEvent.collisionType === Billiard.Engine.BALL) {
                MafiaBilliardTricks.AudioManager.playSound("ball_hit");
                if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                    MafiaBilliardTricks.MatchManagerBoss.setTouchedBall(ball.id);
                    if (ball.id !== 0) {
                        MafiaBilliardTricks.MatchManagerBoss.touchedAnyBall = true;
                    }
                }
                else {
                    if (ball.id === 0 || contactEvent.target.id === 0) {
                        if (ball.id !== 0) {
                            let ballPos = new Billiard.Vector2D(ball.position.x, ball.position.y);
                            let targetBallPos = new Billiard.Vector2D(contactEvent.target.position.x, contactEvent.target.position.y);
                            let contactPos = (ballPos.minus(targetBallPos)).times(0.5);
                            MafiaBilliardTricks.MatchManager.setTouchedBall(ball.id, ballPos.minus(contactPos));
                        }
                        else {
                            MafiaBilliardTricks.MatchManager.setTouchedBall(contactEvent.target.id);
                        }
                    }
                }
                contact.target = contactEvent.target;
                contact.targetVelocity = contactEvent.targetVelocity;
                contact.deltaScrew = contactEvent.deltaScrew;
                contact.type = contactEvent.collisionType;
                ball.contactArray.push(contact);
            }
            else if (contactEvent.collisionType === Billiard.Engine.VERTEX || contactEvent.collisionType === Billiard.Engine.LINE) {
                MafiaBilliardTricks.AudioManager.playSound("cushion_hit");
                if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                    MafiaBilliardTricks.MatchManagerBoss.touchedAnyCushion = true;
                }
                ball.contactArray.push(contact);
            }
            else if (contactEvent.collisionType === Billiard.Engine.POCKET && !ball.mc.pocketTween) {
                MafiaBilliardTricks.AudioManager.playSound("pocket_hit");
                ball.active = false;
                ball.contactArray.push(contact);
                if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                    MafiaBilliardTricks.MatchManagerBoss.ballPocketed(contactEvent);
                }
                else {
                    MafiaBilliardTricks.MatchManager.ballPocketed(contactEvent);
                }
                StageContainer.currentInstance.playPocketAnimation(contactEvent);
            }
        }
        constructor(game) {
            super(game, null, "stage-container");
            StageContainer.currentInstance = this;
            this.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            this.position.set(MafiaBilliardTricks.GameConstants.TABLE_POS_X, MafiaBilliardTricks.GameConstants.TABLE_POS_Y);
            this.tunnelContainer = new Phaser.Group(this.game);
            if (MafiaBilliardTricks.GameConstants.DEBUG) {
                this.tunnelContainer.visible = false;
            }
            this.add(this.tunnelContainer);
            if (MafiaBilliardTricks.GameConstants.DEBUG) {
                this.addDebugObjectsContainer();
            }
            else {
                this.debugObjectContainer = null;
            }
            let pocketBackground = new Phaser.Image(this.game, 0, 0, "texture_atlas_2", "pockets.png");
            pocketBackground.anchor.set(.5);
            this.tunnelContainer.add(pocketBackground);
            let cloth = new Phaser.Image(this.game, 0, 0, "texture_atlas_2", "cloth.png");
            cloth.anchor.set(.5);
            if (MafiaBilliardTricks.GameConstants.DEBUG) {
                cloth.visible = false;
            }
            this.add(cloth);
            this.timerContainer = new Phaser.Group(this.game);
            this.add(this.timerContainer);
            this.glows = [];
            for (let i = 0; i < MafiaBilliardTricks.GameVars.pocketArray.length; i++) {
                let glow = new Phaser.Image(this.game, MafiaBilliardTricks.GameVars.pocketArray[i].position.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, MafiaBilliardTricks.GameVars.pocketArray[i].position.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE, "texture_atlas_1", "glow.png");
                glow.anchor.set(.5);
                glow.alpha = 0;
                glow.visible = false;
                this.add(glow);
                this.glows.push(glow);
            }
            this.ballsContainer = new MafiaBilliardTricks.BallsContainer(this.game);
            this.add(this.ballsContainer);
            let tableTop = new Phaser.Image(this.game, 0, 0, "texture_atlas_2", "tableTop.png");
            tableTop.anchor.set(.5);
            if (MafiaBilliardTricks.GameConstants.DEBUG) {
                tableTop.visible = false;
            }
            this.add(tableTop);
            let ornamentBullets = new Phaser.Image(this.game, 0, 0, "texture_atlas_2", "ornamentSet_0.png");
            ornamentBullets.anchor.set(.5);
            this.add(ornamentBullets);
            this.createTableOrnaments(0, tableTop.x - 3, tableTop.y - 6, tableTop.width - 6, tableTop.height - 8);
            this.selectPockets = new MafiaBilliardTricks.SelectPockets(this.game);
            this.add(this.selectPockets);
            this.guideContainer = new MafiaBilliardTricks.GuideContainer(this.game);
            this.add(this.guideContainer);
            this.billiardEngine = new Billiard.Engine(StageContainer.onContact, MafiaBilliardTricks.GameVars.ballArray, MafiaBilliardTricks.GameVars.lineArray, MafiaBilliardTricks.GameVars.vertexArray, MafiaBilliardTricks.GameVars.pocketArray);
            this.billiardEngine.friction = MafiaBilliardTricks.GameConstants.FRICTION;
            this.billiardEngine.ballRadius = MafiaBilliardTricks.GameConstants.BALL_RADIUS;
            this.billiardEngine.pocketRadius = MafiaBilliardTricks.GameConstants.POCKET_RADIUS;
            this.billiardEngine.physScale = MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            this.billiardEngine.minVelocity = MafiaBilliardTricks.GameConstants.MIN_VELOCITY;
            this.billiardEngine.cushionRestitution = MafiaBilliardTricks.GameConstants.CUSHION_RESTITUTION;
            this.billiardEngine.ballRestitution = MafiaBilliardTricks.GameConstants.BALL_RESTITUTION;
            this.ballsContainer.startGame();
        }
        update() {
            super.update();
            if (MafiaBilliardTricks.GameVars.paused) {
                return;
            }
            if (MafiaBilliardTricks.GameVars.shotRunning) {
                this.billiardEngine.update();
                for (let i = 0, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                    let ball = MafiaBilliardTricks.GameVars.ballArray[i];
                    if (ball.active && ball.velocity.magnitudeSquared !== 0) {
                        ball.mc.x = ball.position.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                        ball.mc.y = ball.position.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                        ball.shadow.x = ball.mc.x + .35 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE * (ball.mc.x / 300);
                        ball.shadow.y = ball.mc.y + .35 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE * (ball.mc.y / 150);
                        ball.mc.updateRotation(ball.velocity.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE * ball.grip, ball.velocity.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE * ball.grip, ball.ySpin);
                    }
                }
            }
        }
        newTurn() {
            MafiaBilliardTricks.UpperStageContainer.currentInstance.newTurn();
            this.showGuide();
            this.ballsContainer.newTurn();
        }
        ballHasBeenShot() {
            MafiaBilliardTricks.AudioManager.playSound("cue_hit");
            MafiaBilliardTricks.UpperStageContainer.currentInstance.ballHasBeenShot();
            this.hideGuide();
            this.ballsContainer.ballHasBeenShot();
        }
        setCueBall() {
            this.ballsContainer.setCueBall();
        }
        hideGuide() {
            this.guideContainer.disableDesiredAngleGuide();
            this.guideContainer.visible = false;
        }
        showGuide() {
            this.guideContainer.visible = true;
        }
        setDesiredAimAngle(desiredAngle) {
            this.guideContainer.setDesiredAngle(desiredAngle);
            MafiaBilliardTricks.UpperStageContainer.currentInstance.setDesiredAimAngle(desiredAngle);
        }
        showChoiceOfPockets() {
            this.selectPockets.showChoiceOfPockets();
        }
        setSelectedPocket(id) {
            this.selectPockets.setSelectedPocket(id);
        }
        hideSelectPocket() {
            this.selectPockets.hideSelectPockets();
        }
        alphaSelectPocket() {
            this.selectPockets.alpha = .3;
            MafiaBilliardTricks.GameVars.selectingPocket = false;
        }
        createTableOrnaments(id, parentX, parentY, width, height) {
            const xStart = -300;
            const xInterval = 80;
            let y = -(height / 2) + 50;
            let x = xStart;
            for (let i = 0; i < 12; i++) {
                let ornament = new Phaser.Image(this.game, x + parentX, y + parentY, "texture_atlas_2", "ornament_" + id + ".png");
                ornament.anchor.set(.5);
                this.add(ornament);
                x += xInterval;
                if (i === 2 || i === 8) {
                    x = -xStart - xInterval - xInterval;
                }
                if (i === 5) {
                    y *= -1;
                    x = xStart;
                }
            }
            const yInterval = 80;
            const yStart = -yInterval;
            y = yStart;
            x = (-((width) / 2) + 48);
            for (let i = 0; i < 6; i++) {
                let ornament = new Phaser.Image(this.game, x + parentX, y + parentY, "texture_atlas_2", "ornament_" + id + ".png");
                ornament.anchor.set(.5);
                this.add(ornament);
                y += yInterval;
                if (i === 2) {
                    x *= -1;
                    y = yStart;
                }
            }
        }
        playPocketAnimation(contactEvent) {
            let ball = contactEvent.ball;
            let pocket = contactEvent.target;
            let speed = contactEvent.speed;
            ball.mc.pocketTween = true;
            if (ball.id === 0) {
                ball.shadow.visible = false;
            }
            else {
                ball.shadow.parent.removeChild(ball.shadow);
                ball.shadow = null;
            }
            let t;
            if (speed < 1e3) {
                t = 150;
            }
            else if (speed < 2e3) {
                t = 120;
            }
            else if (speed < 3e3) {
                t = 90;
            }
            else if (speed < 5e3) {
                t = 60;
            }
            else {
                t = 30;
            }
            this.game.add.tween(ball.mc.scale)
                .to({ x: .925, y: .925 }, t, Phaser.Easing.Cubic.Out, true);
            ball.velocity = new Billiard.Vector2D((pocket.dropPosition.x - ball.mc.x) / t, (pocket.dropPosition.y - ball.mc.y) / t);
            this.game.add.tween(ball.mc)
                .to({
                x: pocket.dropPosition.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE,
                y: pocket.dropPosition.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE
            }, t, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                ball.mc.parent.removeChild(ball.mc);
                this.tunnelContainer.add(ball.mc);
                this.game.add.tween(ball.mc.scale)
                    .to({ x: .65, y: .65 }, 1.75 * t, Phaser.Easing.Linear.None, true);
                ball.velocity = new Billiard.Vector2D((.7 * pocket.dropPosition.x - ball.mc.x) / t, (.7 * pocket.dropPosition.y - ball.mc.y) / t);
                let pocketTween = this.game.add.tween(ball.mc)
                    .to({
                    x: 0.7 * pocket.dropPosition.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE,
                    y: 0.7 * pocket.dropPosition.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE
                }, 1.75 * t, Phaser.Easing.Linear.None, true);
                if (ball.id === 0 && !MafiaBilliardTricks.GameVars.bossMatchActive) {
                    pocketTween.onComplete.add(this.releaseCueBall, this, 0, [contactEvent]);
                }
                else {
                    pocketTween.onComplete.add(function () {
                        ball.velocity = new Billiard.Vector2D(0, 0);
                        this.tunnelContainer.removeChild(ball.mc);
                        ball.mc.pocketTween = false;
                    }, this);
                }
            }, this);
        }
        releaseCueBall(ball, tween, args) {
            const cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            const contactEvent = args[0];
            const pocket = contactEvent.target;
            let outPocketId;
            let outVelocity;
            switch (pocket.id) {
                case 0:
                    outPocketId = 3;
                    outVelocity = new Billiard.Vector2D(-1, -1).normalize().times(200);
                    break;
                case 1:
                    outPocketId = 4;
                    outVelocity = new Billiard.Vector2D(0, -1).normalize().times(200);
                    break;
                case 2:
                    outPocketId = 5;
                    outVelocity = new Billiard.Vector2D(1, -1).normalize().times(200);
                    break;
                case 3:
                    outPocketId = 0;
                    outVelocity = new Billiard.Vector2D(1, 1).normalize().times(200);
                    break;
                case 4:
                    outPocketId = 1;
                    outVelocity = new Billiard.Vector2D(0, 1).normalize().times(200);
                    break;
                case 5:
                    outPocketId = 2;
                    outVelocity = new Billiard.Vector2D(-1, 1).normalize().times(200);
                    break;
                default:
            }
            const outPocket = MafiaBilliardTricks.GameVars.pocketArray[outPocketId];
            const tweenTime = 200;
            this.game.add.tween(cueBall.mc.scale)
                .to({ x: 1, y: 1 }, tweenTime, Phaser.Easing.Linear.None, true);
            this.game.add.tween(cueBall.mc)
                .to({
                x: outPocket.position.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE,
                y: outPocket.position.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE
            }, tweenTime, Phaser.Easing.Linear.None, true)
                .onComplete.add(function () {
                const x = cueBall.mc.x;
                const y = cueBall.mc.y;
                this.tunnelContainer.removeChild(cueBall.mc);
                this.ballsContainer.add(cueBall.mc);
                cueBall.position.x = x / MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                cueBall.position.y = y / MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                cueBall.shadow.visible = true;
                cueBall.velocity = outVelocity;
                cueBall.active = true;
                let glow = this.glows[outPocketId];
                glow.visible = true;
                this.game.add.tween(glow)
                    .to({ alpha: 1 }, 120, Phaser.Easing.Cubic.Out, true, 0, 0, true)
                    .onComplete.add(function () {
                    this.glows[outPocketId].visible = false;
                }, this);
                cueBall.mc.pocketTween = false;
            }, this);
        }
        addDebugObjectsContainer() {
            this.debugObjectContainer = new MafiaBilliardTricks.DebugObjectsContainer(this.game);
            this.add(this.debugObjectContainer);
            for (let i = 0; i < MafiaBilliardTricks.GameVars.pocketArray.length; i++) {
                this.debugObjectContainer.drawPoint(MafiaBilliardTricks.GameVars.pocketArray[i].position, MafiaBilliardTricks.DebugObjectsContainer.RED);
                this.debugObjectContainer.drawPoint(MafiaBilliardTricks.GameVars.pocketArray[i].dropPosition, MafiaBilliardTricks.DebugObjectsContainer.GREEN);
                this.debugObjectContainer.drawCircle(MafiaBilliardTricks.GameVars.pocketArray[i].position, MafiaBilliardTricks.GameConstants.POCKET_RADIUS, MafiaBilliardTricks.DebugObjectsContainer.WHITE);
            }
            for (let i = 0; i < MafiaBilliardTricks.GameVars.lineArray.length; i++) {
                this.debugObjectContainer.drawLine(MafiaBilliardTricks.GameVars.lineArray[i].p1, MafiaBilliardTricks.GameVars.lineArray[i].p2, MafiaBilliardTricks.DebugObjectsContainer.GREEN);
            }
        }
    }
    StageContainer.CUSHION_VERTEXES = [
        new Billiard.Point(-42e3 + MafiaBilliardTricks.GameConstants.BALL_RADIUS, -21e3 + MafiaBilliardTricks.GameConstants.BALL_RADIUS),
        new Billiard.Point(42e3 - MafiaBilliardTricks.GameConstants.BALL_RADIUS, -21e3 + MafiaBilliardTricks.GameConstants.BALL_RADIUS),
        new Billiard.Point(42e3 - MafiaBilliardTricks.GameConstants.BALL_RADIUS, 21e3 - MafiaBilliardTricks.GameConstants.BALL_RADIUS),
        new Billiard.Point(-42e3 + MafiaBilliardTricks.GameConstants.BALL_RADIUS, 21e3 - MafiaBilliardTricks.GameConstants.BALL_RADIUS),
        new Billiard.Point(-42e3 + MafiaBilliardTricks.GameConstants.BALL_RADIUS, -21e3 + MafiaBilliardTricks.GameConstants.BALL_RADIUS)
    ];
    StageContainer.CORNER_CASE_CUSHION_VERTEXES = [
        new Billiard.Point(-42e3, -21e3),
        new Billiard.Point(42e3, -21e3),
        new Billiard.Point(42e3, 21e3),
        new Billiard.Point(-42e3, 21e3),
        new Billiard.Point(-42e3, -21e3)
    ];
    MafiaBilliardTricks.StageContainer = StageContainer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class UpperStageContainer extends Phaser.Group {
        constructor(game) {
            super(game, null, "upper-stage-container");
            UpperStageContainer.currentInstance = this;
            this.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            this.position.set(MafiaBilliardTricks.GameConstants.TABLE_POS_X, MafiaBilliardTricks.GameConstants.TABLE_POS_Y);
            this.cueContainer = new MafiaBilliardTricks.CueContainer(this.game);
            this.add(this.cueContainer);
            this.cueContainer.startGame();
        }
        newTurn() {
            this.cueContainer.showCue();
            this.cueContainer.aimHelper();
        }
        ballHasBeenShot() {
            this.cueContainer.hideCue();
        }
        setDesiredAimAngle(desiredAngle) {
            this.cueContainer.setDesiredAngle(desiredAngle);
        }
    }
    MafiaBilliardTricks.UpperStageContainer = UpperStageContainer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class Ball extends Phaser.Group {
        constructor(game, ballRadius, n, ballObject) {
            super(game, null, "ball");
            this.n = n;
            this.ballObject = ballObject;
            this.pocketTween = false;
            this.ballRotation = [1, 0, 0, 0];
            this.circRad = ballRadius;
            let spriteSheetPrefix = "";
            if (this.n <= 8) {
                this.ballType = MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID;
                spriteSheetPrefix = "balls/solid_";
            }
            else {
                this.ballType = MafiaBilliardTricks.GameConstants.BALL_TYPE_STRIPED;
            }
            this.sprite = new Phaser.Image(game, 0, 0, "texture_atlas_1");
            this.sprite.width = 2 * this.circRad * 1.12;
            this.sprite.height = 2 * this.circRad * 1.12;
            this.sprite.anchor.set(.5);
            this.addChild(this.sprite);
            if (this.ballType === MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID) {
                this.sprite.frameName = spriteSheetPrefix + this.n.toString() + ".png";
            }
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                this.spotHolder = new Phaser.Group(game, this, "spotHolder");
                this.add(this.spotHolder);
                this.spot = new Phaser.Image(game, 0, 0, "texture_atlas_1");
                this.spot.anchor.set(.5);
                this.spot.frameName = "spot_" + n + ".png";
                this.spotHolder.addChild(this.spot);
            }
            else {
                if (this.n === 0 || this.n === 8) {
                    this.spotHolder = new Phaser.Group(game, this, "spotHolder");
                    this.add(this.spotHolder);
                    this.spot = new Phaser.Image(game, 0, 0, "texture_atlas_1");
                    this.spot.anchor.set(.5);
                    this.spot.frameName = "spot_" + this.n + ".png";
                    this.spotHolder.addChild(this.spot);
                }
                else {
                    this.spotHolder = null;
                    this.spot = null;
                }
            }
            this.shade = new Phaser.Image(game, 0, 0, "texture_atlas_1", "shade.png");
            this.shade.anchor.set(.5);
            this.shade.width = 2.2 * this.circRad;
            this.shade.height = 2.2 * this.circRad;
            this.addChild(this.shade);
            this.updateRotation(10 * Math.random() - 5, 10 * Math.random() - 5, 10 * Math.random() - 5);
        }
        update() {
            if (this.pocketTween) {
                this.updateRotation(this.ballObject.velocity.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE * this.ballObject.grip, this.ballObject.velocity.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE * this.ballObject.grip, this.ballObject.ySpin);
            }
            super.update();
        }
        updateRotation(t, s, h) {
            const r = Math.sqrt(t * t + h * h + s * s);
            if (r > 0.1) {
                this.ballRotation = this.rotateQuat(this.ballRotation, h / r, -t / r, s / r, r / this.circRad);
                this.ballRotation = this.normalize(this.ballRotation);
                this.renderBall(this.ballRotation);
            }
        }
        setAsBlankBall() {
            this.sprite.frameName = "balls/solid_0.png";
        }
        rotateQuat(q, x, y, z, angle) {
            const n = Math.sqrt(x * x + y * y + z * z);
            const nx = x / n;
            const ny = y / n;
            const nz = z / n;
            const s = Math.sin(.5 * angle);
            const q2x = nx * s;
            const q2y = ny * s;
            const q2z = nz * s;
            const q2w = Math.cos(.5 * angle);
            const q1x = q[0];
            const q1y = q[1];
            const q1z = q[2];
            const q1w = q[3];
            const dx = q1x * q2w + q1y * q2z - q1z * q2y + q1w * q2x;
            const dy = -q1x * q2z + q1y * q2w + q1z * q2x + q1w * q2y;
            const dz = q1x * q2y - q1y * q2x + q1z * q2w + q1w * q2z;
            const dw = -q1x * q2x - q1y * q2y - q1z * q2z + q1w * q2w;
            const q_ = [];
            q_[0] = dx;
            q_[1] = dy;
            q_[2] = dz;
            q_[3] = dw;
            return q_;
        }
        renderBall(q) {
            const qy = q[0];
            const qx = q[1];
            const qz = q[2];
            const qw = q[3];
            const rotationY = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz) + Math.PI;
            const rotationX = Math.asin(2 * qx * qy + 2 * qz * qw) + Math.PI;
            const test = qx * qy + qz * qw;
            if (!(test > .499 || test < -.499)) {
                this.angle = Billiard.Maths._180_DIV_PI * rotationY;
                this.shade.angle = -this.angle;
                if (this.ballType === MafiaBilliardTricks.GameConstants.BALL_TYPE_STRIPED) {
                    const v = (rotationX - Billiard.Maths.PI_2) / Math.PI;
                    const rotationIndex = 41 - Math.round(41 * v);
                    this.sprite.frameName = "balls/stripes_" + (this.n) + "_" + rotationIndex.toString() + ".png";
                }
                if (this.spotHolder) {
                    const rotationZ = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz) + Math.PI;
                    if (rotationX < Billiard.Maths.PI_2 || rotationX > 3 * Billiard.Maths.PI_2) {
                        if (rotationZ > Billiard.Maths.PI_2 && rotationZ < 3 * Billiard.Maths.PI_2) {
                            this.spotHolder.y = this.circRad * Math.cos(rotationZ) * Math.sin(rotationX);
                            this.spotHolder.x = this.circRad * Math.sin(rotationZ);
                        }
                        else {
                            this.spotHolder.y = -this.circRad * Math.cos(rotationZ) * Math.sin(rotationX);
                            this.spotHolder.x = -this.circRad * Math.sin(rotationZ);
                        }
                    }
                    else {
                        if (rotationZ > Billiard.Maths.PI_2 && rotationZ < 3 * Billiard.Maths.PI_2) {
                            this.spotHolder.y = -this.circRad * Math.cos(rotationZ) * Math.sin(rotationX);
                            this.spotHolder.x = -this.circRad * Math.sin(rotationZ);
                        }
                        else {
                            this.spotHolder.y = this.circRad * Math.cos(rotationZ) * Math.sin(rotationX);
                            this.spotHolder.x = this.circRad * Math.sin(rotationZ);
                        }
                    }
                    const dist = Math.sqrt(this.spotHolder.x * this.spotHolder.x + this.spotHolder.y * this.spotHolder.y);
                    const distRatio = dist / this.circRad;
                    const scaleY = Math.cos(distRatio * Billiard.Maths.PI_2);
                    const spotDir = Math.atan2(this.spotHolder.y, this.spotHolder.x);
                    if (scaleY < 0.1) {
                        this.spotHolder.visible = false;
                    }
                    else {
                        const spotScale = 0.8;
                        this.spotHolder.visible = true;
                        this.spotHolder.scale.set(.8, scaleY * spotScale);
                    }
                    this.spotHolder.angle = Billiard.Maths._180_DIV_PI * spotDir + 90;
                    this.spot.angle = -this.spotHolder.angle;
                }
            }
        }
        normalize(q) {
            const len = Math.sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
            return [q[0] / len, q[1] / len, q[2] / len, q[3] / len];
        }
    }
    MafiaBilliardTricks.Ball = Ball;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class BallObject {
        constructor(game, n, x, y) {
            this.game = game;
            this.id = n;
            this.shadow = new Phaser.Image(this.game, 0, 0, "texture_atlas_1", "shadow.png");
            this.shadow.anchor.set(.5);
            this.position = new Billiard.Vector2D(x, y);
            this.velocity = new Billiard.Vector2D(0, 0);
            this.lastCollisionObject = null;
            this.active = true;
            this.firstContact = false;
            this.contactArray = [];
            this.mc = new MafiaBilliardTricks.Ball(this.game, MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE, n, this);
            this.grip = 1;
            this.ySpin = 0;
            this.mc.x = this.position.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            this.mc.y = this.position.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            this.shadow.x = this.mc.x + .35 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE * (this.mc.x / 300);
            this.shadow.y = this.mc.y + .35 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE * (this.mc.y / 150);
            if (this.id === 0) {
                this.screw = 0;
                this.english = 0;
                this.deltaScrew = new Billiard.Vector2D(0, 0);
            }
            this.isGhostBall = false;
            this.isnonEssentialCueBall = false;
        }
        destroy() {
            this.velocity = new Billiard.Vector2D(0, 0);
            this.game.add.tween(this.mc)
                .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.mc.scale)
                .to({ x: 1.25, y: 1.25 }, 300, Phaser.Easing.Cubic.Out, true);
            this.active = false;
            this.shadow.destroy();
        }
    }
    MafiaBilliardTricks.BallObject = BallObject;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class BallsContainer extends Phaser.Group {
        constructor(game) {
            super(game, null, "balls-container");
            BallsContainer.currentInstance = this;
            this.shadowsContainer = new Phaser.Group(this.game);
            this.add(this.shadowsContainer);
        }
        destroy(destroyChildren, soft) {
            BallsContainer.currentInstance = null;
            super.destroy(destroyChildren, soft);
        }
        update() {
            super.update();
            const cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            if (MafiaBilliardTricks.GameVars.draggingCueBall) {
                cueBall.update();
            }
            if (MafiaBilliardTricks.GameConstants.DEBUG && MafiaBilliardTricks.GameConstants.SHOW_CUE_BALL_TRAJECTORY) {
                MafiaBilliardTricks.StageContainer.currentInstance.debugObjectContainer.drawCueBallTrajectoryPoint(cueBall.position, MafiaBilliardTricks.DebugObjectsContainer.RED);
            }
        }
        startGame() {
            for (let i = 0; i < MafiaBilliardTricks.GameVars.ballArray.length; i++) {
                this.add(MafiaBilliardTricks.GameVars.ballArray[i].mc);
                this.shadowsContainer.add(MafiaBilliardTricks.GameVars.ballArray[i].shadow);
            }
        }
        newTurn() {
            const cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            cueBall.firstContact = false;
        }
        ballHasBeenShot() {
            if (MafiaBilliardTricks.GameConstants.DEBUG) {
                MafiaBilliardTricks.StageContainer.currentInstance.debugObjectContainer.clearCueBallGraphics();
            }
        }
        setCueBall() {
            const cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
            if (!cueBall.active) {
                cueBall.active = true;
                cueBall.mc.pocketTween = false;
                cueBall.velocity = new Billiard.Vector2D(0, 0);
                cueBall.grip = 1;
                cueBall.ySpin = 0;
                cueBall.screw = 0;
                cueBall.english = 0;
                cueBall.deltaScrew = new Billiard.Vector2D(0, 0);
                let x = MafiaBilliardTricks.GameConstants.BALLS_INITIAL_POSITIONS[0][0];
                let y = MafiaBilliardTricks.GameConstants.BALLS_INITIAL_POSITIONS[0][1];
                while (!MafiaBilliardTricks.CueBallObject.isValidPosition(x, y)) {
                    y -= MafiaBilliardTricks.GameConstants.BALL_RADIUS;
                }
                cueBall.position = new Billiard.Vector2D(x, y);
                cueBall.mc.scale.set(1);
                cueBall.mc.x = cueBall.position.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                cueBall.mc.y = cueBall.position.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE;
                cueBall.shadow.visible = true;
                cueBall.shadow.x = cueBall.mc.x + .35 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE * (cueBall.mc.x / 300);
                cueBall.shadow.y = cueBall.mc.y + .35 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE * (cueBall.mc.y / 150);
                this.add(cueBall.mc);
                cueBall.mc.alpha = 0;
                cueBall.shadow.alpha = 0;
                this.game.add.tween(cueBall.mc)
                    .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true);
                this.game.add.tween(cueBall.shadow)
                    .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true);
            }
            if (MafiaBilliardTricks.MatchManagerBoss.activePlayer.name !== MafiaBilliardTricks.GameConstants.BOT) {
                cueBall.addHandIcon();
            }
        }
    }
    MafiaBilliardTricks.BallsContainer = BallsContainer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class CueBallObject extends MafiaBilliardTricks.BallObject {
        static changePosition(x, y) {
            let newX = x;
            let newY = y;
            let upperLeftCushionPoint = MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[0];
            let lowerRightCushionPoint = MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[2];
            if (x < upperLeftCushionPoint.x) {
                newX = upperLeftCushionPoint.x * .999;
            }
            else if (x > lowerRightCushionPoint.x) {
                newX = lowerRightCushionPoint.x * .999;
            }
            if (y < upperLeftCushionPoint.y) {
                newY = upperLeftCushionPoint.y * .999;
            }
            else if (y > lowerRightCushionPoint.y) {
                newY = lowerRightCushionPoint.y * .999;
            }
            if (MafiaBilliardTricks.MatchManagerBoss.firstShot && x > -21000) {
                newX = -21000;
            }
            for (let i = 1, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                if (MafiaBilliardTricks.GameVars.ballArray[i].active) {
                    let dx = MafiaBilliardTricks.GameVars.ballArray[i].position.x - newX;
                    let dy = MafiaBilliardTricks.GameVars.ballArray[i].position.y - newY;
                    let d = Math.sqrt(dx * dx + dy * dy);
                    if (d < MafiaBilliardTricks.GameConstants.BALL_RADIUS * 2) {
                        return null;
                    }
                }
            }
            return { x: newX * MafiaBilliardTricks.GameConstants.PHYS_SCALE, y: newY * MafiaBilliardTricks.GameConstants.PHYS_SCALE };
        }
        static isValidPosition(x, y, id) {
            let isValid = true;
            let upperLeftCushionPoint = MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[0];
            let lowerRightCushionPoint = MafiaBilliardTricks.StageContainer.CUSHION_VERTEXES[2];
            if (x < upperLeftCushionPoint.x || y < upperLeftCushionPoint.y || x > lowerRightCushionPoint.x || y > lowerRightCushionPoint.y) {
                isValid = false;
            }
            if (isValid) {
                for (let i = 1, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                    if (MafiaBilliardTricks.GameVars.ballArray[i].active) {
                        if (id && id === MafiaBilliardTricks.GameVars.ballArray[i].id) {
                            continue;
                        }
                        let dx = MafiaBilliardTricks.GameVars.ballArray[i].position.x - x;
                        let dy = MafiaBilliardTricks.GameVars.ballArray[i].position.y - y;
                        let d = Math.sqrt(dx * dx + dy * dy);
                        if (d < MafiaBilliardTricks.GameConstants.BALL_RADIUS * 2) {
                            isValid = false;
                            break;
                        }
                    }
                }
            }
            return isValid;
        }
        constructor(game, n, x, y) {
            super(game, n, x, y);
            this.cueBallBig = null;
            this.handIcon = null;
        }
        update() {
            if (MafiaBilliardTricks.GameVars.draggingCueBall && this.cueBallBig && this.cueBallBig.alpha > 0) {
                let x = (this.game.input.activePointer.x - MafiaBilliardTricks.StageContainer.currentInstance.x) / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale;
                let y = (this.game.input.activePointer.y - MafiaBilliardTricks.StageContainer.currentInstance.y) / MafiaBilliardTricks.GameVars.correctionScale;
                let point = { x: x, y: y };
                point = CueBallObject.changePosition(x / MafiaBilliardTricks.GameConstants.PHYS_SCALE, y / MafiaBilliardTricks.GameConstants.PHYS_SCALE);
                if (point) {
                    this.cueBallBig.x = point.x;
                    this.cueBallBig.y = point.y;
                    this.mc.x = point.x;
                    this.mc.y = point.y;
                    this.shadow.x = this.mc.x + .35 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE * (this.mc.x / 300);
                    this.shadow.y = this.mc.y + .35 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE * (this.mc.y / 150);
                }
            }
            if (this.handIcon) {
                if (MafiaBilliardTricks.GameVars.paused) {
                    this.handIcon.visible = false;
                }
                else {
                    this.handIcon.visible = true;
                }
                this.handIcon.x = this.mc.x;
                this.handIcon.y = this.mc.y;
            }
        }
        setPositionForAI(x, y) {
            let point = { x: x, y: y };
            point = CueBallObject.changePosition(x, y);
            if (point) {
                this.mc.x = point.x;
                this.mc.y = point.y;
                this.shadow.x = this.mc.x + .35 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE * (this.mc.x / 300);
                this.shadow.y = this.mc.y + .35 * MafiaBilliardTricks.GameConstants.BALL_RADIUS * MafiaBilliardTricks.GameConstants.PHYS_SCALE * (this.mc.y / 150);
            }
            MafiaBilliardTricks.CueContainer.currentInstance.showCue();
            this.position.x = this.mc.x / MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            this.position.y = this.mc.y / MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            MafiaBilliardTricks.GameManager.log("pos x: " + this.position.x);
            MafiaBilliardTricks.GameManager.log("pos y: " + this.position.y);
            MafiaBilliardTricks.MatchManagerBoss.cueBallSet(this.position.x, this.position.y);
            MafiaBilliardTricks.StageContainer.currentInstance.hideGuide();
        }
        addHandIcon() {
            if (this.handIcon) {
                this.handIcon.destroy();
                this.handIcon = null;
            }
            this.handIcon = new Phaser.Image(this.game, this.mc.x, this.mc.y - 30, "texture_atlas_1", "hand-icon.png");
            this.handIcon.anchor.set(.5);
            MafiaBilliardTricks.StageContainer.currentInstance.add(this.handIcon);
            if (this.cueBallBig) {
                this.cueBallBig.destroy();
                this.cueBallBig = null;
            }
            this.cueBallBig = new Phaser.Image(this.game, this.mc.x, this.mc.y, "texture_atlas_1", "cue_ball.png");
            this.cueBallBig.scale.set(0.55);
            if (this.game.device.desktop) {
                const scaleDiff = this.mc.width * this.mc.scale.x / this.cueBallBig.width * this.cueBallBig.scale.x;
                this.cueBallBig.scale.set(scaleDiff);
            }
            this.cueBallBig.anchor.set(.5);
            this.cueBallBig.alpha = 0;
            this.cueBallBig.inputEnabled = true;
            this.cueBallBig.events.onInputDown.add(this.onDown, this);
            this.cueBallBig.events.onInputUp.add(this.onUp, this);
            MafiaBilliardTricks.StageContainer.currentInstance.add(this.cueBallBig);
            this.handIcon.alpha = 0;
            this.game.add.tween(this.handIcon)
                .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.handIcon.scale)
                .to({ x: 1.1, y: 1.1 }, 800, Phaser.Easing.Cubic.InOut, true, 0, -1, true);
            this.game.add.tween(this.handIcon)
                .to({ y: this.mc.y - 40 }, 800, Phaser.Easing.Cubic.InOut, true, 0, -1, true);
            if (MafiaBilliardTricks.GameVars.paused) {
                this.handIcon.visible = false;
            }
        }
        hideHandIcon() {
            MafiaBilliardTricks.GameVars.draggingCueBall = false;
            if (this.handIcon) {
                this.handIcon.destroy();
                this.handIcon = null;
            }
            if (this.cueBallBig) {
                this.cueBallBig.destroy();
                this.cueBallBig = null;
            }
        }
        onDown() {
            MafiaBilliardTricks.GameVars.draggingCueBall = true;
            if (this.game.device.desktop) {
                const scaleDiff = this.mc.width * this.mc.scale.x / this.cueBallBig.width * this.cueBallBig.scale.x;
                this.cueBallBig.scale.set(scaleDiff);
                this.mc.alpha = 0;
            }
            MafiaBilliardTricks.BallsContainer.currentInstance.bringToTop(this.mc);
            MafiaBilliardTricks.CueContainer.currentInstance.hideCue();
            MafiaBilliardTricks.StageContainer.currentInstance.hideGuide();
            this.handIcon.destroy();
            this.handIcon = null;
            this.cueBallBig.alpha = .65;
        }
        onUp() {
            if (!MafiaBilliardTricks.GameVars.draggingCueBall) {
                return;
            }
            MafiaBilliardTricks.GameVars.draggingCueBall = false;
            MafiaBilliardTricks.CueContainer.currentInstance.showCue();
            MafiaBilliardTricks.StageContainer.currentInstance.showGuide();
            this.cueBallBig.destroy();
            this.cueBallBig = null;
            this.addHandIcon();
            this.mc.alpha = 1;
            this.position.x = this.mc.x / MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            this.position.y = this.mc.y / MafiaBilliardTricks.GameConstants.PHYS_SCALE;
            MafiaBilliardTricks.MatchManagerBoss.cueBallSet(this.position.x, this.position.y);
        }
    }
    MafiaBilliardTricks.CueBallObject = CueBallObject;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class EndMatchLayer extends Phaser.Group {
        constructor(game) {
            super(game, null, "end-match-layer");
            EndMatchLayer.currentInstance = this;
            const transparentBackground = new Phaser.Image(this.game, 0, 0, this.game.cache.getBitmapData(MafiaBilliardTricks.GameConstants.BLUE_SQUARE));
            transparentBackground.scale.set(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 64, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 64);
            transparentBackground.alpha = .4;
            transparentBackground.inputEnabled = true;
            transparentBackground.events.onInputDown.add(this.onDownTransparentLayer, this);
            this.add(transparentBackground);
            this.game.add.tween(transparentBackground).from({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true);
            this.msgBox = new MafiaBilliardTricks.EndMatchMessageBox(this.game, this);
            this.msgBox.x = (MafiaBilliardTricks.GameConstants.GAME_WIDTH - (MafiaBilliardTricks.GameConstants.GAME_WIDTH * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale)) / 2;
            this.msgBox.y = (MafiaBilliardTricks.GameConstants.GAME_HEIGHT - (MafiaBilliardTricks.GameConstants.GAME_HEIGHT * MafiaBilliardTricks.GameVars.correctionScale)) / 2;
            this.add(this.msgBox);
            this.homeButton = new Phaser.Button(this.game, 0, 0, "texture_atlas_1", this.onClickHome, this);
            this.homeButton.setFrames("btn_home_on.png", "btn_home_off.png", "btn_home_on.png", "btn_home_off.png");
            this.homeButton.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            this.homeButton.scale.y = MafiaBilliardTricks.GameVars.correctionScale;
            this.homeButton.visible = false;
            this.homeButton.anchor.set(0);
            this.add(this.homeButton);
        }
        onClickHome(b) {
            MafiaBilliardTricks.GameVars.paused = false;
            MafiaBilliardTricks.GameManager.onClickBack();
        }
        onDownTransparentLayer() {
        }
    }
    MafiaBilliardTricks.EndMatchLayer = EndMatchLayer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class EndMatchMessageBox extends Phaser.Group {
        static showBoxResults(game, x, y, width, height) {
            let boxResults;
            boxResults = game.add.group();
            const hHeight = height / 2;
            const hWidth = width / 2;
            const boxSideN = new Phaser.Sprite(game, x, y - hHeight, "texture_atlas_1", "box_results_side.png");
            boxSideN.anchor.set(0.5);
            boxSideN.angle = 90;
            boxResults.add(boxSideN);
            const boxSideS = new Phaser.Sprite(game, x, y + hHeight, "texture_atlas_1", "box_results_side.png");
            boxSideS.anchor.set(0.5);
            boxSideS.angle = 270;
            boxResults.add(boxSideS);
            const boxSideW = new Phaser.Sprite(game, x - hWidth, y, "texture_atlas_1", "box_results_side.png");
            boxSideW.anchor.set(0.5);
            boxResults.add(boxSideW);
            const boxSideE = new Phaser.Sprite(game, x + hWidth, y, "texture_atlas_1", "box_results_side.png");
            boxSideE.anchor.set(0.5);
            boxSideE.angle = 180;
            boxResults.add(boxSideE);
            const boxCornerNW = new Phaser.Sprite(game, x - hWidth, y - hHeight, "texture_atlas_1", "box_results_corner.png");
            boxCornerNW.anchor.set(0.5);
            boxResults.add(boxCornerNW);
            const boxCornerNE = new Phaser.Sprite(game, x + hWidth, y - hHeight, "texture_atlas_1", "box_results_corner.png");
            boxCornerNE.anchor.set(0.5);
            boxCornerNE.angle = 90;
            boxResults.add(boxCornerNE);
            const boxCornerSE = new Phaser.Sprite(game, x + hWidth, y + hHeight, "texture_atlas_1", "box_results_corner.png");
            boxCornerSE.anchor.set(0.5);
            boxCornerSE.angle = 180;
            boxResults.add(boxCornerSE);
            const boxCornerSW = new Phaser.Sprite(game, x - hWidth, y + hHeight, "texture_atlas_1", "box_results_corner.png");
            boxCornerSW.anchor.set(0.5);
            boxCornerSW.angle = 270;
            boxResults.add(boxCornerSW);
            const bgWidth = width - boxSideN.width;
            const bgHeight = height - boxSideN.width;
            const boxBG = new Phaser.Graphics(game, 0, 0);
            boxBG.beginFill(0x16825c);
            boxBG.alpha = 0.3;
            boxBG.drawRect(x - (bgWidth / 2), y - (bgHeight / 2), bgWidth, bgHeight);
            boxResults.add(boxBG);
            const pixelOffset = 2;
            boxSideN.scale.set(1, 1.0 / (boxSideN.height / (bgWidth + pixelOffset)));
            boxSideS.scale.set(1, boxSideN.scale.y);
            boxSideW.scale.set(1, 1.0 / (boxSideW.height / bgHeight));
            boxSideE.scale.set(1, boxSideW.scale.y);
            return boxResults;
        }
        constructor(game, parentEndMatchLayer) {
            super(game, null, "end-match-message-box");
            this.parentEndMatchLayer = parentEndMatchLayer;
            this.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            this.scale.y = MafiaBilliardTricks.GameVars.correctionScale;
            const boxResultsWidth = 760;
            const boxResultsHeight = 280;
            this.add(EndMatchMessageBox.showBoxResults(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 + 90, boxResultsWidth, boxResultsHeight));
            this.okButton = new Phaser.Button(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 - 100, 462, "texture_atlas_1", this.onClickOk, this);
            this.okButton.setFrames("btn_ok_on.png", "btn_ok_off.png", "btn_ok_on.png", "btn_ok_off.png");
            this.okButton.anchor.set(0.5);
            this.add(this.okButton);
            const pulseTween = this.game.add.tween(this.okButton.scale);
            pulseTween.to({ x: 1.035, y: .965 }, 300, Phaser.Easing.Linear.None, false);
            pulseTween.to({ x: .965, y: 1.035 }, 700, Phaser.Easing.Elastic.Out);
            pulseTween.loop();
            pulseTween.start();
            this.rematchButton = new MafiaBilliardTricks.TButton(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 - (boxResultsWidth / 2) + 30, 550, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language].REMATCH, "emptybtns/empty_btn_rematch_off.png", "emptybtns/empty_btn_rematch_on.png", "right", 80, this.onClickRematch, this);
            this.add(this.rematchButton);
            this.endMatchTag = new MafiaBilliardTricks.SText(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, 230, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language].YOU_FAILED, 3, 600);
            this.endMatchTag.anchor.set(1.0);
            this.add(this.endMatchTag);
            const charScale = 0.8;
            const characterOpponentId = Math.floor(MafiaBilliardTricks.GameVars.currentLevel / 5);
            this.characterSpriteOpponent = new Phaser.Image(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 + 223, 552, "texture_atlas_4", "character_" + characterOpponentId + ".png");
            this.characterSpriteOpponent.scale.x = boxResultsHeight / this.characterSpriteOpponent.height;
            this.characterSpriteOpponent.scale.y = boxResultsHeight / this.characterSpriteOpponent.height;
            this.characterSpriteOpponent.anchor.set(0.5, 1.0);
            let tintColour = Phaser.Color.createColor(46, 58, 63, .3).color;
            this.characterSpriteOpponent.tint = Phaser.Color.interpolateColor(0xFFFFFF, tintColour, 100, 30);
            this.add(this.characterSpriteOpponent);
            const characterSpritePlayer = new Phaser.Image(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 + 323, 552, "texture_atlas_4", "character_player.png");
            characterSpritePlayer.scale.x = charScale;
            characterSpritePlayer.scale.y = charScale;
            characterSpritePlayer.anchor.set(0.5, 1.0);
            this.add(characterSpritePlayer);
            this.characterSpritePlayer = characterSpritePlayer;
            const shadowBgCharVictory = new Phaser.Image(this.game, characterSpritePlayer.x - 60, characterSpritePlayer.y, "texture_atlas_4", "shadow_bg_char_victory.png");
            shadowBgCharVictory.scale.x = this.characterSpriteOpponent.width / shadowBgCharVictory.width;
            shadowBgCharVictory.scale.y = this.characterSpriteOpponent.height / shadowBgCharVictory.height;
            shadowBgCharVictory.anchor.set(0.5, 1.0);
            this.add(shadowBgCharVictory);
            this.shadowBgCharVictory = shadowBgCharVictory;
            this.bringToTop(characterSpritePlayer);
            this.brushSprite = new Phaser.Sprite(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 - 100, 280, "texture_atlas_1");
            this.brushSprite.frameName = "brush_0.png";
            this.brushSprite.animations.add("swipe", ["brush_0.png", "brush_1.png", "brush_2.png", "brush_3.png", "brush_4.png"]);
            this.brushSprite.visible = false;
            this.brushSprite.anchor.set(0.5);
            this.brushSprite.scale.x *= 1.3;
            this.brushSprite.scale.y *= 1.3;
            this.add(this.brushSprite);
            const characterComment = new Phaser.Text(this.game, this.brushSprite.x + 10, this.brushSprite.y, "", { font: "30px american-typewriter-condensed-bold", fill: "#FFFFFF", align: "center" });
            characterComment.anchor.set(0.5);
            characterComment.alpha = 0;
            characterComment.wordWrap = true;
            characterComment.wordWrapWidth = 470;
            this.add(characterComment);
            this.characterComment = characterComment;
            if (MafiaBilliardTricks.GameVars.starLessLevels.indexOf(MafiaBilliardTricks.GameVars.currentLevel) < 0 && !MafiaBilliardTricks.GameVars.bossMatchActive) {
                this.starsBox = new MafiaBilliardTricks.StarsBox(this.game, this.okButton.x, this.okButton.y - 92, MafiaBilliardTricks.GameVars.turnBased, false);
                this.starsBox.hideStarNumbers();
                this.add(this.starsBox);
            }
        }
        init() {
            const starlessMatch = MafiaBilliardTricks.GameVars.starLessLevels.indexOf(MafiaBilliardTricks.GameVars.currentLevel) < 0;
            MafiaBilliardTricks.GameManager.log("SCORE : " + MafiaBilliardTricks.GameVars.matchScore);
            if (MafiaBilliardTricks.GameVars.matchScore < 1) {
                MafiaBilliardTricks.AudioManager.playSound("music_gameover");
                this.alpha = 0;
                this.game.add.tween(this)
                    .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 50)
                    .onComplete.add(function () {
                    this.brushSprite.visible = true;
                    this.brushSprite.animations.play("swipe", 26, false);
                    this.game.add.tween(this.characterComment)
                        .to({ alpha: 1 }, 200, Phaser.Easing.Cubic.Out, true, 150);
                    this.parentEndMatchLayer.homeButton.visible = true;
                }, this);
                if (this.starsBox) {
                    this.starsBox.visible = false;
                }
                this.endMatchTag.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 - 82;
                this.endMatchTag.anchor.set(0.0, 1.0);
                this.okButton.visible = false;
                this.rematchButton.x += 600;
                this.rematchButton.y -= 50;
                const pulseTween = this.game.add.tween(this.rematchButton.scale);
                pulseTween.to({ x: 1.035, y: .965 }, 300, Phaser.Easing.Linear.None, false);
                pulseTween.to({ x: .965, y: 1.035 }, 700, Phaser.Easing.Elastic.Out);
                pulseTween.loop();
                pulseTween.start();
                this.brushSprite.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 - 100;
                this.brushSprite.anchor.set(0.0, 0.5);
                this.characterSpritePlayer.visible = false;
                this.shadowBgCharVictory.visible = false;
                this.characterSpriteOpponent.tint = 0xFFFFFF;
                this.characterSpriteOpponent.scale.set(0.8);
                this.characterSpriteOpponent.scale.x *= -1;
                this.characterSpriteOpponent.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 - 248;
                this.characterComment.x = this.brushSprite.x + (this.brushSprite.width / 2) + (20);
                this.characterComment.y = this.brushSprite.y;
                let characterComment;
                if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                    characterComment = MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["POST_GAME_COMMENT_LOSE_BOSS_" + (MafiaBilliardTricks.GameVars.currentBoss + 1)];
                }
                else {
                    characterComment = this.getRandomComment("POST_GAME_COMMENT_LOSE_GENERAL");
                }
                this.setCharacterComment(characterComment);
            }
            else {
                if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                    MafiaBilliardTricks.AudioManager.playSound("music_3_star");
                    this.showBossMatchVictory();
                }
                else {
                    this.showNormalMatchVictory();
                }
                this.rematchButton.scale.x = .8;
                this.rematchButton.scale.y = .8;
                this.okButton.alpha = 0.0;
                this.alpha = 0;
                this.game.add.tween(this)
                    .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 50)
                    .onComplete.add(function () {
                    this.brushSprite.visible = true;
                    this.brushSprite.animations.play("swipe", 26, false);
                    this.game.add.tween(this.characterComment)
                        .to({ alpha: 1 }, 200, Phaser.Easing.Cubic.Out, true, 150)
                        .onComplete.add(function () {
                        if (starlessMatch && !MafiaBilliardTricks.GameVars.bossMatchActive) {
                            this.starsBox.changeStarsBoxFullMask(MafiaBilliardTricks.GameVars.matchScore / 3, true, 1);
                        }
                    }, this);
                    this.game.add.tween(this.okButton)
                        .to({ alpha: 1 }, 250, Phaser.Easing.Cubic.Out, true, MafiaBilliardTricks.GameVars.bossMatchActive ? 100 : 100);
                }, this);
            }
        }
        destroy() {
            MafiaBilliardTricks.EndMatchLayer.currentInstance = null;
            super.destroy();
        }
        showBossMatchVictory() {
            this.endMatchTag.setTextAndStyle(MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language].YOU_OUTMASTERED, 1);
            this.setCharacterComment(MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["POST_GAME_COMMENT_WIN_BOSS_" + (MafiaBilliardTricks.GameVars.currentBoss + 1)]);
            const characterOpponentId = Math.floor(MafiaBilliardTricks.GameVars.currentLevel / 5);
            const opponentNameCard = new Phaser.Sprite(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 + 180, this.endMatchTag.y - 30, "texture_atlas_1", "tab_name.png");
            opponentNameCard.anchor.set(0.5);
            this.add(opponentNameCard);
            const imageName = (characterOpponentId === 0 ? "en_name_character_" + characterOpponentId + ".png" : "name_character_" + characterOpponentId + ".png");
            const opponentName = new Phaser.Sprite(this.game, opponentNameCard.x, opponentNameCard.y - 5, "texture_atlas_1", imageName);
            opponentName.anchor.set(0.5);
            opponentName.scale.set(opponentNameCard.width / opponentName.width * .8);
            this.add(opponentName);
            this.game.add.tween(this.characterSpriteOpponent)
                .to({ alpha: 0 }, 5000, Phaser.Easing.Cubic.Out, true);
        }
        showNormalMatchVictory() {
            if (MafiaBilliardTricks.GameVars.matchScore === 1) {
                MafiaBilliardTricks.AudioManager.playSound("music_1_star");
            }
            else if (MafiaBilliardTricks.GameVars.matchScore === 2) {
                MafiaBilliardTricks.AudioManager.playSound("music_2_star");
            }
            else if (MafiaBilliardTricks.GameVars.matchScore === 3) {
                MafiaBilliardTricks.AudioManager.playSound("music_3_star");
            }
            this.endMatchTag.setTextAndStyle(MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language].WELL_DONE, 4);
            let characterComment;
            if ((!MafiaBilliardTricks.GameVars.timed && !MafiaBilliardTricks.GameVars.turnBased) || MafiaBilliardTricks.GameVars.matchScore > 2) {
                characterComment = this.getRandomComment("POST_GAME_COMMENT_WIN_GENERAL_EXCELLENT");
            }
            else {
                characterComment = this.getRandomComment("POST_GAME_COMMENT_WIN_GENERAL");
            }
            this.setCharacterComment(characterComment);
        }
        getRandomComment(jsonKey) {
            let randomIndex;
            do {
                randomIndex = this.game.rnd.integerInRange(0, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language][jsonKey].length - 1);
                MafiaBilliardTricks.GameManager.log("new: " + randomIndex);
                MafiaBilliardTricks.GameManager.log("lastRandomCommentIndex " + EndMatchMessageBox.lastRandomCommentIndex);
            } while (EndMatchMessageBox.lastRandomCommentIndex === randomIndex);
            let comment = MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language][jsonKey][randomIndex];
            EndMatchMessageBox.lastRandomCommentIndex = randomIndex;
            MafiaBilliardTricks.GameManager.log("return");
            return comment;
        }
        setCharacterComment(text) {
            this.characterComment.text = "\"" + text + "\"";
            MafiaBilliardTricks.Utils.resizeTextToFit(this.characterComment, this.brushSprite.width * .7, this.brushSprite.height * .8);
        }
        onClickRematch(b) {
            MafiaBilliardTricks.AdHelper.showAd(() => {
                b.clearFrames();
                MafiaBilliardTricks.GameManager.log("rematching level " + MafiaBilliardTricks.GameVars.currentLevel.toString());
                MafiaBilliardTricks.CueContainer.currentInstance = new MafiaBilliardTricks.CueContainer(this.game);
                MafiaBilliardTricks.GameManager.onLevelSelected(MafiaBilliardTricks.GameVars.currentLevel);
                MafiaBilliardTricks.PoolState.currentInstance.hideEndMatchLayer();
                MafiaBilliardTricks.AudioManager.stopSound("music_gameover");
                MafiaBilliardTricks.AudioManager.stopSound("music_1_star");
                MafiaBilliardTricks.AudioManager.stopSound("music_2_star");
                MafiaBilliardTricks.AudioManager.stopSound("music_3_star");
            }, this);
        }
        onClickOk(b) {
            if (MafiaBilliardTricks.GameVars.lastBossBeaten === 7) {
                MafiaBilliardTricks.GameVars.playOutro = true;
            }
            MafiaBilliardTricks.GameManager.onClickBack();
        }
    }
    MafiaBilliardTricks.EndMatchMessageBox = EndMatchMessageBox;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class FineDial extends Phaser.Group {
        constructor(game) {
            super(game, null, "fine-dial");
            FineDial.isDown = false;
            FineDial.wasDown = false;
            FineDial.deltaY = 0;
            this.x = MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.RIGHT ? MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET : MafiaBilliardTricks.GameConstants.GAME_WIDTH - MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET;
            this.y = MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 + 40;
            this.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale * MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_WIDTH_MULTIPLIER;
            this.starting_py = 0;
            this.dialTopY = 160;
            this.dialBottomY = 560;
            this.tweenAmount = 100;
            this.upperDialImage = new Phaser.Image(this.game, 0, -400, "texture_atlas_2", "dial.png");
            this.upperDialImage.scale.y = 1.01;
            this.upperDialImage.inputEnabled = true;
            this.upperDialImage.events.onInputDown.add(this.onDownDial, this);
            this.upperDialImage.events.onInputUp.add(this.onUpDial, this);
            this.upperDialImage.anchor.set(0.5);
            this.add(this.upperDialImage);
            this.lowerDialImage = new Phaser.Image(this.game, 0, 0, "texture_atlas_2", "dial.png");
            this.lowerDialImage.inputEnabled = true;
            this.lowerDialImage.events.onInputDown.add(this.onDownDial, this);
            this.lowerDialImage.events.onInputUp.add(this.onUpDial, this);
            this.lowerDialImage.anchor.set(0.5);
            this.add(this.lowerDialImage);
            const mask = new Phaser.Graphics(this.game, 0, 0);
            mask.beginFill(0xFFFFFF);
            mask.drawRect(-18, -198, 36, 396);
            this.add(mask);
            this.upperDialImage.mask = mask;
            this.lowerDialImage.mask = mask;
            this.dialGradient = new Phaser.Image(this.game, 0, 0, "texture_atlas_2", "dial-gradient.png");
            this.dialGradient.anchor.set(.5);
            this.add(this.dialGradient);
            if (MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.RIGHT) {
                this.upperDialImage.scale.x *= -1;
                this.lowerDialImage.scale.x *= -1;
                this.x = MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET;
            }
        }
        getWidth() {
            return this.dialGradient.width;
        }
        update() {
            super.update();
            if (FineDial.wasDown) {
                if (this.game.input.activePointer.y < this.dialBottomY && this.game.input.activePointer.y > this.dialTopY) {
                    FineDial.isDown = true;
                }
            }
            if (FineDial.isDown) {
                if (MafiaBilliardTricks.CueContainer.currentInstance.doLockControlsToGuide && MafiaBilliardTricks.StageContainer.currentInstance.guideContainer.desiredAngleAchieved) {
                    return;
                }
                FineDial.deltaY = this.game.input.activePointer.y - this.pointerOriginalY;
                this.lowerDialImage.y = this.starting_py + FineDial.deltaY;
                this.upperDialImage.y = this.lowerDialImage.y - 400;
                if (this.lowerDialImage.y > 400 || this.lowerDialImage.y < 0) {
                    if (this.lowerDialImage.y > 400) {
                        this.lowerDialImage.y = -400;
                        this.starting_py -= 400;
                    }
                    else {
                        this.upperDialImage.y = 400;
                        this.starting_py += 400;
                    }
                    let tmpDialImage = this.lowerDialImage;
                    this.lowerDialImage = this.upperDialImage;
                    this.upperDialImage = tmpDialImage;
                }
                if (this.game.input.activePointer.y > this.dialBottomY || this.game.input.activePointer.y < this.dialTopY) {
                    FineDial.isDown = false;
                }
            }
        }
        changeSide() {
            if (MafiaBilliardTricks.GameVars.shotRunning) {
                if (this.changeSideOnNewTurn) {
                    this.changeSideOnNewTurn = false;
                }
                else {
                    this.changeSideOnNewTurn = true;
                }
                return;
            }
            this.upperDialImage.scale.x *= -1;
            this.lowerDialImage.scale.x *= -1;
            this.dialGradient.scale.x *= -1;
            if (MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.LEFT) {
                this.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH - MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET;
            }
            else {
                this.x = MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET;
            }
        }
        reset() {
            if (this.tweenOutVar) {
                this.tweenOutVar.pendingDelete = true;
            }
            const imageWidthHalf = 34;
            let doTween = true;
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                if (MafiaBilliardTricks.MatchManagerBoss.activePlayer.name === MafiaBilliardTricks.GameConstants.BOT) {
                    doTween = false;
                }
                if (MafiaBilliardTricks.MatchManagerBoss.blackSunkPocket >= 0) {
                    doTween = false;
                }
            }
            if (doTween) {
                this.game.add.tween(this)
                    .to({
                    x: MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.LEFT ?
                        MafiaBilliardTricks.GameConstants.GAME_WIDTH - MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET : MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET
                }, 200, Phaser.Easing.Cubic.Out, true);
                if (this.changeSideOnNewTurn) {
                    this.changeSide();
                    this.changeSideOnNewTurn = false;
                }
            }
        }
        show() {
            this.visible = true;
        }
        hide() {
            this.visible = false;
        }
        tweenOut() {
            this.tweenOutVar = this.game.add.tween(this)
                .to({ x: this.x - (this.tweenAmount * (MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.RIGHT ? 1 : -1)) }, MafiaBilliardTricks.GameConstants.TWEEN_OUT_DURATION_MOBILE_CONTROLS, Phaser.Easing.Cubic.In, true, 150);
        }
        onDownDial(i, pointerOriginal) {
            if (pointerOriginal.y > 560 || pointerOriginal.y < 160) {
                return;
            }
            FineDial.isDown = true;
            FineDial.wasDown = true;
            this.pointerOriginalY = pointerOriginal.y;
            MafiaBilliardTricks.CueContainer.currentInstance.fineDialAngleOffset = MafiaBilliardTricks.CueContainer.currentInstance.angle;
        }
        onUpDial(i, p) {
            FineDial.isDown = false;
            FineDial.wasDown = false;
            if (FineDial.deltaY > 0) {
                if (this.lowerDialImage.y < p.y) {
                    this.starting_py = this.lowerDialImage.y;
                }
                else {
                    this.starting_py = this.upperDialImage.y;
                }
            }
            else {
                if (this.upperDialImage.y < p.y) {
                    this.starting_py = this.lowerDialImage.y;
                }
                else {
                    this.starting_py = this.upperDialImage.y;
                }
            }
            FineDial.deltaY = 0;
        }
    }
    MafiaBilliardTricks.FineDial = FineDial;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class ForceSettingContainer extends Phaser.Group {
        constructor(game) {
            super(game, null, "force-setting-container");
            this.tweenAmount = 100;
            this.x = MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.LEFT ? MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET : MafiaBilliardTricks.GameConstants.GAME_WIDTH - MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET;
            this.y = MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 + 40;
            this.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale * MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_WIDTH_MULTIPLIER;
            this.canMove = true;
            this.background = new Phaser.Image(this.game, 0, 0, "texture_atlas_2", "power_bar_empty.png");
            this.background.anchor.set(.5);
            this.background.inputEnabled = true;
            this.background.events.onInputDown.add(this.onDownBackground, this);
            this.background.events.onInputUp.add(this.onUpBackground, this);
            this.add(this.background);
            this.forceBar = new Phaser.Image(this.game, 0, 0, "texture_atlas_2", "power_bar_full.png");
            this.forceBar.anchor.set(.5);
            this.add(this.forceBar);
            const maskInnerPartWidth = 36;
            const maskInnerPartHeight = 396;
            this.powerMask = new Phaser.Graphics(this.game, this.background.x, this.background.y - (maskInnerPartHeight / 2));
            this.powerMask.beginFill(0xffffff);
            this.powerMask.drawRect(-maskInnerPartWidth / 2, 0, maskInnerPartWidth, maskInnerPartHeight);
            this.powerMask.scale.y = .001;
            this.add(this.powerMask);
            this.forceBar.mask = this.powerMask;
            this.cueIcon = new Phaser.Image(this.game, 0, 0, "texture_atlas_2", "cue_power.png");
            this.cueIcon.scale.x *= MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            this.cueIcon.anchor.set(.5);
            this.add(this.cueIcon);
            this.tweenOutGroup = [];
            if (MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.RIGHT) {
                this.background.scale.x *= -1;
                this.forceBar.scale.x *= -1;
                this.cueIcon.scale.x *= -1;
                this.cueIcon.x *= -1;
                this.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH - MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET;
            }
            this.hide();
        }
        update() {
            if (MafiaBilliardTricks.CueContainer.currentInstance.settingPower && this.canMove) {
                let goAheadSettingPower = true;
                if (MafiaBilliardTricks.StageContainer.currentInstance.guideContainer.doCheckDesiredAngle) {
                    goAheadSettingPower = MafiaBilliardTricks.StageContainer.currentInstance.guideContainer.desiredAngleAchieved;
                }
                if (goAheadSettingPower) {
                    let localY = this.game.input.activePointer.y - this.y;
                    localY += 396 / 2;
                    localY = Phaser.Math.clamp(localY, 0, 396);
                    MafiaBilliardTricks.CueContainer.currentInstance.impulseFactor = localY / 396;
                    this.powerMask.scale.y = localY / 396;
                    this.cueIcon.y = localY;
                    if (this.powerMask.scale.y === 0) {
                        this.powerMask.scale.y = .001;
                    }
                }
            }
        }
        getHeight() {
            return this.forceBar.height;
        }
        changeSide() {
            if (MafiaBilliardTricks.GameVars.shotRunning) {
                if (this.changeSideOnNewTurn) {
                    this.changeSideOnNewTurn = false;
                }
                else {
                    this.changeSideOnNewTurn = true;
                }
                return;
            }
            this.background.scale.x *= -1;
            this.forceBar.scale.x *= -1;
            this.cueIcon.scale.x *= -1;
            this.cueIcon.x *= -1;
            const maskInnerPartWidth = 36;
            if (MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.LEFT) {
                this.x = MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET;
            }
            else {
                this.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH - MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET;
            }
        }
        show() {
            this.visible = true;
        }
        hide() {
            this.visible = false;
        }
        reset() {
            if (this.tweenOutGroup) {
                for (let tween of this.tweenOutGroup) {
                    tween.pendingDelete = true;
                }
            }
            this.canMove = true;
            this.powerMask.scale.y = .001;
            this.cueIcon.y = 0;
            let doTween = true;
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                if (MafiaBilliardTricks.MatchManagerBoss.activePlayer.name === MafiaBilliardTricks.GameConstants.BOT) {
                    doTween = false;
                }
                if (MafiaBilliardTricks.MatchManagerBoss.blackSunkPocket >= 0) {
                    doTween = false;
                }
            }
            if (doTween) {
                MafiaBilliardTricks.GameManager.log("tweening in");
                this.game.add.tween(this)
                    .to({
                    x: MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.LEFT ?
                        MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET : MafiaBilliardTricks.GameConstants.GAME_WIDTH - MafiaBilliardTricks.GameConstants.MOBILE_CONTROLS_EDGE_OFFSET
                }, 200, Phaser.Easing.Cubic.Out, true);
                if (this.changeSideOnNewTurn) {
                    this.changeSide();
                    this.changeSideOnNewTurn = false;
                }
            }
            MafiaBilliardTricks.CueContainer.currentInstance.settingPower = false;
            MafiaBilliardTricks.CueContainer.currentInstance.impulseFactor = 0;
        }
        onDownBackground() {
            if (MafiaBilliardTricks.GameVars.selectingPocket) {
                return;
            }
            MafiaBilliardTricks.CueContainer.currentInstance.settingPower = true;
        }
        onUpBackground(p) {
            if (MafiaBilliardTricks.GameVars.selectingPocket) {
                return;
            }
            MafiaBilliardTricks.CueContainer.currentInstance.settingPower = false;
            if (MafiaBilliardTricks.CueContainer.currentInstance.impulseFactor > 0) {
                this.canMove = false;
                this.tweenOut();
            }
            MafiaBilliardTricks.CueContainer.currentInstance.shoot(p);
        }
        tweenOut() {
            let t1 = this.game.add.tween(this.cueIcon)
                .to({ y: 0 }, 150, Phaser.Easing.Cubic.Out, true);
            let t2 = this.game.add.tween(this.powerMask.scale)
                .to({ y: .001 }, 150, Phaser.Easing.Cubic.Out, true);
            let t3 = this.game.add.tween(this)
                .to({ x: this.x - (this.tweenAmount * (MafiaBilliardTricks.GameVars.gameData.powerBarSide === MafiaBilliardTricks.GameConstants.LEFT ? 1 : -1)) }, MafiaBilliardTricks.GameConstants.TWEEN_OUT_DURATION_MOBILE_CONTROLS, Phaser.Easing.Cubic.In, true, 150);
            this.tweenOutGroup.push(t1);
            this.tweenOutGroup.push(t2);
            this.tweenOutGroup.push(t3);
        }
    }
    MafiaBilliardTricks.ForceSettingContainer = ForceSettingContainer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class GUI extends Phaser.Group {
        constructor(game) {
            super(game, null, "gui");
            GUI.overGuiItem = false;
            if (MafiaBilliardTricks.GameConstants.DEVELOPMENT) {
                this.createDevelopmentButtons();
            }
            if (this.game.device.touch) {
                this.forceSettingContainer = new MafiaBilliardTricks.ForceSettingContainer(this.game);
                this.add(this.forceSettingContainer);
                this.fineDial = new MafiaBilliardTricks.FineDial(this.game);
                this.add(this.fineDial);
            }
            else {
                this.forceSettingContainer = null;
                this.fineDial = null;
            }
            this.createBallSpinButton();
            if (!MafiaBilliardTricks.GameVars.bossMatchActive && MafiaBilliardTricks.GameVars.starLessLevels.indexOf(MafiaBilliardTricks.GameVars.currentLevel) < 0) {
                this.starsBox = new MafiaBilliardTricks.StarsBox(this.game, (MafiaBilliardTricks.PoolState.currentInstance.hud.x + 320) / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale, 48 / MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.turnBased);
                this.add(this.starsBox);
            }
            let pauseBtnPx = 0;
            GUI.pauseButton = new Phaser.Button(this.game, pauseBtnPx, 0, "texture_atlas_1", this.onClickPause, this);
            GUI.pauseButton.setFrames("btn_pause_on.png", "btn_pause_off.png", "btn_pause_on.png", "btn_pause_off.png");
            GUI.pauseButton.scale.x = MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            GUI.pauseButton.scale.y = MafiaBilliardTricks.GameVars.correctionScale;
            GUI.pauseButton.events.onInputDown.add(this.downGuiItem, this);
            GUI.pauseButton.events.onInputUp.add(this.upGuiItem, this);
            GUI.pauseButton.events.onInputOver.add(this.overGuiItem, this);
            GUI.pauseButton.events.onInputOut.add(this.onOutGuiItem, this);
            GUI.pauseButton.visible = true;
            this.add(GUI.pauseButton);
            GUI.resetButton = new Phaser.Button(this.game, GUI.pauseButton.x, GUI.pauseButton.y, "texture_atlas_1", this.onClickReset, this);
            GUI.resetButton.setFrames("btn_reset_on.png", "btn_reset_off.png", "btn_reset_on.png", "btn_reset_off.png");
            GUI.resetButton.scale = GUI.pauseButton.scale;
            GUI.resetButton.events.onInputDown.add(this.downGuiItem, this);
            GUI.resetButton.events.onInputUp.add(this.upGuiItem, this);
            GUI.resetButton.events.onInputOver.add(this.overGuiItem, this);
            GUI.resetButton.events.onInputOut.add(this.onOutGuiItem, this);
            GUI.resetButton.visible = false;
            this.add(GUI.resetButton);
            if (!MafiaBilliardTricks.GameVars.bossMatchActive) {
                GUI.undoButton = new MafiaBilliardTricks.TButton(this.game, 195, MafiaBilliardTricks.GameConstants.GAME_HEIGHT - 50, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language].UNDO, "emptybtns/empty_btn_undo_off.png", "emptybtns/empty_btn_undo_off.png", "left", 83, this.onClickUndo, this);
                GUI.undoButton.scale.set(GUI.pauseButton.scale.x * .8, GUI.pauseButton.scale.y * .8);
                GUI.undoButton.visible = false;
                GUI.undoButton.events.onInputDown.add(this.downGuiItem, this);
                GUI.undoButton.events.onInputUp.add(this.upGuiItem, this);
                GUI.undoButton.events.onInputOver.add(this.overGuiItem, this);
                GUI.undoButton.events.onInputOut.add(this.onOutGuiItem, this);
                GUI.undoButton.visible = false;
                this.add(GUI.undoButton);
            }
            MafiaBilliardTricks.GameVars.gameData.spinMechanismActive = true;
        }
        ballHasBeenShot() {
            if (!MafiaBilliardTricks.GameVars.bossMatchActive) {
                GUI.resetButton.visible = true;
                GUI.pauseButton.visible = false;
            }
            if (GUI.undoButton) {
                GUI.undoButton.visible = false;
            }
        }
        setPauseOrResetButtonsVisible(isResetButtonVisible) {
            if (isResetButtonVisible) {
                GUI.pauseButton.visible = false;
                GUI.resetButton.visible = true;
            }
            else {
                GUI.pauseButton.visible = true;
                GUI.resetButton.visible = false;
            }
        }
        setPauseButtonVisible(visible) {
            GUI.pauseButton.inputEnabled = visible;
            GUI.pauseButton.alpha = visible ? 1 : 0;
        }
        setCueballButtonInputEnabled(enabled) {
            GUI.ballButtonContainer.setAllChildren("inputEnabled", enabled);
        }
        setRedPointPosition() {
            this.redDot.x = GUI.CUE_BALL_BUTTON_SCALE * MafiaBilliardTricks.SpinCircleLayer.SPIN_CIRCLE_RADIUS * MafiaBilliardTricks.GameVars.english;
            this.redDot.y = -GUI.CUE_BALL_BUTTON_SCALE * MafiaBilliardTricks.SpinCircleLayer.SPIN_CIRCLE_RADIUS * MafiaBilliardTricks.GameVars.verticalSpin;
        }
        startGame() {
            if (this.forceSettingContainer) {
                if (!MafiaBilliardTricks.GameVars.botStarts) {
                    this.forceSettingContainer.show();
                }
                else {
                    this.forceSettingContainer.hide();
                }
            }
            if (this.fineDial) {
                if (!MafiaBilliardTricks.GameVars.botStarts) {
                    this.fineDial.show();
                }
                else {
                    this.fineDial.hide();
                }
            }
            if (MafiaBilliardTricks.GameVars.gameData.spinMechanismActive) {
                GUI.ballButtonContainer.visible = true;
            }
            else {
                GUI.ballButtonContainer.visible = false;
            }
        }
        newTurn() {
            if (GUI.undoButton) {
                GUI.undoButton.visible = true;
            }
            GUI.pauseButton.visible = true;
            GUI.resetButton.visible = false;
            this.redDot.x = 0;
            this.redDot.y = 0;
            if (this.game.device.touch) {
                this.forceSettingContainer.reset();
                this.forceSettingContainer.show();
                this.fineDial.reset();
                this.fineDial.show();
            }
        }
        onDownCueBallButton(button) {
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                MafiaBilliardTricks.MatchManagerBoss.showSpinCircleLayer();
            }
            else {
                MafiaBilliardTricks.MatchManager.showSpinCircleLayer();
            }
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
        }
        createBallSpinButton() {
            GUI.ballButtonContainer = new Phaser.Group(this.game);
            GUI.ballButtonContainer.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            GUI.ballButtonContainer.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH - 48 * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            GUI.ballButtonContainer.y = 48 * MafiaBilliardTricks.GameVars.correctionScale;
            this.add(GUI.ballButtonContainer);
            const cueBallButton = new Phaser.Button(this.game, 0, 0, "texture_atlas_1", this.onDownCueBallButton);
            cueBallButton.setFrames("cue_ball_button_on.png", "cue_ball_button_off.png", "cue_ball_button_on.png", "cue_ball_button_off.png");
            cueBallButton.anchor.set(.5);
            cueBallButton.inputEnabled = true;
            cueBallButton.events.onInputDown.add(this.downGuiItem, this);
            cueBallButton.events.onInputUp.add(this.upGuiItem, this);
            cueBallButton.events.onInputOver.add(this.overGuiItem, this);
            cueBallButton.events.onInputOut.add(this.onOutGuiItem, this);
            GUI.ballButtonContainer.add(cueBallButton);
            this.redDot = new Phaser.Image(this.game, 0, 0, "texture_atlas_1", "red-dot.png");
            this.redDot.anchor.set(.5);
            this.redDot.scale.set(.5);
            this.redDot.inputEnabled = false;
            GUI.ballButtonContainer.add(this.redDot);
        }
        createDevelopmentButtons() {
            const buttonsOffset = new Phaser.Point(600, 0);
            const buttonForceWin = new Phaser.Button(this.game, buttonsOffset.x + 310, buttonsOffset.y + 25, "texture_atlas_0", this.onClickForceWin, this);
            buttonForceWin.setFrames("button-force-win-on.png", "button-force-win-off.png", "button-force-win-on.png", "button-force-win-off.png");
            buttonForceWin.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            buttonForceWin.events.onInputOver.add(this.overGuiItem, this);
            buttonForceWin.events.onInputOut.add(this.onOutGuiItem, this);
            this.add(buttonForceWin);
            const buttonForceLose = new Phaser.Button(this.game, buttonsOffset.x + 260, buttonsOffset.y + 25, "texture_atlas_0", this.onClickForceLose, this);
            buttonForceLose.setFrames("button-force-lose-on.png", "button-force-lose-off.png", "button-force-lose-on.png", "button-force-lose-off.png");
            buttonForceLose.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            buttonForceLose.events.onInputOver.add(this.overGuiItem, this);
            buttonForceLose.events.onInputOut.add(this.onOutGuiItem, this);
            this.add(buttonForceLose);
            if (!MafiaBilliardTricks.GameVars.bossMatchActive && MafiaBilliardTricks.GameConstants.LEVEL_EDITION) {
                const levelEditionButton = new Phaser.Button(this.game, buttonsOffset.x + 100, buttonsOffset.y + 25, "texture_atlas_0", this.onClickEdit, this);
                levelEditionButton.setFrames("button-edit-on.png", "button-edit-off.png", "button-edit-on.png", "button-edit-off.png");
                levelEditionButton.scale.x = MafiaBilliardTricks.GameVars.scaleX;
                levelEditionButton.anchor.set(0);
                levelEditionButton.events.onInputOver.add(this.overGuiItem, this);
                levelEditionButton.events.onInputOut.add(this.onOutGuiItem, this);
                this.add(levelEditionButton);
            }
            const resetButton = new Phaser.Button(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH - 35, 605, "texture_atlas_1", this.onClickReset, this);
            resetButton.setFrames("button_menu_on.png", "button_menu_off.png", "button_menu_on.png", "button_menu_off.png");
            resetButton.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            resetButton.anchor.set(.5);
            resetButton.events.onInputOver.add(this.overGuiItem, this);
            resetButton.events.onInputOut.add(this.onOutGuiItem, this);
            this.add(resetButton);
        }
        onClickEdit(b) {
            b.clearFrames();
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
            MafiaBilliardTricks.GameManager.levelEdition();
        }
        onClickForceWin(b) {
            b.clearFrames();
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                MafiaBilliardTricks.MatchManagerBoss.levelPassed();
            }
            else {
                if (MafiaBilliardTricks.GameVars.timed) {
                    MafiaBilliardTricks.MatchManager.levelPassed();
                }
                else {
                    MafiaBilliardTricks.MatchManager.levelPassed(this.game.rnd.integerInRange(1, 3));
                }
            }
        }
        onClickForceLose(b) {
            b.clearFrames();
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                MafiaBilliardTricks.MatchManagerBoss.gameOver();
            }
            else {
                MafiaBilliardTricks.MatchManager.gameOver();
            }
        }
        onClickReset(b) {
            MafiaBilliardTricks.AdHelper.showAd(() => {
                b.clearFrames();
                MafiaBilliardTricks.AudioManager.playSound("click_btn");
                if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                    MafiaBilliardTricks.MatchManagerBoss.reset();
                }
                else {
                    MafiaBilliardTricks.MatchManager.reset();
                }
            }, this);
        }
        onClickUndo(b) {
            MafiaBilliardTricks.AdHelper.showRewardedAd((success) => {
                b.clearFrames();
                MafiaBilliardTricks.AudioManager.playSound("click_btn");
                if (!MafiaBilliardTricks.GameVars.bossMatchActive) {
                    MafiaBilliardTricks.MatchManager.undo();
                }
            }, this);
        }
        onClickPause(b) {
            MafiaBilliardTricks.AudioManager.playSound("click_btn");
            if (MafiaBilliardTricks.GameConstants.LEVEL_EDITION) {
                MafiaBilliardTricks.PoolState.currentInstance.upperHUD.destroyTimerLabel();
                this.game.state.start("DevLevelSelectionState", true, false);
            }
            else {
                MafiaBilliardTricks.PoolState.currentInstance.showPauseLayer();
            }
        }
        overGuiItem() {
            if (!this.game.device.touch) {
                GUI.overGuiItem = true;
            }
        }
        onOutGuiItem() {
            if (!this.game.device.touch) {
                GUI.overGuiItem = false;
            }
        }
        upGuiItem(b) {
            GUI.overGuiItem = false;
        }
        downGuiItem(b) {
            GUI.overGuiItem = true;
        }
    }
    GUI.CUE_BALL_BUTTON_SCALE = .25;
    MafiaBilliardTricks.GUI = GUI;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class SText extends Phaser.Text {
        constructor(game, x, y, text, style, fitWidth) {
            super(game, x, y, text);
            this.anchor.set(0.5);
            this.align = "center";
            this.font = "American Typewriter";
            this.fontSize = 50;
            this.strokeThickness = 3;
            this._fitWidth = fitWidth;
            this.setTextAndStyle(text, style);
        }
        setTextAndStyle(text, style) {
            this.strokeThickness = 7;
            const grd = this.context.createLinearGradient(0, 0, 0, this.height);
            if (style === 1) {
                grd.addColorStop(0, "#f7e48e");
                grd.addColorStop(1, "#d87e58");
                this.strokeColors = ["#1b1a1d"];
                this.setShadow(0, 0, "#00c57f", 11);
            }
            else if (style === 2) {
                grd.addColorStop(0, "#de3968");
                grd.addColorStop(1, "#ce2746");
                this.strokeColors = ["#36131e"];
                this.setShadow(0, 0, "#00c57f", 9);
            }
            else if (style === 3) {
                grd.addColorStop(0, "#de3968");
                grd.addColorStop(1, "#ce2746");
                this.strokeColors = ["#f0ecd8"];
                this.setShadow(0, 0, "#1b1a1d", 18);
            }
            else if (style === 4) {
                grd.addColorStop(0, "#f7e48e");
                grd.addColorStop(1, "#d87e58");
                this.strokeColors = ["#1b1a1d"];
            }
            this.fill = grd;
            this.text = text;
            const textSize = Number(this.fontSize) * text.length;
            const s = this._fitWidth / textSize;
            this.scale.set(s);
        }
    }
    MafiaBilliardTricks.SText = SText;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    let SpinTypes;
    (function (SpinTypes) {
        SpinTypes[SpinTypes["NONE"] = 0] = "NONE";
        SpinTypes[SpinTypes["BACKSPIN"] = 1] = "BACKSPIN";
        SpinTypes[SpinTypes["TOPSPIN"] = 2] = "TOPSPIN";
    })(SpinTypes = MafiaBilliardTricks.SpinTypes || (MafiaBilliardTricks.SpinTypes = {}));
    class SpinCircleLayer extends Phaser.Group {
        constructor(game) {
            super(game, null, "spin-circle");
            SpinCircleLayer.currentInstance = this;
            this.doLockRedDot = false;
            const transparentBackground = new Phaser.Image(this.game, 0, 0, this.game.cache.getBitmapData(MafiaBilliardTricks.GameConstants.BLACK_SQUARE));
            transparentBackground.scale.set(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 64, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 64);
            transparentBackground.alpha = .35;
            transparentBackground.inputEnabled = true;
            transparentBackground.events.onInputDown.add(this.onDownTransparentLayer, this);
            this.add(transparentBackground);
            this.ballContainer = new Phaser.Group(this.game);
            this.ballContainer.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2;
            this.ballContainer.y = MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2;
            this.add(this.ballContainer);
            const circle = new Phaser.Image(this.game, 0, 0, "texture_atlas_1", "cue_ball.png");
            circle.anchor.set(.5);
            circle.inputEnabled = true;
            circle.events.onInputDown.add(this.onDownCircle, this);
            circle.events.onInputUp.add(this.onUpCircle, this);
            circle.input.pixelPerfectClick = true;
            circle.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            this.ballContainer.add(circle);
            const border = new Phaser.Graphics(this.game);
            border.lineStyle(.75, 0xff0000, .75);
            border.drawCircle(0, 0, 2 * SpinCircleLayer.SPIN_CIRCLE_RADIUS);
            border.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            this.ballContainer.add(border);
            this.redDot = new Phaser.Image(this.game, MafiaBilliardTricks.GameVars.english, MafiaBilliardTricks.GameVars.verticalSpin, "texture_atlas_1", "red-dot.png");
            this.redDot.anchor.set(.5);
            this.redDot.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            this.ballContainer.add(this.redDot);
            this.alpha = 0;
            this.game.add.tween(this)
                .to({ alpha: 1 }, 400, Phaser.Easing.Cubic.Out, true);
        }
        update() {
            super.update();
            if (this.draggingDot) {
                this.forceSetDot();
            }
        }
        forceSetDot(point) {
            let spinLoc;
            if (point) {
                spinLoc = point;
                spinLoc.x *= (SpinCircleLayer.SPIN_CIRCLE_RADIUS - 1) * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
                spinLoc.y *= (SpinCircleLayer.SPIN_CIRCLE_RADIUS - 1) * MafiaBilliardTricks.GameVars.correctionScale;
            }
            else {
                spinLoc = new Phaser.Point(this.game.input.activePointer.position.x - SpinCircleLayer.currentInstance.ballContainer.position.x, this.game.input.activePointer.position.y - SpinCircleLayer.currentInstance.ballContainer.position.y);
            }
            const x = spinLoc.x;
            const y = spinLoc.y;
            const d = Math.sqrt(x * x + y * y);
            if (d < SpinCircleLayer.SPIN_CIRCLE_RADIUS) {
                SpinCircleLayer.currentInstance.redDot.position.set(x, y);
            }
        }
        destroy() {
            SpinCircleLayer.currentInstance = null;
            super.destroy();
        }
        suggestSpin() {
            if (MafiaBilliardTricks.GameVars.suggestedSpin === SpinTypes.BACKSPIN) {
                MafiaBilliardTricks.PoolState.currentInstance.showTutorialLayer(4);
            }
        }
        onDownTransparentLayer() {
            const horizontalSpin = Math.floor(1000 * this.redDot.x / SpinCircleLayer.SPIN_CIRCLE_RADIUS) / 1000;
            const verticalSpin = -Math.floor(1000 * this.redDot.y / SpinCircleLayer.SPIN_CIRCLE_RADIUS) / 1000;
            MafiaBilliardTricks.GUI.overGuiItem = false;
            if (this.game.device.touch) {
                MafiaBilliardTricks.GameVars.skipNextScreenTap = true;
            }
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                MafiaBilliardTricks.MatchManagerBoss.hideSpinCircleLayer(horizontalSpin, verticalSpin);
            }
            else {
                MafiaBilliardTricks.MatchManager.hideSpinCircleLayer(horizontalSpin, verticalSpin);
            }
        }
        lockRedDot() {
            this.doLockRedDot = true;
        }
        onDownCircle(img, p) {
            if (!this.doLockRedDot) {
                if (MafiaBilliardTricks.Game.currentInstance.device.touch) {
                    let pN = p ? p : this.game.input.activePointer;
                    const x = (pN.x - this.ballContainer.x);
                    const y = (pN.y - this.ballContainer.y);
                    const scaledX = x / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale;
                    const scaledY = y / MafiaBilliardTricks.GameVars.correctionScale;
                    const d = Math.sqrt(scaledX * scaledX + scaledY * scaledY);
                    if (d < SpinCircleLayer.SPIN_CIRCLE_RADIUS) {
                        this.redDot.position.set(x, y);
                    }
                }
                else {
                    this.draggingDot = true;
                }
            }
        }
        onUpCircle() {
            this.draggingDot = false;
        }
    }
    SpinCircleLayer.currentInstance = null;
    SpinCircleLayer.SPIN_CIRCLE_RADIUS = 100;
    MafiaBilliardTricks.SpinCircleLayer = SpinCircleLayer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class StarsBox extends Phaser.Group {
        constructor(game, x, y, turnBasedGame, applyScale = true) {
            super(game, null, "stars-box");
            if (applyScale) {
                this.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            }
            this.starsBox = new Phaser.Image(this.game, x, y, "texture_atlas_1", "box_stars.png");
            this.starsBox.anchor.set(.5);
            this.add(this.starsBox);
            this.createFilledStarsBoxAndMask(x, y);
            if (turnBasedGame) {
                this.value = 0;
                this.createStarsBoxNumbers();
            }
            else {
                this.starsActualMask.scale.x = 0;
                this.value = 1;
            }
        }
        changeStarsBoxFullMask(scorePercentage, endGameAnimation, alpha) {
            let tweenDuration = 500;
            if (endGameAnimation) {
                this.value = 0;
                tweenDuration = 3500;
            }
            let numberTween = { step: this.value };
            let starAnim1;
            let starAnim2;
            let starAnim3;
            if (endGameAnimation) {
                starAnim1 = this.game.add.sprite(this.starsBoxFull.x - 164, this.starsBoxFull.y - 105, "starFX");
                starAnim2 = this.game.add.sprite(this.starsBoxFull.x - 104, this.starsBoxFull.y - 105, "starFX");
                starAnim3 = this.game.add.sprite(this.starsBoxFull.x - 42, this.starsBoxFull.y - 105, "starFX");
                this.add(starAnim1);
                this.add(starAnim2);
                this.add(starAnim3);
                starAnim1.animations.add("sparkle");
                starAnim2.animations.add("sparkle");
                starAnim3.animations.add("sparkle");
                starAnim1.visible = false;
                starAnim2.visible = false;
                starAnim3.visible = false;
                this.bringToTop(this.starsBoxFull);
            }
            this.game.add.tween(numberTween).to({ step: scorePercentage }, tweenDuration * scorePercentage, Phaser.Easing.Cubic.Out, true, 0).onUpdateCallback(function () {
                this.starsActualMask.scale.x = numberTween.step;
                if (!this.starsBoxFull.visible) {
                    this.starsBoxFull.visible = true;
                }
                if (endGameAnimation) {
                    if (numberTween.step > 0.3) {
                        starAnim1.visible = true;
                        starAnim1.animations.play("sparkle", 30, false, true);
                    }
                    if (numberTween.step > 0.6) {
                        starAnim2.visible = true;
                        starAnim2.animations.play("sparkle", 30, false, true);
                    }
                    if (numberTween.step > 0.9) {
                        starAnim3.visible = true;
                        starAnim3.animations.play("sparkle", 30, false, true);
                    }
                }
            }, this);
            this.value = scorePercentage;
        }
        hideStarNumbers() {
            if (this.turnsPerStarOne) {
                this.turnsPerStarOne.visible = false;
            }
            if (this.turnsPerStarTwo) {
                this.turnsPerStarTwo.visible = false;
            }
            if (this.turnsPerStarThree) {
                this.turnsPerStarThree.visible = false;
            }
        }
        createStarsBoxNumbers() {
            let oneStarTurn = MafiaBilliardTricks.GameVars.timeTurnsValue;
            let twoStarTurn = MafiaBilliardTricks.GameVars.turnsLeftStarDivider === 0 ? oneStarTurn : MafiaBilliardTricks.MatchManager.getOneTwoStarMidpoint();
            let threeStarTurn = MafiaBilliardTricks.GameVars.turnsLeftStarDivider === 0 ? oneStarTurn : MafiaBilliardTricks.GameVars.timeTurnsValue - MafiaBilliardTricks.GameVars.turnsLeftStarDivider;
            let oneStarTurnText = oneStarTurn.toString();
            let twoStarTurnText = twoStarTurn.toString();
            const threeStarTurnText = threeStarTurn.toString();
            if (oneStarTurn === twoStarTurn) {
                oneStarTurnText = "";
            }
            if (twoStarTurn === threeStarTurn) {
                twoStarTurnText = "";
            }
            this.turnsPerStarTwo = new Phaser.Text(this.game, this.starsBox.x, this.starsBox.y + 4, twoStarTurnText, { font: "22px american-typewriter-condensed-bold", fill: "#1B1A1D" });
            this.turnsPerStarTwo.anchor.set(0.5);
            this.add(this.turnsPerStarTwo);
            this.turnsPerStarOne = new Phaser.Text(this.game, this.turnsPerStarTwo.x - 61, this.turnsPerStarTwo.y, oneStarTurnText, { font: "22px american-typewriter-condensed-bold", fill: "#1B1A1D" });
            this.turnsPerStarOne.anchor.set(0.5);
            this.add(this.turnsPerStarOne);
            this.turnsPerStarThree = new Phaser.Text(this.game, this.turnsPerStarTwo.x + 61, this.turnsPerStarTwo.y, threeStarTurnText, { font: "22px american-typewriter-condensed-bold", fill: "#1B1A1D" });
            this.turnsPerStarThree.anchor.set(0.5);
            this.add(this.turnsPerStarThree);
        }
        createFilledStarsBoxAndMask(x, y) {
            this.starsBoxFull = new Phaser.Image(this.game, x, y, "texture_atlas_1", "box_stars_full.png");
            this.starsBoxFull.anchor.set(0.5);
            this.starsBoxFull.visible = false;
            this.add(this.starsBoxFull);
            this.starsActualMask = new Phaser.Graphics(this.game, 0, 0);
            let maskX = this.starsBoxFull.x - this.starsBoxFull.width / 2;
            let maskY = this.starsBoxFull.y - this.starsBoxFull.height / 2;
            let w = this.starsBoxFull.width;
            let h = this.starsBoxFull.height;
            this.starsActualMask.beginFill(0xFF00FF);
            this.starsActualMask.drawRect(0, 0, w, h);
            this.starsActualMask.x = maskX;
            this.starsActualMask.y = maskY;
            this.starsActualMask.scale.x = 0.0;
            this.starsBoxFull.mask = this.starsActualMask;
            this.add(this.starsActualMask);
        }
    }
    MafiaBilliardTricks.StarsBox = StarsBox;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class TButton extends Phaser.Button {
        constructor(game, x, y, text, frame, hoverFrame, textAlignTo, offset, callback, callbackContext) {
            super(game, x, y, "texture_atlas_1", callback, callbackContext, hoverFrame, frame, hoverFrame, frame);
            this.anchor.set(0.5);
            this.text = new Phaser.Text(game, 0, 2, text, {
                font: "40px american-typewriter-condensed-bold",
                fill: "#1b1a1d",
                align: "right"
            });
            this.text.anchor.set(0.5);
            let s = ((this.width - offset) / this.text.width) - 0.1;
            s = s > 0.7 ? 0.7 : s;
            this.text.scale.set(s);
            if (textAlignTo === "left") {
                this.text.x = (this.width / 2) - offset - (this.text.width / 2);
            }
            else {
                this.text.x = (-this.width / 2) + offset + (this.text.width / 2);
            }
            this.addChild(this.text);
        }
    }
    MafiaBilliardTricks.TButton = TButton;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class HUD extends Phaser.Group {
        constructor(game) {
            super(game, null, "hud");
            this.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2;
            this.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                this.recentlyPocketedBalls = [];
                this.createCharacterDetails();
                this.portraitThinkingFrame = new Phaser.Image(game, 86, (MafiaBilliardTricks.GameConstants.GAME_HEIGHT * 1 / 12) - 1, "texture_atlas_1", "frame_thinking.png");
                this.portraitThinkingFrame.anchor.set(0.5);
                this.add(this.portraitThinkingFrame);
                this.hideThinkingMessage();
                const vsImage = new Phaser.Image(this.game, 0, MafiaBilliardTricks.GameConstants.GAME_HEIGHT * 1 / 12, "texture_atlas_1", "vs.png");
                vsImage.anchor.set(0.5);
                this.add(vsImage);
                this.createPocketedBallsSockets();
                this.newTurn();
            }
            else {
                const characterOpponentId = Math.floor(MafiaBilliardTricks.GameVars.currentLevel / 5) + 1;
                let teacherPortrait_px = -320 / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale;
                const teacherPortrait = new Phaser.Image(this.game, teacherPortrait_px, 48 / MafiaBilliardTricks.GameVars.correctionScale, "texture_atlas_4", "char_" + characterOpponentId + ".png");
                teacherPortrait.anchor.set(.5);
                this.add(teacherPortrait);
                const lessonNumber = new Phaser.Text(this.game, teacherPortrait.x + 70 / MafiaBilliardTricks.GameVars.scaleX / MafiaBilliardTricks.GameVars.correctionScale, 30 / MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["LESSON"] + (MafiaBilliardTricks.GameVars.currentLevel + 1), { font: "25px american-typewriter-regular", fill: "#FFFFFF" });
                this.add(lessonNumber);
                if (MafiaBilliardTricks.GameVars.turnBased) {
                    this.turnsCounterLabel = new Phaser.Text(this.game, 0, 50 / MafiaBilliardTricks.GameVars.correctionScale, "0", { font: "72px american-typewriter-condensed-bold", fill: "#FFFFFF" });
                    this.turnsCounterLabel.anchor.set(1, 0.5);
                    this.turnsCounterLabel.x = this.turnsCounterLabel.width * 0.5;
                    this.add(this.turnsCounterLabel);
                    const shotsLabel = new Phaser.Text(this.game, this.turnsCounterLabel.x, 48 / MafiaBilliardTricks.GameVars.correctionScale, "/" + MafiaBilliardTricks.GameVars.timeTurnsValue.toString() + " " + MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["SHOTS"], { font: "25px american-typewriter-regular", fill: "#FFFFFF" });
                    shotsLabel.anchor.set(0);
                    this.add(shotsLabel);
                }
            }
        }
        assignSidesForBossMatch() {
            if (MafiaBilliardTricks.MatchManagerBoss.activePlayer.name === "player") {
                if (MafiaBilliardTricks.MatchManagerBoss.activePlayer.side === MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID) {
                    this.populatePocketedBallsSockets(false);
                }
                else {
                    this.populatePocketedBallsSockets(true);
                }
            }
            else {
                if (MafiaBilliardTricks.MatchManagerBoss.activePlayer.side === MafiaBilliardTricks.GameConstants.BALL_TYPE_SOLID) {
                    this.populatePocketedBallsSockets(true);
                }
                else {
                    this.populatePocketedBallsSockets(false);
                }
            }
        }
        ballPocketed(ballId) {
            if (ballId === 0 || ballId === 8) {
                return;
            }
            else {
                this.recentlyPocketedBalls.push(ballId);
            }
        }
        newTurn() {
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                if (MafiaBilliardTricks.MatchManagerBoss.sidesEstablished) {
                    this.updatePocketedBallsSockets();
                    this.recentlyPocketedBalls = [];
                }
                this.updateActivePlayerPortraitHighlight();
            }
        }
        updateActivePlayerPortraitHighlight() {
            if (MafiaBilliardTricks.MatchManagerBoss.activePlayer.name === MafiaBilliardTricks.GameConstants.BOT) {
                this.bossPortrait.alpha = 1.0;
                this.playerPortrait.alpha = 0.3;
            }
            else {
                this.bossPortrait.alpha = 0.3;
                this.playerPortrait.alpha = 1.0;
            }
        }
        ballShot() {
            if (MafiaBilliardTricks.GameVars.bossMatchActive) {
                return;
            }
            else if (MafiaBilliardTricks.GameVars.turnBased) {
                this.updateTurnsCounter();
            }
        }
        updateTurnsCounter() {
            this.turnsCounterLabel.text = MafiaBilliardTricks.GameVars.currentTimeOrTurns.toString();
        }
        hideThinkingMessage() {
            this.portraitThinkingFrame.visible = false;
            if (MafiaBilliardTricks.PoolState.currentInstance.upperHUD) {
                MafiaBilliardTricks.PoolState.currentInstance.thinkingText.visible = false;
            }
        }
        showThinkingMessage() {
            this.portraitThinkingFrame.visible = true;
            if (MafiaBilliardTricks.PoolState.currentInstance.upperHUD) {
                MafiaBilliardTricks.PoolState.currentInstance.thinkingText.visible = true;
            }
        }
        updatePocketedBallsSockets() {
            for (let ballId of this.recentlyPocketedBalls) {
                for (let entry of this.ballsSet) {
                    if (entry.frameName === "ball_icons_" + ballId + ".png") {
                        entry.frameName = "ball_icons_0.png";
                    }
                }
            }
        }
        createPocketedBallsSockets() {
            this.ballsSet = [];
            let x = -380;
            for (let i = 0; i < 15; i++) {
                if (i === 7) {
                    x = 170;
                }
                else {
                    let ballSocket = new Phaser.Image(this.game, x, (MafiaBilliardTricks.GameConstants.GAME_HEIGHT * 1 / 12) - 8, "texture_atlas_1", "ball_icons_0.png");
                    ballSocket.anchor.set(0.5, 0.0);
                    this.add(ballSocket);
                    this.ballsSet.push(ballSocket);
                    x += 35;
                }
            }
        }
        populatePocketedBallsSockets(sidesInverted) {
            let imageId = sidesInverted ? 9 : 1;
            for (let i = 0; i < 14; i++) {
                this.ballsSet[i].frameName = "ball_icons_" + imageId + ".png";
                if (i === 6) {
                    if (sidesInverted) {
                        imageId = 0;
                    }
                    else {
                        imageId++;
                    }
                }
                imageId++;
            }
        }
        createCharacterDetails() {
            this.playerPortrait = new Phaser.Image(this.game, -80, MafiaBilliardTricks.GameConstants.GAME_HEIGHT * 1 / 12, "texture_atlas_4", "char_0.png");
            this.playerPortrait.anchor.set(0.5);
            this.add(this.playerPortrait);
            const playerName = new Phaser.Text(this.game, -155, MafiaBilliardTricks.GameConstants.GAME_HEIGHT * 1 / 12, "Gino \"Pooly\" Pullano", { font: "20px american-typewriter-regular", fill: "#FFFFFF" });
            playerName.anchor.set(1.0);
            this.add(playerName);
            const bosslevels = this.game.cache.getJSON("boss_levels");
            let bossLevelData = bosslevels;
            const bossId = MafiaBilliardTricks.GameVars.currentBoss;
            const bossPortraitName = "char_" + (bossLevelData[bossId].id).toString() + ".png";
            let bossName = bossLevelData[bossId].name;
            if (bossName === "Cousin Vinnie") {
                bossName = MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["COUSIN_VINNIE"];
            }
            this.bossPortrait = new Phaser.Image(this.game, 80, MafiaBilliardTricks.GameConstants.GAME_HEIGHT * 1 / 12, "texture_atlas_4", bossPortraitName);
            this.bossPortrait.anchor.set(0.5);
            this.add(this.bossPortrait);
            const bossNameLabel = new Phaser.Text(this.game, 155, MafiaBilliardTricks.GameConstants.GAME_HEIGHT * 1 / 12, bossName, { font: "20px american-typewriter-regular", fill: "#FFFFFF" });
            bossNameLabel.anchor.set(0.0, 1.0);
            this.add(bossNameLabel);
        }
    }
    MafiaBilliardTricks.HUD = HUD;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    let HUDMessageType;
    (function (HUDMessageType) {
        HUDMessageType[HUDMessageType["FOUL"] = 0] = "FOUL";
        HUDMessageType[HUDMessageType["SIDE_ASSIGNMENT"] = 1] = "SIDE_ASSIGNMENT";
        HUDMessageType[HUDMessageType["TURN_INDICATOR"] = 2] = "TURN_INDICATOR";
        HUDMessageType[HUDMessageType["POCKET_CHOICE"] = 3] = "POCKET_CHOICE";
    })(HUDMessageType = MafiaBilliardTricks.HUDMessageType || (MafiaBilliardTricks.HUDMessageType = {}));
    class UpperHUD extends Phaser.Group {
        constructor(game) {
            super(game, null, "message-overlay");
            this.killTweensDuration = 250;
            this.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2;
            this.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            this.killAllTweensAnywayTimer = this.killTweensDuration;
            this.messageGroup = this.game.add.group();
            this.messageGroup.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2;
            this.messageGroup.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
        }
        resetKillAllTweensAnywayTimer() {
            this.killAllTweensAnywayTimer = this.killTweensDuration;
        }
        areMessageTweensFinished() {
            this.killAllTweensAnywayTimer--;
            if (this.killAllTweensAnywayTimer <= 0) {
                MafiaBilliardTricks.GameManager.log("killing tweens");
                if (this.messageFoulTween) {
                    this.messageFoulTween.pendingDelete = true;
                }
                if (this.messageSideTween) {
                    this.messageSideTween.pendingDelete = true;
                }
                if (this.turnIndicatorTween) {
                    this.turnIndicatorTween.pendingDelete = true;
                }
                this.messageFoulTween = null;
                this.messageSideTween = null;
                this.turnIndicatorTween = null;
                this.destroyMessageObjects();
            }
            if (this.messageFoulTween) {
                if (this.messageFoulTween.isRunning) {
                    return false;
                }
                else {
                    this.messageFoulTween.pendingDelete = true;
                }
            }
            if (this.messageSideTween) {
                if (this.messageSideTween.isRunning) {
                    return false;
                }
                else {
                    this.messageSideTween.pendingDelete = true;
                }
            }
            if (this.turnIndicatorTween) {
                if (this.turnIndicatorTween.isRunning) {
                    return false;
                }
                else {
                    this.turnIndicatorTween.pendingDelete = true;
                }
            }
            return true;
        }
        destroyTimerLabel() {
            if (this.timerLabel) {
                this.timerLabel.destroy();
            }
        }
        addTimer(timerContainer) {
            this.timerLabel = new Phaser.Text(this.game, 0, 0, (MafiaBilliardTricks.GameVars.timeTurnsValue - MafiaBilliardTricks.GameVars.currentTimeOrTurns).toString(), { font: "180px american-typewriter-condensed-bold", fill: "#FFFFFF" });
            this.timerLabel.anchor.set(.5);
            this.timerLabel.alpha = .15;
            timerContainer.add(this.timerLabel);
        }
        updateTimer() {
            let showTimesUp = false;
            const timeLeft = MafiaBilliardTricks.GameVars.timeTurnsValue - MafiaBilliardTricks.GameVars.currentTimeOrTurns;
            if (this.timerLabel) {
                if (timeLeft < 0) {
                    showTimesUp = true;
                }
                else {
                    this.timerLabel.text = timeLeft.toString();
                }
            }
            else {
                return;
            }
            if (showTimesUp) {
                const timesUpLabel = new Phaser.Text(this.game, this.timerLabel.x, this.timerLabel.y, MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["TIME_UP"], { font: "180px american-typewriter-condensed-bold", fill: "#FFFFFF" });
                timesUpLabel.y = MafiaBilliardTricks.GameConstants.TABLE_POS_Y;
                timesUpLabel.anchor.set(.5);
                timesUpLabel.alpha = 0;
                this.add(MafiaBilliardTricks.Utils.resizeTextToFit(timesUpLabel, 800));
                this.game.add.tween(timesUpLabel).to({ alpha: .15 }, 750, Phaser.Easing.Cubic.Out, true).onComplete.add(() => {
                    this.game.add.tween(timesUpLabel).to({ alpha: 0 }, 750, Phaser.Easing.Cubic.Out, true, 250);
                }, this);
                this.destroyTimerLabel();
                showTimesUp = false;
            }
        }
        showMessage(hudMessage, data, duration = 1000) {
            if (this.killAllTweensAnywayTimer <= 0) {
                this.killAllTweensAnywayTimer = this.killTweensDuration;
            }
            if (hudMessage === HUDMessageType.FOUL) {
                this.ShowFoulMessage(data, duration);
            }
            else if (hudMessage === HUDMessageType.SIDE_ASSIGNMENT) {
                this.ShowSideAssignmentMessage(data, duration);
            }
            else if (hudMessage === HUDMessageType.TURN_INDICATOR) {
                this.ShowTurnIndicatorMessage(data, duration);
            }
            else if (hudMessage === HUDMessageType.POCKET_CHOICE) {
                this.ShowPocketChoiceMessage(data, duration);
            }
            else {
                throw ("Unknown hudMessageType");
            }
        }
        showSpark(pos) {
            let sparkImage = new Phaser.Image(this.game, pos.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE, (MafiaBilliardTricks.GameConstants.TABLE_POS_Y * (1 / MafiaBilliardTricks.GameVars.correctionScale) + pos.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE), "texture_atlas_1", "spark.png");
            sparkImage.anchor.set(0.5);
            this.add(sparkImage);
            sparkImage.scale.set(0);
            this.game.add.tween(sparkImage.scale).to({ x: 1, y: 1 }, 125, Phaser.Easing.Cubic.Out, true, 0, 0, true)
                .onComplete.add(function () {
                sparkImage.destroy();
            }, this);
        }
        ShowFoulMessage(text, duration) {
            MafiaBilliardTricks.GameManager.log("foul tween active");
            const foulMsg = new MafiaBilliardTricks.SText(this.game, 0, (MafiaBilliardTricks.GameConstants.TABLE_POS_Y + 65) * (1 / MafiaBilliardTricks.GameVars.correctionScale), MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language].FOUL_, 2, 200);
            this.messageGroup.add(foulMsg);
            foulMsg.anchor.set(0.5);
            foulMsg.alpha = 0;
            if (this.messageFoulTween) {
                this.messageFoulTween.stop();
                this.messageFoulTween.pendingDelete = true;
            }
            const tweenDuration = duration;
            this.messageFoulTween = this.game.add.tween(foulMsg)
                .to({ alpha: 1 }, tweenDuration, Phaser.Easing.Cubic.InOut, true, 0, 0, true);
            const foulMessage = new Phaser.Text(this.game, 0, (MafiaBilliardTricks.GameConstants.TABLE_POS_Y + 130) * (1 / MafiaBilliardTricks.GameVars.correctionScale), MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["FOUL"] + text, { font: "24px american-typewriter-regular", fill: "#cc2943" });
            foulMessage.anchor.set(0.5);
            foulMessage.alpha = 0;
            this.messageGroup.add(foulMessage);
            const foulMsgBgWidth = Math.max(700, foulMessage.width * 1.1);
            const foulMessageBackground = new Phaser.Graphics(this.game, 0, foulMessage.y);
            foulMessageBackground.beginFill(0x1b2429);
            foulMessageBackground.drawRect(-(foulMsgBgWidth / 2), -30, foulMsgBgWidth, 60);
            foulMessageBackground.alpha = 0;
            this.messageGroup.add(foulMessageBackground);
            this.messageGroup.swap(foulMessageBackground, foulMessage);
            this.game.add.tween(foulMessage)
                .to({ alpha: 1 }, tweenDuration, Phaser.Easing.Exponential.Out, true);
            this.game.add.tween(foulMessageBackground)
                .to({ alpha: 0.7 }, tweenDuration, Phaser.Easing.Exponential.Out, true);
            this.messageFoulTween.onComplete.add(function () {
                this.destroyMessageObjects();
            }, this);
        }
        createTextLabelForMessage(x, y, text, fontSize) {
            let characterComment = new Phaser.Text(this.game, x, y, text ? text : "", { font: (fontSize ? fontSize.toString() : "32") + "px american-typewriter-condensed-bold", fill: "#FFFFFF", align: "center" });
            characterComment.anchor.set(0.5);
            characterComment.alpha = 0;
            characterComment.wordWrap = true;
            characterComment.wordWrapWidth = 400;
            this.messageGroup.add(characterComment);
            return characterComment;
        }
        ShowSideAssignmentMessage(side, duration) {
            const brushSprite = this.createBrushSprite(0, (MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 - 70) / MafiaBilliardTricks.GameVars.correctionScale);
            brushSprite.animations.play("swipein", 26, false);
            let textLabel = this.createTextLabelForMessage(brushSprite.x + 10, brushSprite.y - 8);
            let stripes = (side === MafiaBilliardTricks.GameConstants.BALL_TYPE_STRIPED);
            textLabel.text = (stripes ? MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["YOU_ARE_STRIPES"] : MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["YOU_ARE_SOLIDS"]);
            textLabel.wordWrap = false;
            MafiaBilliardTricks.Utils.resizeTextToFit(textLabel, brushSprite.width * .7);
            let ballsGroup = this.createBallsGraphicForSides(0, textLabel.y, stripes);
            const tweenDuration = duration;
            if (this.messageSideTween) {
                this.messageSideTween.stop();
                this.messageSideTween.pendingDelete = true;
            }
            this.messageSideTween = this.game.add.tween(brushSprite);
            this.messageSideTween.to({ alpha: 1 }, tweenDuration, Phaser.Easing.Cubic.InOut, true, 0, 0, true);
            this.game.add.tween(textLabel)
                .to({ alpha: 1 }, tweenDuration, Phaser.Easing.Cubic.InOut, true, 0, 0, true);
            this.game.add.tween(ballsGroup)
                .to({ alpha: 1 }, tweenDuration, Phaser.Easing.Cubic.InOut, true, 0, 0, true);
            this.messageSideTween.onComplete.add(function () {
                brushSprite.animations.play("swipeout", 26, false);
                let swipeOutAnim = brushSprite.animations.getAnimation("swipeout");
                swipeOutAnim.onComplete.add(function () {
                    this.destroyMessageObjects();
                }, this);
            }, this);
        }
        createBallsGraphicForSides(x, y, stripes) {
            let ballX = 0;
            let ballsSet = [];
            let ballsGroup = this.game.add.group();
            for (let i = (stripes ? 9 : 1); i < (stripes ? 16 : 8); i++) {
                let ballSocket = new Phaser.Image(this.game, ballX, 0, "texture_atlas_1", "ball_icons_" + i + ".png");
                ballSocket.anchor.set(0.5, 0.0);
                ballsGroup.add(ballSocket);
                ballX += 35;
            }
            ballsGroup.alpha = 0;
            ballsGroup.position.set(x + MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 - ((ballX - 50) / 2 * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale), (y + 8) * MafiaBilliardTricks.GameVars.correctionScale);
            ballsGroup.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            this.game.add.existing(ballsGroup);
            return ballsGroup;
        }
        ShowTurnIndicatorMessage(activePlayer, duration) {
            if (!activePlayer) {
                throw "player error during turn message";
            }
            const brushSprite = this.createBrushSprite(0, (MafiaBilliardTricks.GameConstants.GAME_HEIGHT - 50) / MafiaBilliardTricks.GameVars.correctionScale);
            brushSprite.animations.play("swipein", 26, false);
            let isPlayerNextTurn = activePlayer.name === "player";
            let textOffset = (isPlayerNextTurn ? 80 : -45);
            let textLabel = this.createTextLabelForMessage(brushSprite.x + 10 + textOffset, brushSprite.y + 5, "", 40);
            textLabel.text = (isPlayerNextTurn ? MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["YOUR_TURN"] : MafiaBilliardTricks.GameVars.gameText[MafiaBilliardTricks.GameVars.gameData.language]["RIVAL_TURN"]);
            textLabel.wordWrap = false;
            MafiaBilliardTricks.Utils.resizeTextToFit(textLabel, brushSprite.width * .5);
            const bosslevels = this.game.cache.getJSON("boss_levels");
            let bossLevelData = bosslevels;
            const bossId = MafiaBilliardTricks.GameVars.currentBoss;
            const bossPortraitName = "char_" + (isPlayerNextTurn ? "0" : (bossLevelData[bossId].id).toString()) + ".png";
            const portrait = new Phaser.Image(this.game, textLabel.x - (textOffset * 3), textLabel.y - 36, "texture_atlas_4", bossPortraitName);
            portrait.scale.x *= .85;
            portrait.scale.y *= .85;
            this.messageGroup.add(portrait);
            const tweenDuration = duration;
            if (this.turnIndicatorTween) {
                this.turnIndicatorTween.stop();
                this.turnIndicatorTween.pendingDelete = true;
            }
            this.turnIndicatorTween = this.game.add.tween(brushSprite);
            this.turnIndicatorTween.to({ alpha: 1 }, tweenDuration, Phaser.Easing.Cubic.InOut, true, 0, 0, true);
            this.game.add.tween(textLabel)
                .to({ alpha: 1 }, tweenDuration, Phaser.Easing.Cubic.InOut, true, 0, 0, true);
            this.turnIndicatorTween.onComplete.add(function () {
                this.game.add.tween(portrait)
                    .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.InOut, true, 0, 0, true);
                brushSprite.animations.play("swipeout", 26, false);
                let swipeOutAnim = brushSprite.animations.getAnimation("swipeout");
                swipeOutAnim.onComplete.add(function () {
                    this.destroyMessageObjects();
                }, this);
            }, this);
        }
        ShowPocketChoiceMessage(text, duration) {
            const brushSprite = this.createBrushSprite(0, (MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 - 70) / MafiaBilliardTricks.GameVars.correctionScale);
            brushSprite.animations.play("swipein", 26, false);
            let textLabel = this.createTextLabelForMessage(brushSprite.x + 10, brushSprite.y, text, 26);
            const tweenDuration = duration;
            if (this.messageSideTween) {
                this.messageSideTween.stop();
                this.messageSideTween.pendingDelete = true;
            }
            this.messageSideTween = this.game.add.tween(brushSprite);
            this.messageSideTween.to({ alpha: 1 }, tweenDuration, Phaser.Easing.Cubic.InOut, true, 0, 0, true);
            this.game.add.tween(textLabel)
                .to({ alpha: 1 }, tweenDuration, Phaser.Easing.Cubic.InOut, true, 0, 0, true);
            this.messageSideTween.onComplete.add(function () {
                brushSprite.animations.play("swipeout", 26, false);
                let swipeOutAnim = brushSprite.animations.getAnimation("swipeout");
                swipeOutAnim.onComplete.add(function () {
                    this.destroyMessageObjects();
                }, this);
            }, this);
        }
        destroyMessageObjects() {
            this.messageGroup.destroy();
            this.messageGroup = this.game.add.group();
            this.messageGroup.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2;
            this.messageGroup.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
        }
        createBrushSprite(x, y) {
            const sprite = new Phaser.Sprite(this.game, x, y, "texture_atlas_1");
            sprite.alpha = 1;
            sprite.anchor.set(0.5);
            sprite.frameName = "brush_0.png";
            sprite.animations.add("swipein", ["brush_0.png", "brush_1.png", "brush_2.png", "brush_3.png", "brush_4.png"]);
            sprite.animations.add("swipeout", ["brush_4.png", "brush_3.png", "brush_2.png", "brush_1.png", "brush_0.png"]);
            this.messageGroup.add(sprite);
            return sprite;
        }
    }
    MafiaBilliardTricks.UpperHUD = UpperHUD;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class TutorialLayer extends Phaser.Group {
        constructor(game) {
            super(game, null, "tutorial-layer");
            this.game = game;
            this.doCheckDesiredAngle = false;
            this.desiredAngle = 0;
            this.clickHereIcon = null;
            this.waitingToClose = false;
            this.closeOnShot = false;
            this.background = this.game.add.sprite(0, 0, this.game.cache.getBitmapData(MafiaBilliardTricks.GameConstants.BLUE_SQUARE));
            this.background.alpha = 0.7;
            this.background.scale.set(MafiaBilliardTricks.GameConstants.GAME_WIDTH / MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            this.background.inputEnabled = true;
            this.background.events.onInputUp.add(this.onUpBackground, this);
            this.add(this.background);
        }
        update() {
            super.update();
            if (this.doCheckDesiredAngle) {
                let cueBallPos = MafiaBilliardTricks.GameVars.ballArray[0].position;
                let w = Billiard.Maths.findBearing(MafiaBilliardTricks.CueContainer.currentInstance.getAimDirection().x, MafiaBilliardTricks.CueContainer.currentInstance.getAimDirection().y);
                if (this.shootingInstructorRoughLocation) {
                    if (w < (this.desiredAngle - MafiaBilliardTricks.GameConstants.DESIRED_PATH_ERROR_MAX) * 60 || w > (this.desiredAngle + MafiaBilliardTricks.GameConstants.DESIRED_PATH_ERROR_MAX) * 60) {
                        this.shootingInstructorRoughLocation.visible = true;
                        if (this.shootingInstructorFineLocationDown && this.shootingInstructorFineLocationUp) {
                            this.shootingInstructorFineLocationDown.visible = false;
                            this.shootingInstructorFineLocationUp.visible = false;
                        }
                    }
                }
                if (this.shootingInstructorFineLocationDown && this.shootingInstructorFineLocationUp) {
                    if (w > this.desiredAngle - MafiaBilliardTricks.GameConstants.DESIRED_PATH_ERROR_MAX * 60 && w < this.desiredAngle + MafiaBilliardTricks.GameConstants.DESIRED_PATH_ERROR_MAX * 60) {
                        if (w - this.desiredAngle - MafiaBilliardTricks.GameConstants.DESIRED_PATH_ERROR_MAX < 0) {
                            this.shootingInstructorFineLocationDown.visible = true;
                            this.shootingInstructorFineLocationUp.visible = false;
                            this.shootingInstructorRoughLocation.visible = false;
                        }
                        else if (w - this.desiredAngle + MafiaBilliardTricks.GameConstants.DESIRED_PATH_ERROR_MAX > 0) {
                            this.shootingInstructorFineLocationDown.visible = false;
                            this.shootingInstructorFineLocationUp.visible = true;
                            this.shootingInstructorRoughLocation.visible = false;
                        }
                    }
                }
                if (this.shootingInstructor) {
                    if (w < this.desiredAngle - MafiaBilliardTricks.GameConstants.DESIRED_PATH_ERROR_MAX || w > this.desiredAngle + MafiaBilliardTricks.GameConstants.DESIRED_PATH_ERROR_MAX) {
                        this.shootingInstructor.visible = false;
                    }
                    else {
                        this.shootingInstructor.visible = true;
                        if (this.shootingInstructorFineLocationDown) {
                            this.shootingInstructorFineLocationDown.visible = false;
                        }
                        if (this.shootingInstructorFineLocationDown) {
                            this.shootingInstructorFineLocationUp.visible = false;
                        }
                        if (MafiaBilliardTricks.GameVars.shotRunning && !this.waitingToClose) {
                            const tween = this.createCheckMarkAtBall(1);
                            tween.onComplete.add(function () {
                                MafiaBilliardTricks.PoolState.currentInstance.hideTutorialLayer();
                            }, this);
                            this.waitingToClose = true;
                        }
                    }
                }
            }
            if (this.closeOnShot) {
                if (MafiaBilliardTricks.GameVars.shotRunning) {
                    this.closeOnShot = false;
                    MafiaBilliardTricks.PoolState.currentInstance.hideTutorialLayer();
                }
            }
        }
        init(tutId) {
            switch (tutId) {
                case 0:
                    {
                        this.doCheckDesiredAngle = true;
                        this.desiredAngle = -11.12;
                        MafiaBilliardTricks.StageContainer.currentInstance.setDesiredAimAngle(this.desiredAngle);
                        this.background.visible = false;
                        this.setupShootingInstructor();
                        break;
                    }
                case 1:
                    {
                        this.doCheckDesiredAngle = true;
                        this.desiredAngle = -1.82;
                        MafiaBilliardTricks.StageContainer.currentInstance.setDesiredAimAngle(this.desiredAngle);
                        this.background.visible = false;
                        break;
                    }
                case 2:
                    {
                        this.doCheckDesiredAngle = true;
                        this.desiredAngle = -90;
                        MafiaBilliardTricks.StageContainer.currentInstance.setDesiredAimAngle(this.desiredAngle);
                        this.background.visible = false;
                        break;
                    }
                case 3:
                    {
                        MafiaBilliardTricks.GameVars.paused = true;
                        let spinB = this.createSpinButtonClone();
                        spinB.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
                        this.createClickHereIcon(spinB.x, spinB.y, true);
                        MafiaBilliardTricks.GameVars.suggestedSpin = MafiaBilliardTricks.SpinTypes.BACKSPIN;
                        break;
                    }
                case 4:
                    {
                        this.background.visible = false;
                        let x = MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2;
                        let y = MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 + 80 * MafiaBilliardTricks.GameVars.correctionScale;
                        this.createClickMask(x, y, this.clickOnSpinCircle);
                        this.clickHereIcon = this.createClickHereIcon(x, y, false);
                        let desiredAngle = -90;
                        MafiaBilliardTricks.StageContainer.currentInstance.setDesiredAimAngle(desiredAngle);
                        MafiaBilliardTricks.GameVars.suggestedSpin = MafiaBilliardTricks.SpinTypes.NONE;
                        break;
                    }
                case 5:
                    {
                        this.background.visible = false;
                        this.createClickMask(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 5, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2, this.endTutorialAndCloseSpinCircle);
                        this.clickHereIcon = this.createClickHereIcon(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 5, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2, false);
                        break;
                    }
                case 6:
                    {
                        this.background.visible = false;
                        this.closeOnShot = true;
                        if (MafiaBilliardTricks.GameVars.lossOnColourSunk) {
                            for (let i = 0, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                                if (MafiaBilliardTricks.GameVars.lossOnColourSunk.indexOf(MafiaBilliardTricks.GameVars.ballArray[i].id) > -1) {
                                    let ball = MafiaBilliardTricks.GameVars.ballArray[i];
                                    this.game.add.tween(ball.mc.scale)
                                        .to({ x: 1.1, y: 1.1 }, 400, Phaser.Easing.Cubic.Out, true, 0, 3, true);
                                    this.game.add.tween(ball.shadow.scale)
                                        .to({ x: 1.1, y: 1.1 }, 400, Phaser.Easing.Cubic.Out, true, 0, 3, true);
                                }
                            }
                            for (let i = 0, ln = MafiaBilliardTricks.GameVars.pocketArray.length; i < ln; i++) {
                                const x = MafiaBilliardTricks.GameConstants.TABLE_POS_X + MafiaBilliardTricks.GameVars.pocketArray[i].position.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
                                const y = MafiaBilliardTricks.GameConstants.TABLE_POS_Y + MafiaBilliardTricks.GameVars.pocketArray[i].position.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE * MafiaBilliardTricks.GameVars.correctionScale;
                                let symbol = this.showSymbolAndFade(x, y, "forbidden_icon.png");
                            }
                        }
                        break;
                    }
                case 7:
                    {
                        this.background.visible = false;
                        this.closeOnShot = true;
                        if (MafiaBilliardTricks.GameVars.lossOnColourTouch) {
                            let forbiddenIconTween;
                            for (let i = 0, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                                if (MafiaBilliardTricks.GameVars.lossOnColourTouch.indexOf(MafiaBilliardTricks.GameVars.ballArray[i].id) > -1) {
                                    let cueBall = MafiaBilliardTricks.GameVars.ballArray[i];
                                    const x = (MafiaBilliardTricks.GameConstants.TABLE_POS_X) + cueBall.mc.x * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
                                    const y = (MafiaBilliardTricks.GameConstants.TABLE_POS_Y) + cueBall.mc.y * MafiaBilliardTricks.GameVars.correctionScale;
                                    forbiddenIconTween = this.showSymbolAndFade(x, y, "forbidden_icon.png", false, false);
                                }
                            }
                            forbiddenIconTween.onComplete.add(function () {
                                for (let i = 0, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                                    if (MafiaBilliardTricks.GameVars.lossOnColourSunk.indexOf(MafiaBilliardTricks.GameVars.ballArray[i].id) > -1) {
                                        let ball = MafiaBilliardTricks.GameVars.ballArray[i];
                                        this.game.add.tween(ball.mc.scale)
                                            .to({ x: 1.1, y: 1.1 }, 400, Phaser.Easing.Cubic.Out, true, 0, 3, true);
                                        this.game.add.tween(ball.shadow.scale)
                                            .to({ x: 1.1, y: 1.1 }, 400, Phaser.Easing.Cubic.Out, true, 0, 3, true);
                                    }
                                }
                                for (let i = 0, ln = MafiaBilliardTricks.GameVars.pocketArray.length; i < ln; i++) {
                                    const x = MafiaBilliardTricks.GameConstants.TABLE_POS_X + MafiaBilliardTricks.GameVars.pocketArray[i].position.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
                                    const y = MafiaBilliardTricks.GameConstants.TABLE_POS_Y + MafiaBilliardTricks.GameVars.pocketArray[i].position.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE * MafiaBilliardTricks.GameVars.correctionScale;
                                    let symbol = this.showSymbolAndFade(x, y, "forbidden_icon.png");
                                }
                            }, this);
                        }
                        break;
                    }
                case 8:
                    {
                        this.background.visible = false;
                        this.closeOnShot = true;
                        if (MafiaBilliardTricks.GameVars.invisibleBalls) {
                            for (let i = 0, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                                if (MafiaBilliardTricks.GameVars.invisibleBalls.indexOf(MafiaBilliardTricks.GameVars.ballArray[i].id) > -1) {
                                    let cueBall = MafiaBilliardTricks.GameVars.ballArray[i];
                                    const x = (MafiaBilliardTricks.GameConstants.TABLE_POS_X) + cueBall.mc.x * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
                                    const y = (MafiaBilliardTricks.GameConstants.TABLE_POS_Y) + cueBall.mc.y * MafiaBilliardTricks.GameVars.correctionScale;
                                    this.showSymbolAndFade(x, y, "invisible_ball_marker.png");
                                }
                            }
                        }
                        break;
                    }
                case 9:
                    {
                        this.background.visible = false;
                        this.closeOnShot = true;
                        if (MafiaBilliardTricks.GameVars.lossOnColourTouch) {
                            let forbiddenIconTween;
                            for (let i = 0, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                                if (MafiaBilliardTricks.GameVars.lossOnColourTouch.indexOf(MafiaBilliardTricks.GameVars.ballArray[i].id) > -1) {
                                    let cueBall = MafiaBilliardTricks.GameVars.ballArray[i];
                                    const x = (MafiaBilliardTricks.GameConstants.TABLE_POS_X) + cueBall.mc.x * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
                                    const y = (MafiaBilliardTricks.GameConstants.TABLE_POS_Y) + cueBall.mc.y * MafiaBilliardTricks.GameVars.correctionScale;
                                    forbiddenIconTween = this.showSymbolAndFade(x, y, "forbidden_icon.png", false, false);
                                }
                            }
                            forbiddenIconTween.onComplete.add(function () {
                                for (let i = 0, ln = MafiaBilliardTricks.GameVars.pocketArray.length; i < ln; i++) {
                                    const x = MafiaBilliardTricks.GameConstants.TABLE_POS_X + MafiaBilliardTricks.GameVars.pocketArray[i].position.x * MafiaBilliardTricks.GameConstants.PHYS_SCALE * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
                                    const y = MafiaBilliardTricks.GameConstants.TABLE_POS_Y + MafiaBilliardTricks.GameVars.pocketArray[i].position.y * MafiaBilliardTricks.GameConstants.PHYS_SCALE * MafiaBilliardTricks.GameVars.correctionScale;
                                    this.showSymbolAndFade(x, y, "pocket_icon.png", false, true);
                                }
                                if (MafiaBilliardTricks.GameVars.winOnColourSunk) {
                                    for (let i = 0, ln = MafiaBilliardTricks.GameVars.ballArray.length; i < ln; i++) {
                                        if (MafiaBilliardTricks.GameVars.winOnColourSunk.indexOf(MafiaBilliardTricks.GameVars.ballArray[i].id) > -1) {
                                            let ball = MafiaBilliardTricks.GameVars.ballArray[i];
                                            this.game.add.tween(ball.mc.scale)
                                                .to({ x: 1.1, y: 1.1 }, 400, Phaser.Easing.Cubic.Out, true, 0, 3, true);
                                            this.game.add.tween(ball.shadow.scale)
                                                .to({ x: 1.1, y: 1.1 }, 400, Phaser.Easing.Cubic.Out, true, 0, 3, true);
                                        }
                                    }
                                }
                            }, this);
                        }
                        break;
                    }
                default: break;
            }
        }
        showSymbolAndFade(x, y, symbolImageFileName, spinNoFade, closeTutorialOnComplete = true) {
            const symbol = new Phaser.Image(this.game, x, y, "texture_atlas_1", symbolImageFileName);
            symbol.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            symbol.anchor.set(0.5);
            this.add(symbol);
            let tween = this.game.add.tween(symbol);
            if (spinNoFade) {
                tween.to({ angle: 180 }, 2000, Phaser.Easing.Cubic.InOut, true, 0);
            }
            else {
                tween.to({ alpha: 0 }, 500, Phaser.Easing.Cubic.InOut, true, 2750);
            }
            tween.onComplete.add(function () {
                if (closeTutorialOnComplete) {
                    MafiaBilliardTricks.PoolState.currentInstance.hideTutorialLayer();
                }
            }, this);
            return tween;
        }
        clickOnSpinCircle() {
            MafiaBilliardTricks.SpinCircleLayer.currentInstance.forceSetDot(new Phaser.Point(0, 1));
            MafiaBilliardTricks.SpinCircleLayer.currentInstance.lockRedDot();
            if (this.clickHereIcon) {
                this.clickHereIcon.destroy();
            }
            this.endTutorialAndCloseSpinCircle();
        }
        createCheckMarkAtBall(ballIndex) {
            let cueBallPos = MafiaBilliardTricks.GameVars.ballArray[ballIndex].mc.position;
            const yOffsetCorrection = 30;
            const xOffsetCorrection = 60;
            const x = (MafiaBilliardTricks.GameConstants.TABLE_POS_X) + (cueBallPos.x + xOffsetCorrection) * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            const y = (MafiaBilliardTricks.GameConstants.TABLE_POS_Y) + (cueBallPos.y + yOffsetCorrection) * MafiaBilliardTricks.GameVars.correctionScale;
            const checkmark = new Phaser.Image(this.game, x, y, "texture_atlas_1", "correct.png");
            checkmark.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            checkmark.scale.y = 0.0001;
            checkmark.anchor.set(.5);
            this.add(checkmark);
            let checkTween = this.game.add.tween(checkmark.scale);
            checkTween.to({ y: 1 * MafiaBilliardTricks.GameVars.correctionScale }, 500, Phaser.Easing.Cubic.Out, true, 0);
            return checkTween;
        }
        setupShootingInstructor() {
            if (this.game.device.touch) {
                let cueBallPos = MafiaBilliardTricks.GameVars.ballArray[1].mc.position;
                const yOffsetCorrection = 30;
                const iconX = (MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2) + cueBallPos.x * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
                const iconY = (MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2) + (cueBallPos.y + yOffsetCorrection) * MafiaBilliardTricks.GameVars.correctionScale;
                this.shootingInstructorRoughLocation = this.createClickHereIcon(iconX, iconY, false);
                const fdX = (MafiaBilliardTricks.PoolState.currentInstance.gui.fineDial.x + (MafiaBilliardTricks.PoolState.currentInstance.gui.fineDial.getWidth() / 2) - 8 * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale);
                const fdY = MafiaBilliardTricks.PoolState.currentInstance.gui.fineDial.y + 90 * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
                this.shootingInstructorFineLocationDown = new Phaser.Image(this.game, fdX, fdY, "texture_atlas_1", "hand-finger-icon.png");
                this.shootingInstructorFineLocationDown.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
                this.shootingInstructorFineLocationDown.angle = 180;
                this.add(this.shootingInstructorFineLocationDown);
                this.game.add.tween(this.shootingInstructorFineLocationDown)
                    .to({ y: fdY + 100 }, 1500, Phaser.Easing.Cubic.InOut, true, 0, -1);
                this.shootingInstructorFineLocationUp = new Phaser.Image(this.game, fdX, fdY, "texture_atlas_1", "hand-finger-icon.png");
                this.shootingInstructorFineLocationUp.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
                this.shootingInstructorFineLocationUp.angle = 180;
                this.add(this.shootingInstructorFineLocationUp);
                this.game.add.tween(this.shootingInstructorFineLocationUp)
                    .to({ y: fdY - 100 }, 1500, Phaser.Easing.Cubic.InOut, true, 0, -1);
                this.shootingInstructorFineLocationDown.visible = false;
                this.shootingInstructorFineLocationUp.visible = false;
                this.shootingInstructor = new Phaser.Image(this.game, MafiaBilliardTricks.PoolState.currentInstance.gui.forceSettingContainer.x, MafiaBilliardTricks.PoolState.currentInstance.gui.forceSettingContainer.y - (MafiaBilliardTricks.PoolState.currentInstance.gui.forceSettingContainer.getHeight() / 4), "texture_atlas_1", "hand-finger-icon.png");
                this.shootingInstructor.angle = 180;
                this.game.add.tween(this.shootingInstructor)
                    .to({ y: this.shootingInstructor.y + 150 }, 1500, Phaser.Easing.Cubic.InOut, true, 0, -1);
            }
            else {
                this.shootingInstructor = new Phaser.Image(this.game, MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", "mouse_icon.png");
                let cueBall = MafiaBilliardTricks.GameVars.ballArray[0];
                const cueX = (MafiaBilliardTricks.GameConstants.TABLE_POS_X) + cueBall.mc.x * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
                const cueY = (MafiaBilliardTricks.GameConstants.TABLE_POS_Y) + cueBall.mc.y * MafiaBilliardTricks.GameVars.correctionScale;
                let cueDir = new Billiard.Vector2D(this.shootingInstructor.position.x, this.shootingInstructor.position.y).minus(new Billiard.Vector2D(cueX, cueY));
                let iconTweenTransform = cueDir.normalize();
                iconTweenTransform = iconTweenTransform.times(-150);
                this.shootingInstructor.y += 150 * MafiaBilliardTricks.GameVars.correctionScale;
                const origX = this.shootingInstructor.x;
                const origY = this.shootingInstructor.y;
                let t = this.game.add.tween(this.shootingInstructor)
                    .to({ x: origX, y: origY }, 250, Phaser.Easing.Cubic.InOut)
                    .onUpdateCallback(function () {
                    this.shootingInstructor.frameName = "mouse_icon.png";
                }, this);
                let t2 = this.game.add.tween(this.shootingInstructor)
                    .to({ x: this.shootingInstructor.x + iconTweenTransform.x, y: this.shootingInstructor.y + iconTweenTransform.y }, 1500, Phaser.Easing.Cubic.InOut)
                    .onUpdateCallback(function () {
                    this.shootingInstructor.frameName = "mouse_icon_press.png";
                }, this);
                let t3 = this.game.add.tween(this.shootingInstructor)
                    .to({}, 250, Phaser.Easing.Cubic.InOut)
                    .onUpdateCallback(function () {
                    this.shootingInstructor.frameName = "mouse_icon.png";
                }, this);
                t.chain(t2);
                t2.chain(t3);
                t3.chain(t);
                t.start();
            }
            this.shootingInstructor.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            this.shootingInstructor.visible = false;
            this.shootingInstructor.anchor.set(.5);
            this.add(this.shootingInstructor);
        }
        createClickMask(x, y, callback, arg0, arg1) {
            const maskScale = 1;
            const tapMask = new Phaser.Image(this.game, x, y, "texture_atlas_1", "tap_mask.png");
            tapMask.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale * maskScale, MafiaBilliardTricks.GameVars.correctionScale * maskScale);
            tapMask.anchor.set(.5);
            this.add(tapMask);
            const tapArea = new Phaser.Image(this.game, x, y, "texture_atlas_1", "pocket_mark.png");
            tapArea.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale * maskScale, MafiaBilliardTricks.GameVars.correctionScale * maskScale);
            tapArea.anchor.set(.5);
            if (callback) {
                tapArea.inputEnabled = true;
                tapArea.events.onInputUp.add(callback, this, 0, { arg0, arg1 });
            }
            this.add(tapArea);
            this.fillScreenWithRectHole(tapMask.x, tapMask.y, tapMask.width, tapMask.height);
        }
        fillScreenWithRectHole(holeX, holeY, holeWidth, holeHeight) {
            const holeYOffsetFromCenter = (MafiaBilliardTricks.GameConstants.GAME_HEIGHT / 2 - holeY);
            const topSquareHeight = (MafiaBilliardTricks.GameConstants.GAME_HEIGHT - holeHeight) / 2;
            const topSquareWidth = (MafiaBilliardTricks.GameConstants.GAME_WIDTH - holeWidth) / 2;
            const v0 = new Phaser.Point(0, topSquareHeight - holeYOffsetFromCenter);
            const v1 = new Phaser.Point(MafiaBilliardTricks.GameConstants.GAME_WIDTH, topSquareHeight - holeYOffsetFromCenter);
            const v2 = new Phaser.Point(topSquareWidth, holeHeight);
            const v2_1 = new Phaser.Point(holeX - (holeWidth / 2), holeHeight);
            const rect1 = new Phaser.Graphics(this.game, 0, 0);
            rect1.beginFill(0x1b2952, 0.7);
            rect1.drawRect(0, 0, v1.x, v1.y);
            rect1.inputEnabled = true;
            rect1.events.onInputUp.add(this.onUpBackground);
            this.add(rect1);
            const rect2 = new Phaser.Graphics(this.game, v0.x, v0.y);
            rect2.beginFill(0x1b2952, 0.7);
            rect2.drawRect(0, 0, v2_1.x, v2.y);
            rect2.inputEnabled = true;
            rect2.events.onInputUp.add(this.onUpBackground);
            this.add(rect2);
            const rect3 = new Phaser.Graphics(this.game, v2_1.x + holeWidth, v0.y);
            rect3.beginFill(0x1b2952, 0.7);
            rect3.drawRect(0, 0, MafiaBilliardTricks.GameConstants.GAME_WIDTH, v2.y);
            rect3.inputEnabled = true;
            rect3.events.onInputUp.add(this.onUpBackground);
            this.add(rect3);
            const rect4 = new Phaser.Graphics(this.game, 0, v0.y + holeHeight);
            rect4.beginFill(0x1b2952, 0.7);
            rect4.drawRect(0, 0, MafiaBilliardTricks.GameConstants.GAME_WIDTH, MafiaBilliardTricks.GameConstants.GAME_HEIGHT);
            rect4.inputEnabled = true;
            rect4.events.onInputUp.add(this.onUpBackground);
            this.add(rect4);
        }
        createClickHereIcon(x, y, rotate90Deg, callBack, clickRadius) {
            const tutorialFinger = new Phaser.Image(this.game, x, y, "texture_atlas_1", "hand-finger-icon.png");
            tutorialFinger.scale.set(MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.correctionScale);
            tutorialFinger.anchor.set(.5);
            this.add(tutorialFinger);
            if (!rotate90Deg) {
                tutorialFinger.y -= 25;
                this.game.add.tween(tutorialFinger)
                    .to({ y: tutorialFinger.y - 50 }, 500, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            }
            else {
                tutorialFinger.x -= 40;
                tutorialFinger.angle = -90;
                tutorialFinger.scale.set(MafiaBilliardTricks.GameVars.correctionScale, MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale);
                this.game.add.tween(tutorialFinger)
                    .to({ x: tutorialFinger.x - 50 }, 500, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            }
            return tutorialFinger;
        }
        createSpinButtonClone() {
            const ballButtonContainer = new Phaser.Group(this.game);
            ballButtonContainer.x = MafiaBilliardTricks.GameConstants.GAME_WIDTH - 48 * MafiaBilliardTricks.GameVars.scaleX * MafiaBilliardTricks.GameVars.correctionScale;
            ballButtonContainer.y = 48 * MafiaBilliardTricks.GameVars.correctionScale;
            this.add(ballButtonContainer);
            const cueBallButton = new Phaser.Button(this.game, 0, 0, "texture_atlas_1", this.onClickSpinButtonClone);
            cueBallButton.setFrames("cue_ball_button_on.png", "cue_ball_button_off.png", "cue_ball_button_on.png", "cue_ball_button_off.png");
            cueBallButton.anchor.set(.5);
            ballButtonContainer.add(cueBallButton);
            const redDot = new Phaser.Image(this.game, 0, 0, "texture_atlas_1", "red-dot.png");
            redDot.anchor.set(.5);
            redDot.scale.set(.5);
            ballButtonContainer.add(redDot);
            return ballButtonContainer;
        }
        onClickSpinButtonClone(button) {
            button.clearFrames();
            MafiaBilliardTricks.GameVars.continueWithTutorial = true;
            MafiaBilliardTricks.PoolState.currentInstance.showSpinCircleLayer();
        }
        endTutorialAndCloseSpinCircle() {
            MafiaBilliardTricks.SpinCircleLayer.currentInstance.onDownTransparentLayer();
            MafiaBilliardTricks.GameVars.skipNextScreenTap = false;
            MafiaBilliardTricks.GameVars.continueWithTutorial = false;
            MafiaBilliardTricks.PoolState.currentInstance.hideTutorialLayer();
        }
        onUpBackground() {
        }
    }
    MafiaBilliardTricks.TutorialLayer = TutorialLayer;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
var MafiaBilliardTricks;
(function (MafiaBilliardTricks) {
    class PreLoader extends Phaser.State {
        init() {
            PreLoader.currentInstance = this;
            this.load.path = MafiaBilliardTricks.GameConstants.ASSETS_PATH;
        }
        preload() {
            this.generateBitmapData();
            this.composeScene();
            this.loadAssets();
            if (window.innerWidth === 568) {
                document.getElementById("content").style.height = "226px";
                MafiaBilliardTricks.GameVars.scaleX = (MafiaBilliardTricks.GameConstants.GAME_WIDTH / MafiaBilliardTricks.GameConstants.GAME_HEIGHT) / (window.innerWidth / window.innerHeight);
            }
        }
        create() {
            this.load.onFileComplete.remove(this.updateLoadedPercentage, this);
            this.game.add.tween(this.scaledItemsContainer)
                .to({ alpha: 0 }, MafiaBilliardTricks.GameConstants.DEVELOPMENT ? 0 : 350, Phaser.Easing.Cubic.Out, true, MafiaBilliardTricks.GameConstants.DEVELOPMENT ? 0 : 400)
                .onComplete.add(function () {
                MafiaBilliardTricks.GameManager.onGameAssetsLoaded();
            }, this);
        }
        shutdown() {
            PreLoader.currentInstance = null;
            super.shutdown();
        }
        updateLoadedPercentage() {
            this.preloadBar.scale.x = this.load.progress / 100 * 6.8;
        }
        loadAssets() {
            this.load.spritesheet("starFX", "/starFX.png", 215, 180, 14);
            this.load.audiosprite("audio-sprite", ["/audio/audiosprite.mp3", "/audio/audiosprite.ogg", "/audio/audiosprite.m4a"], "/audio/audiosprite.json");
            if (MafiaBilliardTricks.GameConstants.DEVELOPMENT) {
                this.load.atlasJSONArray("texture_atlas_0", "/texture_atlas_0.png", "/texture_atlas_0.json");
            }
            this.load.atlasJSONArray("texture_atlas_1", "/texture_atlas_1.png", "/texture_atlas_1.json");
            this.load.atlasJSONArray("texture_atlas_2", "/texture_atlas_2.png", "/texture_atlas_2.json");
            this.load.atlasJSONArray("texture_atlas_3", "/texture_atlas_3.jpg", "/texture_atlas_3.json");
            this.load.atlasJSONArray("texture_atlas_4", "/texture_atlas_4.png", "/texture_atlas_4.json");
            this.load.json("levels", "/config/levels.json");
            this.load.json("boss_levels", "/config/boss_levels.json");
            if (!MafiaBilliardTricks.GameVars.gameData.languageSet) {
                var userLang = navigator.language.substr(0, 2);
                if (userLang === MafiaBilliardTricks.GameConstants.GERMAN ||
                    userLang === MafiaBilliardTricks.GameConstants.ENGLISH ||
                    userLang === MafiaBilliardTricks.GameConstants.SPANISH ||
                    userLang === MafiaBilliardTricks.GameConstants.FRENCH ||
                    userLang === MafiaBilliardTricks.GameConstants.PORTUGUESE ||
                    userLang === MafiaBilliardTricks.GameConstants.CATALAN) {
                    MafiaBilliardTricks.GameManager.setLanguage(userLang);
                }
                else {
                    MafiaBilliardTricks.GameManager.setLanguage(MafiaBilliardTricks.GameConstants.ENGLISH);
                }
            }
            else {
                MafiaBilliardTricks.GameManager.setLanguage(MafiaBilliardTricks.GameVars.gameData.language, false);
            }
            this.load.json("dialogue_bank", "/config/dialogue_bank.json");
            this.load.json("game-text", "/config/game_text.json");
            this.load.onFileComplete.add(this.updateLoadedPercentage, this);
        }
        composeScene() {
            this.add.text(0, 0, "abcdefg", { font: "20px american-typewriter-regular", fill: "#FFFFFF" });
            this.add.text(0, 0, "abcdefg", { font: "20px american-typewriter-condensed-bold", fill: "#FFFFFF" });
            let tmpBackground = this.add.sprite(0, 0, this.game.cache.getBitmapData(MafiaBilliardTricks.GameConstants.WHITE_SQUARE));
            tmpBackground.tint = 0x2f1a20;
            tmpBackground.scale.set(MafiaBilliardTricks.GameConstants.GAME_WIDTH / MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.GAME_HEIGHT / MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            this.add.image(0, 0, "bar");
            const lowerBar = this.add.image(MafiaBilliardTricks.GameConstants.GAME_WIDTH, MafiaBilliardTricks.GameConstants.GAME_HEIGHT, "bar");
            lowerBar.angle = 180;
            this.scaledItemsContainer = this.add.group();
            this.scaledItemsContainer.position.set(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, 0);
            this.scaledItemsContainer.scale.x = MafiaBilliardTricks.GameVars.scaleX;
            this.game.time.events.add(200, function () {
                const loadingText = this.getPreloaderLoadingText();
                const loadingLabel = new Phaser.Text(this.game, 0, 305, loadingText, { font: "42px american-typewriter-regular", fill: "#FFFFFF" });
                loadingLabel.anchor.set(.5);
                loadingLabel.scale.x = MafiaBilliardTricks.GameVars.scaleX;
                this.scaledItemsContainer.add(loadingLabel);
            }, this);
            const preloadBarCapsule = this.add.sprite(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2, 350, this.game.cache.getBitmapData(MafiaBilliardTricks.GameConstants.WHITE_SQUARE));
            preloadBarCapsule.anchor.set(.5);
            preloadBarCapsule.scale.setTo(6.875, .2125);
            this.preloadBar = this.add.sprite(MafiaBilliardTricks.GameConstants.GAME_WIDTH / 2 - 217.5, 350, this.game.cache.getBitmapData(MafiaBilliardTricks.GameConstants.BLACK_SQUARE));
            this.preloadBar.scale.setTo(0, .15);
            this.preloadBar.anchor.set(0, .5);
        }
        getPreloaderLoadingText() {
            let currentLanguage = "";
            if (!MafiaBilliardTricks.GameVars.gameData.languageSet) {
                var userLang = navigator.language.substr(0, 2);
                if (userLang === MafiaBilliardTricks.GameConstants.GERMAN ||
                    userLang === MafiaBilliardTricks.GameConstants.ENGLISH ||
                    userLang === MafiaBilliardTricks.GameConstants.SPANISH ||
                    userLang === MafiaBilliardTricks.GameConstants.FRENCH ||
                    userLang === MafiaBilliardTricks.GameConstants.PORTUGUESE ||
                    userLang === MafiaBilliardTricks.GameConstants.CATALAN) {
                    currentLanguage = userLang;
                }
                else {
                    currentLanguage = MafiaBilliardTricks.GameConstants.ENGLISH;
                }
            }
            else {
                currentLanguage = MafiaBilliardTricks.GameVars.gameData.language;
            }
            switch (currentLanguage) {
                case "de": return "LADEN...";
                case "fr": return "CHARGEMENT...";
                case "es": return "CARGANDO...";
                case "pt": return "CARREGANDO...";
                case "ru": return "ЗАГРУЗКА...";
                case "ca": return "CARREGANT...";
                case "en":
                default: return "LOADING...";
            }
        }
        generateBitmapData() {
            let bmd = this.game.add.bitmapData(16, 128, "intro_background", true);
            let grd = bmd.ctx.createLinearGradient(0, 0, 0, 128);
            grd.addColorStop(0, "#11c0e9");
            grd.addColorStop(1, "#6fbe4d");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 128);
            bmd = this.game.add.bitmapData(16, 128, "yellow-gradient", true);
            grd = bmd.ctx.createLinearGradient(0, 0, 0, 128);
            grd.addColorStop(0, "#FFDC42");
            grd.addColorStop(1, "#FFB400");
            bmd = this.game.add.bitmapData(16, 128, "dark-green-gradient", true);
            grd = bmd.ctx.createLinearGradient(0, 0, 0, 128);
            grd.addColorStop(0, "#049f7d");
            grd.addColorStop(1, "#02392d");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 128);
            bmd = this.game.add.bitmapData(MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BLACK_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#000000";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BROWN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#4C3528";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.WHITE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#ffffff";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, "dark_blue_square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#4C819A";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.GREY_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#333333";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#00FF00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.RED_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#FF0000";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#1b2952";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.DARK_BROWN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#2f1a20";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 64, "dark_gradient", true);
            grd = bmd.ctx.createLinearGradient(0, 0, 0, 64);
            grd.addColorStop(0, "#283939");
            grd.addColorStop(1, "#000000");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 64);
            bmd = this.game.add.bitmapData(MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, "preload-bar", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, MafiaBilliardTricks.GameConstants.BITMAP_SIZE, MafiaBilliardTricks.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#fc8e00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 128, "black_gradient", true);
            for (let i = 0; i < 16; i++) {
                for (let j = 0; j < 128; j++) {
                    bmd.setPixel32(i, j, 0, 0, 0, 255 * j / 127);
                }
            }
        }
    }
    MafiaBilliardTricks.PreLoader = PreLoader;
})(MafiaBilliardTricks || (MafiaBilliardTricks = {}));
//# sourceMappingURL=mafia-billiard-tricks.min.js.map